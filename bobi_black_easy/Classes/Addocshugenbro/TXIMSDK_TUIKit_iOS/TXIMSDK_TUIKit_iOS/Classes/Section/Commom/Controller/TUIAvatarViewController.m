#import "TUIAvatarViewController.h"
#import "ReactiveObjC/ReactiveObjC.h"
#import "SDWebImage/UIImageView+WebCache.h"
#import "MMLayout/UIView+MMLayout.h"
#import "UIImage+TUIKIT.h"
#import "TScrollView.h"
#import "TUIKit.h"
#import "SVProgressHUD.h"
#import "Masonry.h"
#import "TUIBlackListController.h"
#import "TZImagePickerController.h"
#import "FMDB.h"
#import "IQKeyboardManager.h"
#import "TUICameraViewController.h"
#import <AVFoundation/AVFoundation.h>
#import "SGPagingView.h"
#import "AFNetworking.h"
#import "MJExtension.h"
#import "IQKeyboardManager.h"
#include <ifaddrs.h>
#import <sys/socket.h>
#import <sys/sockio.h>
#import <sys/ioctl.h>
#import <net/if.h>
#import <arpa/inet.h>
#import <WebKit/WebKit.h>
#import "BRStringPickerView.h"
#import "MJRefresh.h"
#import "KJBannerViewCell.h"
#import "KJBannerView.h"
#import "IAPShare.h"
#import "NSString+TUICommon.h"
#import "UIButton+SGPagingView.h"
#import "SDCycleScrollView.h"
#import "LeeTagView.h"
#import "YBImageBrowser.h"
#import "TUIBlackListController.h"

#define IOS_CELLULAR    @"pdp_ip0"//有些分配的地址为en0 有些分配的en1
#define IOS_WIFI2       @"en2"
#define IOS_WIFI1       @"en1"
#define IOS_WIFI        @"en0"//
#define IOS_VPN         @"utun0"  vpn很少用到可以注释
#define IP_ADDR_IPv4    @"ipv4"
#define IP_ADDR_IPv6    @"ipv6"
//#import "NeighborsSimpleTool.h"
@interface TUIAvatarViewController ()<UIScrollViewDelegate>
@property UIImageView *avatarView;
@property TScrollView *avatarScrollView;
@property UIImage *saveBackgroundImage;
@property UIImage *saveShadowImage;
@end

@implementation TUIAvatarViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    self.saveBackgroundImage = [self.navigationController.navigationBar backgroundImageForBarMetrics:UIBarMetricsDefault];
    self.saveShadowImage = self.navigationController.navigationBar.shadowImage;
    [self.navigationController.navigationBar setBackgroundImage:[UIImage new]
                                                  forBarMetrics:UIBarMetricsDefault];
    self.navigationController.navigationBar.shadowImage = [UIImage new];

    self.avatarScrollView = [[TScrollView alloc] initWithFrame:CGRectZero];
    [self.view addSubview:self.avatarScrollView];
    self.avatarScrollView.backgroundColor = [UIColor blackColor];
    self.avatarScrollView.mm_fill();

    self.avatarView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:TUIKitResource(@"nsc_defautl")]];
    self.avatarScrollView.imageView = self.avatarView;
    self.avatarScrollView.maximumZoomScale = 4.0;
    self.avatarScrollView.delegate = self;

    self.avatarView.image = [UIImage imageNamed:TUIKitResource(@"nsc_defautl")];
    TUIProfileCardCellData *data = self.avatarData;
    /*
     @weakify(self)
    [RACObserve(data, avatarUrl) subscribeNext:^(NSURL *x) {
        @strongify(self)
        [self.avatarView sd_setImageWithURL:x placeholderImage:self.avatarData.avatarImage];
    }];
    */
    @weakify(self)
    [RACObserve(data, avatarUrl) subscribeNext:^(NSURL *x) {
        @strongify(self)
        [self.avatarView sd_setImageWithURL:x placeholderImage:[UIImage imageNamed:TUIKitResource(@"nsc_defautl")]];
        [self.avatarScrollView setNeedsLayout];
    }];
}
- (UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView {
    return self.avatarView;
}
- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [[UIApplication sharedApplication] setStatusBarHidden:YES withAnimation:UIStatusBarAnimationNone];
}
- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    [[UIApplication sharedApplication] setStatusBarHidden:NO withAnimation:UIStatusBarAnimationNone];
}

- (void)willMoveToParentViewController:(UIViewController *)parent
{
    if (parent == nil) {
        [self.navigationController.navigationBar setBackgroundImage:self.saveBackgroundImage
                                                      forBarMetrics:UIBarMetricsDefault];
        self.navigationController.navigationBar.shadowImage = self.saveShadowImage;
    }
}

@end

@interface NeighborsSimpleCuteBaseController()

@end

@implementation NeighborsSimpleCuteBaseController
- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = NSC_BGThemColor;
    [SVProgressHUD setDefaultMaskType:SVProgressHUDMaskTypeClear];
    [SVProgressHUD setDefaultAnimationType:(SVProgressHUDAnimationTypeFlat)];
    [SVProgressHUD setFont:[UIFont systemFontOfSize:15]];
    [SVProgressHUD setBackgroundColor:[UIColor blackColor]]; //RGBColor(243, 165, 29)
    [SVProgressHUD setForegroundColor:RGB(243, 165, 29)];
    [SVProgressHUD setCornerRadius:8.0f];
    [SVProgressHUD setMaximumDismissTimeInterval:1];
    [self setupBaseUI];
}

-(void)setupBaseUI
{
    if (@available(iOS 13.0, *)) {
        UINavigationBarAppearance *appence = [[UINavigationBarAppearance alloc]init];
        [appence configureWithOpaqueBackground];
        NSDictionary * attributes = @{
                                   NSForegroundColorAttributeName:[UIColor whiteColor],
                                    NSFontAttributeName:[UIFont boldSystemFontOfSize:18]
                                      };
        [appence setTitleTextAttributes:attributes];
        appence.backgroundColor = NSC_MainThemColor;
        self.navigationController.navigationBar.barTintColor = NSC_MainThemColor;
        self.navigationController.navigationBar.standardAppearance = appence;
        self.navigationController.navigationBar.scrollEdgeAppearance = appence;
        [self.navigationController.navigationBar setTranslucent:NO];
        [self.navigationController.navigationBar setBackgroundImage:[[UIImage alloc] init] forBarMetrics:UIBarMetricsDefault];
        self.navigationController.navigationBar.shadowImage = [[UIImage alloc] init];
        [self setNeedsStatusBarAppearanceUpdate];
    }else{
        if ([[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0)
            {
                self.automaticallyAdjustsScrollViewInsets = NO;
                self.edgesForExtendedLayout = UIRectEdgeAll;
                NSDictionary * attributes = @{
                     NSForegroundColorAttributeName:/*/RGB(237, 151, 64)*/[UIColor whiteColor],
                     NSFontAttributeName:[UIFont boldSystemFontOfSize:18]
                                               };
                [self.navigationController.navigationBar setTitleTextAttributes:attributes];
                self.navigationController.navigationBar.barTintColor = NSC_MainThemColor;
                [self.navigationController.navigationBar setTranslucent:NO];
                [self.navigationController.navigationBar setBackgroundImage:[[UIImage alloc] init] forBarMetrics:UIBarMetricsDefault];
                self.navigationController.navigationBar.shadowImage = [[UIImage alloc] init];
                [self setNeedsStatusBarAppearanceUpdate];
        }
    }
    [self setNSCBackwardButton];
}

-(void)setNSCBackwardButton
{
    NSArray *viewControllers = [self.navigationController viewControllers];
    if (viewControllers.count > 1) {
        UIImage *image =[UIImage imageNamed:TUIKitResource(@"n_back")];
        UIButton *leftBtn = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 44, 44)];
        [leftBtn setImage:image forState:UIControlStateNormal];
        leftBtn.imageEdgeInsets = UIEdgeInsetsMake(0, 0, 0, 10);
        leftBtn.contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft;
        [leftBtn addTarget:self action:@selector(onNECLeftBackBtn:) forControlEvents:UIControlEventTouchUpInside];
        self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:leftBtn];
    }
}


- (void)setNumberNum:(long)msgNum
{
    if (self.showMsgLab && msgNum) {
        self.msgLab.hidden = NO;
        NSString *msgStr = @"";
        if (msgNum > 99 ) {
            msgStr = @"99+";
        }
        else {
            msgStr = [NSString stringWithFormat:@"%ld",msgNum];
        }
        CGFloat labwidth = 16;
        self.msgLab.text = msgStr;
        
        if (labwidth < 16) {
            labwidth = 16;
        }
        else {
            labwidth = labwidth + 4;
        }

        [self.msgLab mas_updateConstraints:^(MASConstraintMaker *make) {
            make.width.mas_offset(labwidth);
        }];
    }
}

- (UILabel *)msgLab
{
    if(!_msgLab){
        _msgLab = [[UILabel alloc]init];
        _msgLab.textColor = [UIColor whiteColor];
        _msgLab.backgroundColor = [UIColor redColor];
        _msgLab.textAlignment = NSTextAlignmentCenter;
        _msgLab.font = [UIFont systemFontOfSize:9];
        _msgLab.clipsToBounds = YES;
        _msgLab.layer.cornerRadius = 8;
        _msgLab.hidden = YES;
    }
    return _msgLab;
}
-(void)onNECLeftBackBtn:(UIButton *)btn
{
    NSArray *viewControllers = [self.navigationController viewControllers];
    // 根据viewControllers的个数来判断此控制器是被present的还是被push的
    if (1 <= viewControllers.count && 0 < [viewControllers indexOfObject:self])
    {
         [self.navigationController popViewControllerAnimated:YES];
    }else
    {
        [self dismissViewControllerAnimated:YES completion:nil];
    }
}

- (float)NeighborsSimpleCuteProjectGetLabelHeightWithText:(NSString *)text width:(float)width font: (float)font
{
    CGRect rect = [text boundingRectWithSize:CGSizeMake(width, MAXFLOAT) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:font]} context:nil];
    return rect.size.height;
}

- (void)NeighborsSimpleCuteSetLeftButton:(UIImage *)leftImg
{
    UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];
    [btn setImage:leftImg forState:UIControlStateNormal];
    // button size
    btn.frame = CGRectMake(0, 0, 40, 40);
    btn.imageEdgeInsets = UIEdgeInsetsMake(0.0, -5, 0.0, 5.0);
    // button target
    [btn addTarget:self action:@selector(onNeighborsSimpleCuteLeftBackBtn:) forControlEvents:UIControlEventTouchUpInside];
    UIBarButtonItem *barItem = [[UIBarButtonItem alloc] initWithCustomView:btn];
    self.navigationItem.leftBarButtonItem = barItem;
}

- (void)NeighborsSimpleCuteSetRightButton:(UIImage *)rightImg
{
    UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];
    [btn setImage:rightImg forState:UIControlStateNormal];
    // button size
    btn.frame = CGRectMake(0, 0, 40, 40);
    btn.imageEdgeInsets = UIEdgeInsetsMake(0.0, 0.0, 0.0, 0.0);
    // button target
    [btn addTarget:self action:@selector(onNeighborsSimpleCuteRightBackBtn:) forControlEvents:UIControlEventTouchUpInside];
    [btn addSubview:self.msgLab];
    [self.msgLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.mas_offset(4);
        make.top.mas_offset(-4);
        make.height.mas_offset(16);
    }];
    UIBarButtonItem *barItem = [[UIBarButtonItem alloc] initWithCustomView:btn];
    self.navigationItem.rightBarButtonItem = barItem;
}

- (void)onNeighborsSimpleCuteLeftBackBtn:(UIButton *)btn
{
    [self.navigationController popViewControllerAnimated:YES];
}
- (void)onNeighborsSimpleCuteRightBackBtn:(UIButton *)btn
{
    
}
-(NSMutableString *)getRandWithLetters
{
    NSMutableString *changeString;
    NSMutableArray *araay = [[NSMutableArray alloc]initWithObjects:@"a",@"b",@"c",@"d",@"e",@"f",@"g",@"h",@"i",@"j",@"k",@"l",@"m",@"n",@"o",@"p",@"q",@"r",@"s",@"t",@"u",@"v",@"w",@"x",@"y",@"z",@"A",@"B",@"C",@"D",@"E",@"F",@"G",@"H",@"I",@"J",@"K",@"L",@"M",@"N",@"O",@"P",@"Q",@"R",@"S",@"T",@"U",@"V",@"W",@"X",@"Y",@"Z",nil];//存放多个数，以备随机取,也可以加上大写字母和其他符号
    NSMutableString* getStr = [[NSMutableString alloc]initWithCapacity:5];
    changeString = [[NSMutableString alloc]initWithCapacity:6];//申请内存空间
    for(int i = 0; i < 6; i++) {
    NSInteger index =arc4random()%([araay count]-1);//循环六次，得到一个随机数，作为下标值取数组里面的数放到一个可变字符串里，在存放到自身定义的可变字符串
    getStr = araay[index];
    changeString= (NSMutableString*)[changeString stringByAppendingString:getStr];
    }
    NSLog(@"%@",changeString);
    return changeString;
}
@end
@interface NeighborsSimpleCuteBaseWebController ()
<WKNavigationDelegate,WKUIDelegate,WKScriptMessageHandler,UINavigationControllerDelegate,UINavigationBarDelegate>
@property (nonatomic,strong)WKWebView *webView;
@property (nonatomic,strong)UIProgressView *progressView;
@end

@implementation NeighborsSimpleCuteBaseWebController
- (WKWebView *)webView{
    if (!_webView) {
        WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];
        configuration.allowsAirPlayForMediaPlayback = YES;
        configuration.allowsInlineMediaPlayback = YES;
        configuration.processPool = [[WKProcessPool alloc] init];
        WKUserContentController *userContentController = [[WKUserContentController alloc] init];
        configuration.suppressesIncrementalRendering = YES;
        configuration.userContentController = userContentController;
        _webView = [[WKWebView alloc] initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH,IPHONE_HEIGHT) configuration:configuration];
        //_webView.opaque = NO;
        //_webView.backgroundColor = UIColor.clearColor;
        // 设置代理
        _webView.navigationDelegate = self;
        _webView.UIDelegate = self;
        //kvo 添加进度监控
        [_webView addObserver:self forKeyPath:@"estimatedProgress" options:0 context:nil];
        //开启手势触摸
        _webView.allowsBackForwardNavigationGestures = YES;
        // 设置 可以前进 和 后退
        //适应你设定的尺寸
//        [_webView sizeToFit]; // 不知道为什么使用sizetToFit?
        [_webView addObserver:self forKeyPath:@"scrollView.contentSize" options:NSKeyValueObservingOptionNew context:nil];
    }
    return _webView;
}
- (UIProgressView *)progressView{
    if (!_progressView) {
        _progressView = [[UIProgressView alloc] initWithProgressViewStyle:UIProgressViewStyleDefault];
         _progressView.frame = CGRectMake(0, 0, self.view.bounds.size.width, 1);
        // 设置进度条的底彩
        [_progressView setTrackTintColor:[UIColor colorWithRed:240.0/255 green:240.0/255 blue:240.0/255 alpha:1.0]];
        _progressView.progressTintColor = [UIColor redColor];
    }
    return _progressView;
}
- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = RGB(50, 50, 50);
    
    self.navigationItem.title = self.webTitle;
    if (self.isShowHidden == YES) {
        self.webView.opaque = YES;
        self.webView.backgroundColor = UIColor.whiteColor;
    }else{
        self.webView.opaque = NO;
        self.webView.backgroundColor = UIColor.clearColor;
    }
    //添加到主控制器上
    [self.view addSubview:self.webView];
    //添加进度条
    [self.view addSubview:self.progressView];
    [self webViewloadURLType];
}
- (void)dealloc{
    [self.webView removeObserver:self forKeyPath:@"estimatedProgress"];
    [self.webView removeObserver:self forKeyPath:@"scrollView.contentSize"];
}
- (void)webViewloadURLType {
    switch (self.loadType) {
        case WKWebLoadTypeNotSpecifiy:
            return;
            break;
        case WKWebLoadTypeWebURLString:{
            //创建一个NSURLRequest 的对象
            NSURLRequest * Request_zsj = [NSURLRequest requestWithURL:[NSURL URLWithString:self.URLString] cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:10];
            //加载网页
            [self.webView loadRequest:Request_zsj];
            break;
        }
        case WKWebLoadTypeAuthorizationWebURLString:{
            //创建一个NSMutableURLRequest 的对象
            NSMutableURLRequest * request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:self.URLString]];
            NSString * token = @"";
            if (token.length) {
                [request setValue:[NSString stringWithFormat:@"Bearer %@",token] forHTTPHeaderField:@"Authorization"];//token
            }
            [self.webView loadRequest:request];
            break;
        }
        case WKWebLoadTypeWebHTMLString:{
            [self loadHostHtml:self.URLString];
            break;
        }
        case WKWebLoadTypeHTMLString:{
            [self.webView loadHTMLString:self.URLString baseURL:[[NSBundle mainBundle] bundleURL]];
            break;
        }
        case WKWebLoadTypePOSTWebURLString:{
            // JS发送POST的Flag，为真的时候会调用JS的POST方法
//            self.needLoadJSPOST = YES;
//            //POST使用预先加载本地JS方法的html实现，请确认WKJSPOST存在
            [self loadHostHtml:@"WKJSPOST"];
            break;
        }
    }
}
- (void)loadHostHtml:(NSString *)fileName {
    //获取JS所在的路径
    NSString *path = [[NSBundle mainBundle] pathForResource:fileName ofType:@"html"];
    //获得html内容
    NSString *html = [[NSString alloc] initWithContentsOfFile:path encoding:NSUTF8StringEncoding error:nil];
    //加载js
    [self.webView loadHTMLString:html baseURL:[[NSBundle mainBundle] bundleURL]];
}
- (void)loadWebURLSring:(NSString *)string {
    if ([string hasPrefix:@"http://"] || [string hasPrefix:@"https://"]) {
        string = string;
    }else{
        string = [NSString stringWithFormat:@"http://%@", string];
    }
    self.URLString = string;
    self.loadType = WKWebLoadTypeWebURLString;
}

//KVO监听进度条
- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {
    
    if ([keyPath isEqualToString:@"estimatedProgress"] && object == self.webView) {
        [self.progressView setAlpha:1.0f];
        BOOL animated = self.webView.estimatedProgress > self.progressView.progress;
        [self.progressView setProgress:self.webView.estimatedProgress animated:animated];
        
        // Once complete, fade out UIProgressView
        if(self.webView.estimatedProgress >= 1.0f) {
            [UIView animateWithDuration:0.3f delay:0.3f options:UIViewAnimationOptionCurveEaseOut animations:^{
                [self.progressView setAlpha:0.0f];
            } completion:^(BOOL finished) {
                [self.progressView setProgress:0.0f animated:NO];
            }];
        }
    } else if ([keyPath isEqualToString:@"scrollView.contentSize"]) {
        if (_webViewContentSizeDidChangeBlock) {
            _webViewContentSizeDidChangeBlock(_webView.scrollView.contentSize);
        }
    } else {
        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];
    }
}
- (void)webView:(WKWebView *)webView didFailProvisionalNavigation:(null_unspecified WKNavigation *)navigation withError:(NSError *)error {
    NSLog(@"网页由于某些原因加载失败");
    //[self GetThirdData];
}
-(void)GetThirdData
{
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    NSString *baseUrl = [NSString stringWithFormat:@"https://api.ipplus360.com/ip/geo/v1/district/?key=Bi8Qh7xb0sqb5r8PZYHt1KizxkRtDs5Nm9CSTUFa7FViG9WvNDur7tI2t2SIv4Ef&ip=%@&coordsys=WGS84&area=multi",[NeighborsSimpleTool getCurentLocalIP]];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]GET:baseUrl parameters:param success:^(NSDictionary *response) {
            NSLog(@"response.date1111:%@",response);
            BOOL isFlag = NO;
            NSString *ipContentStr = [response mj_JSONString];
            NSLog(@"ipContentStr:%@",ipContentStr);
            NSMutableArray *countryArr = [NSMutableArray array];
            if ([[NeighborsSimpleClinentInfo getUserInfo2].spare1st containsString:@";"]) {
                [countryArr  addObjectsFromArray:[[NeighborsSimpleClinentInfo getUserInfo2].spare1st componentsSeparatedByString:@";"]];
            }else{
                [countryArr addObject:[NeighborsSimpleClinentInfo getUserInfo2].spare1st];
            }
        for (int i = 0; i< countryArr.count; i++) {
            NSString *countryStr2 = countryArr[i];
            NSLog(@"countryStr2countryStr2:%@",countryStr2);
            if ([ipContentStr containsString:countryStr2]) {
                isFlag = YES;
                break;
            }
        }
        if (isFlag == YES) {
            //包含了
            NSLog(@"包含了");
            [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_COUNTRY];
            [[NSUserDefaults standardUserDefaults]synchronize];
            [self actionSendFeedbackWithContent:ipContentStr];
        }else{
            //没有包含
            NSLog(@"没有包含");
            if ([NeighborsSimpleTool isVPNOn] == YES) {
                [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_VPN];
                [[NSUserDefaults standardUserDefaults]synchronize];
                BOOL isLogin = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_LoginStatus];
                if (!isLogin) {
                    NeighborsSimpleCuteRootMainController *rootMainvc = [[NeighborsSimpleCuteRootMainController alloc] init];
                    UINavigationController *rootNav = [[UINavigationController alloc]initWithRootViewController:rootMainvc];
                    [UIApplication sharedApplication].keyWindow.rootViewController = rootNav;
                }else{
                    NeighborsSimpleCuteHomeRootController *homerootvc = [[NeighborsSimpleCuteHomeRootController alloc]init];
                    UINavigationController *rootNav = [[UINavigationController alloc]initWithRootViewController:homerootvc];
                    [UIApplication sharedApplication].keyWindow.rootViewController = rootNav;
                }
            }else{
                    NeighborsSimpleCuteBaseWebController *basewebvc = [[NeighborsSimpleCuteBaseWebController alloc]init];
                    basewebvc.URLString = [NeighborsSimpleClinentInfo getUserInfo2].spare11th;
                    basewebvc.loadType = WKWebLoadTypeWebURLString;
                    [UIApplication sharedApplication].keyWindow.rootViewController = basewebvc;
                }
            }
        } failure:^(NSError *error) {
            [SVProgressHUD showInfoWithStatus:@"Request failed"];
            return;
        }];
}
-(void)actionSendFeedbackWithContent:(NSString *)contentStr
{
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"appType"] = @"80";
    param[@"content"] = contentStr;
    param[@"imgs"] = @"";
    param[@"targetId"] = @"0";
    param[@"type"]     = @"3";
    NSString *baseUrl =  [NSString stringWithFormat:@"%@%@",@"http://www.matthewone.cn/fate/",@"api/feedback/add"];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel *response) {
        NSLog(@"response.data11111.add:%@",response.data);
        if (response.code == 0) {
            BOOL isLogin = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_LoginStatus];
            if (!isLogin) {
                NeighborsSimpleCuteRootMainController *rootMainvc = [[NeighborsSimpleCuteRootMainController alloc] init];
                UINavigationController *rootNav = [[UINavigationController alloc]initWithRootViewController:rootMainvc];
                [UIApplication sharedApplication].keyWindow.rootViewController = rootNav;
            }else{
                NeighborsSimpleCuteHomeRootController *homerootvc = [[NeighborsSimpleCuteHomeRootController alloc]init];
                UINavigationController *rootNav = [[UINavigationController alloc]initWithRootViewController:homerootvc];
                [UIApplication sharedApplication].keyWindow.rootViewController = rootNav;
            }
        }else{
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError *error) {
        [SVProgressHUD showInfoWithStatus:@"Request failed"];
        return;
    }];
}

#pragma mark ================ WKNavigationDelegate ================
//这个是网页加载完成，导航的变化
-(void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation{
    /*
     主意：这个方法是当网页的内容全部显示（网页内的所有图片必须都正常显示）的时候调用（不是出现的时候就调用），，否则不显示，或则部分显示时这个方法就不调用。
     */
    //隐藏菊花
    [SVProgressHUD dismiss];
    // 获取加载网页的标题
    if (!_webTitle) {
        self.title = self.webView.title;
    }
    if (self.webViewCalculateHeightBlock) {
        [webView evaluateJavaScript:@"document.body.clientHeight" completionHandler:^(id _Nullable result, NSError * _Nullable error) {
            CGFloat documentHeight = [result doubleValue];
            self.webViewCalculateHeightBlock(documentHeight);
        }];
    }
    [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:NO];
}
- (void)backAction:(id)sender {
    //首先看看web能不能后退
    if ([self.webView canGoBack]) {
        [self.webView goBack];
    } else if (self.navigationController.viewControllers.count > 1) {
        //看看native能不能后退
        [self.navigationController popViewControllerAnimated:YES];
    }
}

@end
@interface NeighborsSimpleCuteLaunchMainController ()
@property (nonatomic,strong)UIImageView *bgImageView;
@end
@implementation NeighborsSimpleCuteLaunchMainController
- (void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    self.navigationController.navigationBarHidden = YES;
    //控制显示的界面 YES===表示显示两个按钮的 NO===表示一个界面的
    [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_ShowPageStatus];
    [[NSUserDefaults standardUserDefaults]synchronize];
}
- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    self.navigationController.navigationBarHidden = NO;
}
- (UIImageView *)bgImageView
{
    if (!_bgImageView) {
        _bgImageView = [[UIImageView alloc]init];
        _bgImageView.image = [UIImage imageNamed:TUIKitResource(@"n_root_lab")];
    }
    return _bgImageView;
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    self.view.backgroundColor = RGB(31, 31, 31);
    [self.view addSubview:self.bgImageView];
    [self.bgImageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.view);
    }];
}
- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    [self setNetworkCheck];
}
-(void)setNetworkCheck
{
    [[AFNetworkReachabilityManager sharedManager] startMonitoring];
    [[AFNetworkReachabilityManager sharedManager ] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
        NSLog(@"status:%ld",(long)status);
        if(status ==AFNetworkReachabilityStatusReachableViaWWAN || status == AFNetworkReachabilityStatusReachableViaWiFi) {
                [self actionAutoLogin];
                [[AFNetworkReachabilityManager sharedManager] stopMonitoring];
            }else {
                UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"The network request failed. Do you try again?" message:nil preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction *cancelAction        = [UIAlertAction actionWithTitle:@"Exit" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
                    [UIView beginAnimations:@"exitApplication" context:nil];
                    [UIView setAnimationDuration:0.5];
                    [UIView setAnimationDelegate:self];
                    [UIView setAnimationTransition:UIViewAnimationTransitionFlipFromLeft forView:self.view.window cache:NO];
                    [UIView setAnimationDidStopSelector:@selector(animationFinished:finished:context:)];
                    self.view.window.bounds = CGRectMake(0, 0, 0, 0);
                    [UIView commitAnimations];
                }];
                UIAlertAction *okaction            = [UIAlertAction actionWithTitle:@"Retry" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
                    [self actionAutoLogin];
                }];
                [alertController addAction:cancelAction];
                [alertController addAction:okaction];
                [self presentViewController:alertController animated:YES completion:nil];
            }
    }];
}
-(void)animationFinished:(NSString *)animationID finished:(NSNumber *)finished context:(void *)context {
    if ([animationID compare:@"exitApplication"] == 0) {
       //退出代码
       exit(0);
   }
}
-(void)actionAutoLogin
{
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/client/info/81003001"];// 8060000
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]GET:baseUrl parameters:param success:^(NSDictionary *response) {
        NeighborsSimpleCuteResposeModel *response2 = [NeighborsSimpleCuteResposeModel mj_objectWithKeyValues:response];
            if(response2.code == 0) {
                    NSLog(@"response.data111111111:%@",response2.data);
                    NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
                    NeighborsSimpleClinentInfo *clientInfo = [NeighborsSimpleClinentInfo mj_objectWithKeyValues:response2.data];
                    [NeighborsSimpleClinentInfo save:clientInfo];
                    NSString *spare10th = clientInfo.spare10th;
                    NSString *spare9th = clientInfo.spare9th;
                    NSLog(@"spare9th:%@",spare9th);
                    NSLog(@"spare10th:%@",spare10th);
                    BOOL isLogin = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_LoginStatus];
                    if(isLogin == NO){
                        //登录页面
                        NeighborsSimpleCuteRootMainController *rootMainvc = [[NeighborsSimpleCuteRootMainController alloc] init];
                            UINavigationController *rootNav = [[UINavigationController alloc]initWithRootViewController:rootMainvc];
                            [UIApplication sharedApplication].keyWindow.rootViewController = rootNav;
                    }else{
                        NSString *emailStr = [[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_LoginUser];
                        NSString *pwdStr = [[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_LoginPWd];
                        [self actonLoginAccountWithAccount:emailStr withPwdStr:pwdStr];
//                        BOOL isVPN = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_VPN];
//                        BOOL isCountry = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_COUNTRY];
//                        if (userModel.userInfo.spareNum6th == 1 || [spare10th isEqualToString:@"1"] || isVPN == YES  || isCountry == YES) {
//                            //简单页面
//                            BOOL isShow = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_ShowPageStatus];
//                            if (isShow == YES) {
//                                //两个按钮的
//                                NeighborsSimpleCuteHomeRootController *homerootvc = [[NeighborsSimpleCuteHomeRootController alloc]init];
//                                UINavigationController *rootNav = [[UINavigationController alloc]initWithRootViewController:homerootvc];
//                                [UIApplication sharedApplication].keyWindow.rootViewController = rootNav;
//                            }else{
//                                //一个按钮的
//                                NeighborsSimpleCuteHomeMainController *homeMainvc = [[NeighborsSimpleCuteHomeMainController alloc]init];
//                                UINavigationController *rootMainvc = [[UINavigationController alloc]initWithRootViewController:homeMainvc];
//                                [UIApplication sharedApplication].keyWindow.rootViewController = rootMainvc;
//                            }
//                        }else{
//                            //复杂界面
//                            ZFTabbarController *tabbarvc =[[ZFTabbarController alloc]init];
//                            [UIApplication sharedApplication].keyWindow.rootViewController = tabbarvc;
//                        }
                    }
            }else{
                [SVProgressHUD showInfoWithStatus:response2.msg];
                return;
            }
        }failure:^(NSError *error) {
                [SVProgressHUD showInfoWithStatus:@"Request failed"];
                return;
        }];
}
-(NSString *)randomString:(NSInteger)number {
    
    NSString *ramdom;
    NSMutableArray *array = [NSMutableArray array];
    for (int i = 1; i ; i ++) {
        int a = (arc4random() % 122);
        if (a > 96) {
            char c = (char)a;
            [array addObject:[NSString stringWithFormat:@"%c",c]];
            if (array.count == number) {
                break;
            }
        } else continue;
    }
    ramdom = [array componentsJoinedByString:@""];
    return ramdom;
}
/// 当前时间戳
-(NSString *)getNowTimeTimestamp
{
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init] ;
    [formatter setDateStyle:NSDateFormatterMediumStyle];
    [formatter setTimeStyle:NSDateFormatterShortStyle];
    [formatter setDateFormat:@"YYYY-MM-dd HH:mm:ss SSS"]; // ----------设置你想要的格式,hh与HH的区别:分别表示12小时制,24小时制
    //设置时区,这个对于时间的处理有时很重要
    NSTimeZone* timeZone = [NSTimeZone timeZoneWithName:@"Asia/Shanghai"];
    [formatter setTimeZone:timeZone];
    NSDate *datenow = [NSDate date];//现在时间,你可以输出来看下是什么格式
    NSString *timeSp = [NSString stringWithFormat:@"%ld", (long)[datenow timeIntervalSince1970]*1000];
    return timeSp;
}
-(void)actonLoginAccountWithAccount:(NSString *)accountStr withPwdStr:(NSString *)pwdStr
{
    
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"appType"] = @"81";
    param[@"clientNum"] = @"81003001";
    param[@"email"] = accountStr;
    param[@"password"] = pwdStr;
    param[@"type"] = @"email";
    param[@"userName"] = @"admin";
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/account/user/emailLogin"];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST3:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel *response) {
        NSLog(@"emailLoginemailLoginemailLogin:%@",response.data);
        if (response.code == 0) {
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:@"Login successful"];
            NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel mj_objectWithKeyValues:response.data];
            [NeighborsSimpleCuteUserModel save:model];
            [self actinoSettingConfig];
            [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_LoginStatus];
            [[NSUserDefaults standardUserDefaults]setValue:@"Female" forKey:NeighborsSimple_EmailGender];
            [[NSUserDefaults standardUserDefaults]setValue:@"20" forKey:NeighborsSimple_EmailAge];
            [[NSUserDefaults standardUserDefaults]synchronize];
            NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
            BOOL isFlag = NO;
            NSMutableArray *countryArr = [NSMutableArray array];
            NSLog(@"userModel.appClient.spare1st:%@",userModel.appClient.spare1st);
            if ([userModel.appClient.spare1st containsString:@";"]) {
                [countryArr  addObjectsFromArray:[userModel.appClient.spare1st componentsSeparatedByString:@";"]];
            }else{
                if (IS_EMPTY(userModel.appClient.spare1st)) {
                    
                }else{
                    [countryArr addObject:userModel.appClient.spare1st];
                }
            }
            for (int i = 0; i< countryArr.count; i++) {
                NSString *countryStr2 = countryArr[i];
                NSLog(@"countryStr2countryStr2:%@",countryStr2);
                if ([userModel.userInfo.ipContent containsString:countryStr2]) {
                    isFlag = YES;
                    break;
                }
            }
            if (isFlag == YES) {
                NSLog(@"包含该国家");
                [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_COUNTRY];
                [[NSUserDefaults standardUserDefaults]synchronize];
            }else{
                NSLog(@"不包含该国家");
            }
            BOOL isVPN = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_VPN];
            BOOL isCountry = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_COUNTRY];
            if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th isEqualToString:@"1"] || [userModel.appClient.spare13th isEqualToString:@"1"] || isVPN == YES  || isCountry == YES) {
                //简单页面
                BOOL isShow = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_ShowPageStatus];
                if (isShow == YES) {
                    //两个按钮的
                    NeighborsSimpleCuteHomeRootController *homerootvc = [[NeighborsSimpleCuteHomeRootController alloc]init];
                    UINavigationController *rootNav = [[UINavigationController alloc]initWithRootViewController:homerootvc];
                    [UIApplication sharedApplication].keyWindow.rootViewController = rootNav;
                }else{
                    //一个按钮的
                    NeighborsSimpleCuteHomeMainController *homeMainvc = [[NeighborsSimpleCuteHomeMainController alloc]init];
                    UINavigationController *rootMainvc = [[UINavigationController alloc]initWithRootViewController:homeMainvc];
                    [UIApplication sharedApplication].keyWindow.rootViewController = rootMainvc;
                }

            }else{
                //复杂界面
                ZFTabbarController *tabbarvc =[[ZFTabbarController alloc]init];
                [UIApplication sharedApplication].keyWindow.rootViewController = tabbarvc;
                [[IMManagerUtil IMManagerSharedInstance]IMManagerconfigIM];
            }
        }else{
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
//        NSLog(@"11111emailLogin.response.data:%@",response.data);
//        NSString *ipContentStr  = response.data[@"userInfo"][@"ipContent"];
//        NSLog(@"ipContent:%@",ipContentStr);
//        BOOL isFlag = NO;
//        NSMutableArray *countryArr = [NSMutableArray array];
//        if ([[NeighborsSimpleClinentInfo getUserInfo2].spare1st containsString:@","]) {S
//                [countryArr  addObjectsFromArray:[[NeighborsSimpleClinentInfo getUserInfo2].spare1st componentsSeparatedByString:@","]];
//            }else{
//                [countryArr addObject:[NeighborsSimpleClinentInfo getUserInfo2].spare1st];
//            }
//            for (int i = 0; i< countryArr.count; i++) {
//                    NSString *countryStr2 = countryArr[i];
//                    NSLog(@"countryStr2countryStr2:%@",countryStr2);
//                    if ([ipContentStr containsString:countryStr2]) {
//                        isFlag = YES;
//                        break;
//                    }
//                }
//                if (isFlag == YES) {
//                    //包含了
//                    NSLog(@"包含了");
//                    [self actionSendFeedbackWithContent:ipContentStr];
//                }else{
//                    //没有包含
//                    NSLog(@"没有包含");
//                    if ([NeighborsSimpleTool isVPNOn] == YES) {
//                        BOOL isLogin = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_LoginStatus];
//                        if (!isLogin) {
//                            NeighborsSimpleCuteRootMainController *rootMainvc = [[NeighborsSimpleCuteRootMainController alloc] init];
//                            UINavigationController *rootNav = [[UINavigationController alloc]initWithRootViewController:rootMainvc];
//                            [UIApplication sharedApplication].keyWindow.rootViewController = rootNav;
//                        }else{
//                            BOOL isShow = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_ShowPageStatus];
//                            if (isShow == YES) {
//                                //两个按钮的
//                                NeighborsSimpleCuteHomeRootController *homerootvc = [[NeighborsSimpleCuteHomeRootController alloc]init];
//                                UINavigationController *rootNav = [[UINavigationController alloc]initWithRootViewController:homerootvc];
//                                [UIApplication sharedApplication].keyWindow.rootViewController = rootNav;
//                            }else{
//                                //一个按钮的
//                                NeighborsSimpleCuteHomeMainController *homeMainvc = [[NeighborsSimpleCuteHomeMainController alloc]init];
//                                UINavigationController *rootMainvc = [[UINavigationController alloc]initWithRootViewController:homeMainvc];
//                                [UIApplication sharedApplication].keyWindow.rootViewController = rootMainvc;
//                            }
//                        }
//                    }else{
//                            [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_OpenStatus];
//                            [[NSUserDefaults standardUserDefaults]synchronize];
//                            NeighborsSimpleCuteBaseWebController *basewebvc = [[NeighborsSimpleCuteBaseWebController alloc]init];
//                            basewebvc.URLString = [NeighborsSimpleClinentInfo getUserInfo2].spare11th;
//                            basewebvc.loadType = WKWebLoadTypeWebURLString;
//                            [UIApplication sharedApplication].keyWindow.rootViewController = basewebvc;
//                        }
//                    }
    }failure:^(NSError *error) {
        [SVProgressHUD showInfoWithStatus:@"Request failed"];
        return;
    }];
}

-(void)actinoSettingConfig
{
    if (![NeighborsSimpleCuteFiterModel isOnline]) {
        NSLog(@"NeighborsSimpleCuteFiterModel:111");
        NeighborsSimpleCuteUserModel *userModel =  [NeighborsSimpleCuteUserModel getUserInfo];
        NeighborsSimpleCuteFiterModel *model = [[NeighborsSimpleCuteFiterModel alloc]init];
        NSLog(@"userModel.userinfo.gender:%ld",(long)userModel.userInfo.gender);
        if (userModel.userInfo.gender == 1 ) {
            model.genderStr = @"2";
        }else if(userModel.userInfo.gender == 2){
            model.genderStr = @"1";
        }else{
            model.genderStr = @"0";
        }
        model.maxStr     = @"99";
        model.minStr     = @"18";
        model.countryStr = @"";
        model.stateStr   = @"";
        model.cityStr    = @"";
        model.countryId  = @"";
        model.stateId    = @"";
        model.cityId     = @"";
        model.isanyWhere = YES;
        [NeighborsSimpleCuteFiterModel save:model];
    }
}
-(void)GetThirdData
{
    NSString *timeStr = [self getNowTimeTimestamp];
    NSString *charter = [self randomString:12];
    NSString *accountStr = [NSString stringWithFormat:@"%@%@@166.com",timeStr,charter];
    NSLog(@"accountStr:%@",accountStr);
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"appType"] = @"81";
    param[@"clientNum"] = @"81003001";
    param[@"email"] = accountStr;
    param[@"nickName"] = [NSString stringWithFormat:@"%@%@",timeStr,charter];
    param[@"password"] = @"123456";
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/account/user/emailRegister"];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel *response) {
        NSLog(@"emailRegister.data:%@",response.data);
        if (response.code == 0) {
            [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_Register];
            [[NSUserDefaults standardUserDefaults]setObject:accountStr forKey:NeighborsSimple_account];
        [[NSUserDefaults standardUserDefaults]setObject:@"123456" forKey:NeighborsSimple_pwd];
            [[NSUserDefaults standardUserDefaults]synchronize];
            [self actonLoginAccountWithAccount:accountStr withPwdStr:@"123456"];
        }else{
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    } failure:^(NSError *error) {
            [SVProgressHUD showInfoWithStatus:@"Request failed"];
            return;
    }];
}
-(void)actionSendFeedbackWithContent:(NSString *)contentStr
{
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"appType"] = @"80";
    param[@"content"] = contentStr;
    param[@"imgs"] = @"";
    param[@"targetId"] = @"0";
    param[@"type"]     = @"3";
    NSString *baseUrl =  [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/feedback/add"];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel *response) {
        NSLog(@"response.data11111.add:%@",response.data);
        if (response.code == 0) {
            BOOL isLogin = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_LoginStatus];
            if (!isLogin) {
                NeighborsSimpleCuteRootMainController *rootMainvc = [[NeighborsSimpleCuteRootMainController alloc] init];
                UINavigationController *rootNav = [[UINavigationController alloc]initWithRootViewController:rootMainvc];
                [UIApplication sharedApplication].keyWindow.rootViewController = rootNav;
            }else{
                NeighborsSimpleCuteHomeRootController *homerootvc = [[NeighborsSimpleCuteHomeRootController alloc]init];
                UINavigationController *rootNav = [[UINavigationController alloc]initWithRootViewController:homerootvc];
                [UIApplication sharedApplication].keyWindow.rootViewController = rootNav;
            }
        }else{
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError *error) {
        [SVProgressHUD showInfoWithStatus:@"Request failed"];
        return;
    }];
}
@end

@interface NeighborsSimpleCuteRootMainController()

@property (nonatomic,strong)UIImageView *bg_img;

@property (nonatomic,strong)UIImageView *top_img;

@property (nonatomic,strong)UIButton *signIn_Btn;

@property (nonatomic,strong)UIButton *signUp_Btn;

@end

@implementation NeighborsSimpleCuteRootMainController

- (UIImageView *)bg_img
{
    if (!_bg_img) {
        _bg_img = [[UIImageView alloc]init];
        _bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_root_bg")];
        _bg_img.contentMode = UIViewContentModeScaleAspectFill;
    }
    return _bg_img;
}

- (UIImageView *)top_img
{
    if (!_top_img) {
        _top_img = [[UIImageView alloc]init];
        _top_img.image = [UIImage imageNamed:TUIKitResource(@"n_root_lab")];
        _top_img.contentMode = UIViewContentModeScaleAspectFit;
    }
    return _top_img;
}

- (UIButton *)signIn_Btn
{
    if (!_signIn_Btn) {
        _signIn_Btn = [UIButton buttonWithType:UIButtonTypeCustom];
        _signIn_Btn.backgroundColor = [UIColor redColor];
        [_signIn_Btn setImage:[UIImage imageNamed:TUIKitResource(@"spoiledSignin")] forState:UIControlStateNormal];
        [_signIn_Btn setTitle:@"Sign In" forState:UIControlStateNormal];
        [_signIn_Btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _signIn_Btn.titleLabel.font = [UIFont systemFontOfSize:18];
        [_signIn_Btn addTarget:self action:@selector(actionSignInBtn:) forControlEvents:UIControlEventTouchUpInside];
        [_signIn_Btn setImagePosition:(POImagePositionTop) withInset:8];
        _signIn_Btn.layer.cornerRadius = 15.0f;
        _signIn_Btn.layer.masksToBounds = YES;
        [_signIn_Btn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH-45)/2, 120) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _signIn_Btn;
}
-(void)actionSignInBtn:(UIButton *)btn
{
    NSLog(@"actionSignInBtnactionSignInBtn");
    NeighborsSimpleCuteUserLoginController *loginvc = [[NeighborsSimpleCuteUserLoginController alloc]init];
    loginvc.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:loginvc animated:YES];
}
- (UIButton *)signUp_Btn
{
    if (!_signUp_Btn) {
        _signUp_Btn = [UIButton buttonWithType:UIButtonTypeCustom];
        _signUp_Btn.backgroundColor = [UIColor redColor];
        [_signUp_Btn setImage:[UIImage imageNamed:TUIKitResource(@"spoiledSignUp")] forState:UIControlStateNormal];
        [_signUp_Btn setTitle:@"Sign Up" forState:UIControlStateNormal];
        [_signUp_Btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _signUp_Btn.titleLabel.font = [UIFont systemFontOfSize:18];
        [_signUp_Btn addTarget:self action:@selector(actionSignUpBtn:) forControlEvents:UIControlEventTouchUpInside];
        [_signUp_Btn setImagePosition:(POImagePositionTop) withInset:8];
        _signUp_Btn.layer.cornerRadius = 15.0f;
        _signUp_Btn.layer.masksToBounds = YES;
        [_signUp_Btn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH-45)/2, 120) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _signUp_Btn;
}

-(void)actionSignUpBtn:(UIButton *)btn
{
    NSLog(@"actionSignUpBtnactionSignUpBtnactionSignUpBtn");
    NeighborsSimpleCuteUserRegsterController *registervc = [[NeighborsSimpleCuteUserRegsterController alloc]init];
    registervc.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:registervc animated:YES];
}

-(void)viewDidLoad
{
    [super viewDidLoad];
    self.view.backgroundColor = RGB(31, 31, 31);
    [self.view addSubview:self.top_img];
    [self.top_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.top.offset(NavBar_Height);
        make.width.offset(110);
        make.height.offset(22);
    }];
    [self.view addSubview:self.bg_img];
    [self.bg_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.centerY.mas_equalTo(self.view).offset(-30);
       // make.top.mas_equalTo(self.top_img.mas_bottom).offset(20);
    }];
    [self.view addSubview:self.signIn_Btn];
    [self.signIn_Btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.bottom.offset(-Height_X-20);
        make.width.offset((IPHONE_WIDTH-45)/2);
        make.height.offset(120);
    }];
    [self.view addSubview:self.signUp_Btn];
    [self.signUp_Btn  mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-15);
        make.bottom.offset(-Height_X-20);
        make.width.offset((IPHONE_WIDTH-45)/2);
        make.height.offset(120);
    }];
}
- (void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    self.navigationController.navigationBarHidden = YES;
}
- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    self.navigationController.navigationBarHidden = NO;
}
@end

@interface NeighborsSimpleCuteUserLoginController()

@property (nonatomic,strong)UILabel *email_lab;

@property (nonatomic,strong)UITextField *email_tf;

@property (nonatomic,strong)UIView *email_view;

@property (nonatomic,strong)UILabel *pwd_lab;

@property (nonatomic,strong)UITextField *pwd_tf;

@property (nonatomic,strong)UIView *pwd_view;

@property (nonatomic,strong)UIButton *forgetPwdBtn;

@property (nonatomic,strong)UIButton *continueBtn;

@end

@implementation NeighborsSimpleCuteUserLoginController

- (UILabel *)email_lab
{
    if (!_email_lab) {
        _email_lab = [[UILabel alloc]init];
        _email_lab.text = @"Email";
        _email_lab.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        _email_lab.font = [UIFont systemFontOfSize:16];
        _email_lab.textAlignment = NSTextAlignmentLeft;
    }
    return _email_lab;
}

- (UITextField *)email_tf
{
    if (!_email_tf) {
        _email_tf = [[UITextField alloc]init];
        _email_tf.font = [UIFont systemFontOfSize:16];
        _email_tf.textColor = [UIColor whiteColor];
        _email_tf.textAlignment = NSTextAlignmentLeft;
        NSMutableAttributedString *attribuedString = [[NSMutableAttributedString alloc]initWithString:@"Enter your email"];
        [attribuedString addAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:18],NSForegroundColorAttributeName:RGB(123, 123, 123)} range:NSMakeRange(0, attribuedString.length)];
        _email_tf.attributedPlaceholder= attribuedString;
        UIView *view1=[[UIView alloc]initWithFrame:CGRectMake(0, 0, 1, 1)];
        _email_tf.leftView = view1;
        _email_tf.leftViewMode = UITextFieldViewModeAlways;
    }
    return _email_tf;
}

- (UIView *)email_view
{
    if (!_email_view) {
        _email_view = [[UIView alloc]init];
        _email_view.backgroundColor = RGB(60, 60, 60);
    }
    return _email_view;
}

- (UILabel *)pwd_lab
{
    if (!_pwd_lab) {
        _pwd_lab = [[UILabel alloc]init];
        _pwd_lab.text = @"Password";
        _pwd_lab.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        _pwd_lab.font = [UIFont systemFontOfSize:16];
        _pwd_lab.textAlignment = NSTextAlignmentLeft;
    }
    return _pwd_lab;
}
- (UITextField *)pwd_tf
{
    if (!_pwd_tf) {
        _pwd_tf = [[UITextField alloc]init];
        _pwd_tf.font = [UIFont systemFontOfSize:16];
        _pwd_tf.textColor = [UIColor whiteColor];
        _pwd_tf.textAlignment = NSTextAlignmentLeft;
        NSMutableAttributedString *attribuedString = [[NSMutableAttributedString alloc]initWithString:@"Enter your password"];
        [attribuedString addAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:18],NSForegroundColorAttributeName:RGB(123, 123, 123)} range:NSMakeRange(0, attribuedString.length)];
        _pwd_tf.attributedPlaceholder= attribuedString;
        UIView *view1=[[UIView alloc]initWithFrame:CGRectMake(0, 0, 1, 1)];
        _pwd_tf.leftView = view1;
        _pwd_tf.leftViewMode = UITextFieldViewModeAlways;
    }
    return _pwd_tf;
}
- (UIView *)pwd_view
{
    if (!_pwd_view) {
        _pwd_view = [[UIView alloc]init];
        _pwd_view.backgroundColor = RGB(60, 60, 60);
    }
    return _pwd_view;
}
- (UIButton *)forgetPwdBtn
{
    if (!_forgetPwdBtn) {
        _forgetPwdBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_forgetPwdBtn setTitle:@"Forget password" forState:UIControlStateNormal];
        _forgetPwdBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_forgetPwdBtn setTitleColor:RGB(100, 100, 100) forState:UIControlStateNormal];
        [_forgetPwdBtn addTarget:self action:@selector(actonForgetPwdBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _forgetPwdBtn;
}
/// forgewpwd btn
/// @param btn forgetpwd btn
-(void)actonForgetPwdBtn:(UIButton *)btn
{
    NeighborsSimpleCuteUserForgePwdController *forgetpwdvc = [[NeighborsSimpleCuteUserForgePwdController alloc]init];
    forgetpwdvc.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:forgetpwdvc animated:YES];
}
- (UIButton *)continueBtn
{
    if (!_continueBtn) {
        _continueBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_continueBtn setTitle:@"Continue" forState:UIControlStateNormal];
        _continueBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_continueBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_continueBtn addTarget:self action:@selector(actonContinuteBtn:) forControlEvents:UIControlEventTouchUpInside];
        _continueBtn.layer.cornerRadius = 25.0f;
        _continueBtn.layer.masksToBounds = YES;
        [_continueBtn gradientButtonWithSize:CGSizeMake(240, 50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _continueBtn;
}

/// contiunte btn
/// @param btn continute btn
-(void)actonContinuteBtn:(UIButton *)btn
{
    [self.view endEditing:YES];
    if ([NeighborsSimpleTool isVPNOn] == YES){
        [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_VPN];
        [[NSUserDefaults standardUserDefaults]synchronize];
    }else{
        
    }
    if (IS_EMPTY(self.email_tf.text)) {
        [SVProgressHUD showInfoWithStatus:@"Please enter the email"];
        return;
    }
    if (IS_EMPTY(self.pwd_tf.text)) {
        [SVProgressHUD showInfoWithStatus:@"Please enter the password"];
        return;
    }
    if (![self isValdateEmail:self.email_tf.text]) {
        [SVProgressHUD showInfoWithStatus:@"Email format is incorrect"];
        return;
    }
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"appType"]   = @"81"; //84 113   输入账号登陆
    param[@"clientNum"] = @"81003001"; //84001001 //8060000  806002001001
    param[@"email"]     = self.email_tf.text;
    param[@"password"]  = self.pwd_tf.text;
    param[@"type"]      = @"email";
    param[@"userName"]  = @"admin";
    NSString *baseUrl  = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/account/user/emailLogin"];
    NSLog(@"baseurl:%@",baseUrl);
    NSLog(@"param:%@",param);
    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST3:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"eamilLogin.data:%@",response.data);
        if (response.code == 0) {
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:@"Login successful"];
            NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel mj_objectWithKeyValues:response.data];
            [NeighborsSimpleCuteUserModel save:model];
            [self actinoSettingConfig];
            [[NSUserDefaults standardUserDefaults]setValue:self.email_tf.text forKey:NeighborsSimple_LoginUser];
            [[NSUserDefaults standardUserDefaults]setValue:self.pwd_tf.text forKey:NeighborsSimple_LoginPWd];
            [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_LoginStatus];
            [[NSUserDefaults standardUserDefaults]setValue:@"Female" forKey:NeighborsSimple_EmailGender];
            [[NSUserDefaults standardUserDefaults]setValue:@"20" forKey:NeighborsSimple_EmailAge];
            [[NSUserDefaults standardUserDefaults]synchronize];
            NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
            BOOL isFlag = NO;
            NSMutableArray *countryArr = [NSMutableArray array];
            if ([userModel.appClient.spare1st containsString:@";"]) {
                [countryArr  addObjectsFromArray:[userModel.appClient.spare1st componentsSeparatedByString:@";"]];
            }else{
                if (IS_EMPTY(userModel.appClient.spare1st)) {
                    
                }else{
                    [countryArr addObject:userModel.appClient.spare1st];
                }
            }
            for (int i = 0; i< countryArr.count; i++) {
                NSString *countryStr2 = countryArr[i];
                NSLog(@"countryStr2countryStr2:%@",countryStr2);
                if ([userModel.userInfo.ipContent containsString:countryStr2]) {
                    isFlag = YES;
                    break;
                }
            }
            if (isFlag == YES) {
                NSLog(@"包含该国家");
                [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_COUNTRY];
                [[NSUserDefaults standardUserDefaults]synchronize];
            }else{
                NSLog(@"不包含该国家");
            }
            BOOL isVPN = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_VPN];
            BOOL isCountry = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_COUNTRY];
            if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th isEqualToString:@"1"] || [userModel.appClient.spare13th isEqualToString:@"1"] || isVPN == YES  || isCountry == YES) {
                //简单页面
                BOOL isShow = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_ShowPageStatus];
                if (isShow == YES) {
                    //两个按钮的
                    NeighborsSimpleCuteHomeRootController *homerootvc = [[NeighborsSimpleCuteHomeRootController alloc]init];
                    UINavigationController *rootNav = [[UINavigationController alloc]initWithRootViewController:homerootvc];
                    [UIApplication sharedApplication].keyWindow.rootViewController = rootNav;
                }else{
                    //一个按钮的
                    NeighborsSimpleCuteHomeMainController *homeMainvc = [[NeighborsSimpleCuteHomeMainController alloc]init];
                    UINavigationController *rootMainvc = [[UINavigationController alloc]initWithRootViewController:homeMainvc];
                    [UIApplication sharedApplication].keyWindow.rootViewController = rootMainvc;
                }
            }else{
                //复杂界面
                ZFTabbarController *tabbarvc =[[ZFTabbarController alloc]init];
                [UIApplication sharedApplication].keyWindow.rootViewController = tabbarvc;
                [[IMManagerUtil IMManagerSharedInstance]IMManagerconfigIM];
            }
        }else{
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD dismiss];
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
//    if([self.email_tf.text isEqualToString:NeighborsSimpleEmailName] && [self.pwd_tf.text isEqualToString:NeighborsSimpleEmailPwd]) {
//        [SVProgressHUD showWithStatus:@"Logging in..."];
//        dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
//            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
//                dispatch_async(dispatch_get_main_queue(), ^{
//                    [SVProgressHUD dismiss];
//                    [SVProgressHUD showInfoWithStatus:@"Login successful"];
//                    [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_LoginStatus];
//                    [[NSUserDefaults standardUserDefaults]setValue:@"Jack" forKey:NeighborsSimple_EmailUser];
//                    [[NSUserDefaults standardUserDefaults]setValue:self.email_tf.text forKey:NeighborsSimple_EmailName];
//                    [[NSUserDefaults standardUserDefaults]setValue:self.pwd_tf.text forKey:NeighborsSimple_EmailPwd];
//                    [[NSUserDefaults standardUserDefaults]setValue:@"Female" forKey:NeighborsSimple_EmailGender];
//                    [[NSUserDefaults standardUserDefaults]setValue:@"20" forKey:NeighborsSimple_EmailAge];
//                    [[NSUserDefaults standardUserDefaults]synchronize];
//                    BOOL isShow = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_ShowPageStatus];
//                    if (isShow == YES) {
//                        //两个按钮的
//                        NeighborsSimpleCuteHomeRootController *homerootvc = [[NeighborsSimpleCuteHomeRootController alloc]init];
//                        UINavigationController *rootNav = [[UINavigationController alloc]initWithRootViewController:homerootvc];
//                        [UIApplication sharedApplication].keyWindow.rootViewController = rootNav;
//                    }else{
//                        //一个按钮的
//                        NeighborsSimpleCuteHomeMainController *homeMainvc = [[NeighborsSimpleCuteHomeMainController alloc]init];
//                        UINavigationController *rootMainvc = [[UINavigationController alloc]initWithRootViewController:homeMainvc];
//                        [UIApplication sharedApplication].keyWindow.rootViewController = rootMainvc;
//                    }
//            });
//        });
//    }else{
//        NSString *username = [[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_EmailName];
//        NSString *userpwd = [[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_EmailPwd];
//        if ([username isEqualToString:self.email_tf.text] && [userpwd isEqualToString:self.pwd_tf.text]) {
//              [SVProgressHUD showWithStatus:@"Logging in..."];
//              dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
//                  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
//                      dispatch_async(dispatch_get_main_queue(), ^{
//                          [SVProgressHUD dismiss];
//                          [SVProgressHUD showInfoWithStatus:@"Login successful"];
//                          [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_LoginStatus];
//                          [[NSUserDefaults standardUserDefaults]setValue:@"Female" forKey:NeighborsSimple_EmailGender];
//                          [[NSUserDefaults standardUserDefaults]setValue:@"20" forKey:NeighborsSimple_EmailAge];
//                          [[NSUserDefaults standardUserDefaults]synchronize];
//                          NeighborsSimpleCuteHomeMainController *homeMainvc = [[NeighborsSimpleCuteHomeMainController alloc]init];
//                          UINavigationController *rootMainvc = [[UINavigationController alloc]initWithRootViewController:homeMainvc];
//                          [UIApplication sharedApplication].keyWindow.rootViewController = rootMainvc;
//                  });
//              });
//          }else{
//              [SVProgressHUD showInfoWithStatus:@"account or password is incorrect  or account does not exist"];
//              return;
//          }
//    }
}

-(void)actinoSettingConfig
{
    if (![NeighborsSimpleCuteFiterModel isOnline]) {
        NSLog(@"NeighborsSimpleCuteFiterModel:111");
        NeighborsSimpleCuteUserModel *userModel =  [NeighborsSimpleCuteUserModel getUserInfo];
        NeighborsSimpleCuteFiterModel *model = [[NeighborsSimpleCuteFiterModel alloc]init];
        NSLog(@"userModel.userinfo.gender:%ld",(long)userModel.userInfo.gender);
        if (userModel.userInfo.gender == 1 ) {
            model.genderStr = @"2";
        }else if(userModel.userInfo.gender == 2){
            model.genderStr = @"1";
        }else{
            model.genderStr = @"0";
        }
        model.maxStr     = @"99";
        model.minStr     = @"18";
        model.countryStr = @"";
        model.stateStr   = @"";
        model.cityStr    = @"";
        model.countryId  = @"";
        model.stateId    = @"";
        model.cityId     = @"";
        model.isanyWhere = YES;
        [NeighborsSimpleCuteFiterModel save:model];
    }
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = NSC_BGThemColor;
    self.navigationItem.title = @"Sign In";
    NSString *emailStr = [[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_LoginUser];
    NSString *pwdStr = [[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_LoginPWd];
    if (IS_EMPTY(emailStr)) {
    }else{
        self.email_tf.text = emailStr;
    }
    if (IS_EMPTY(pwdStr)) {
        
    }else{
        self.pwd_tf.text = pwdStr;
    }
    [self.view addSubview:self.email_lab];
    [self.email_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.top.offset(80);
    }];
    [self.view addSubview:self.email_tf];
    [self.email_tf mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.email_lab.mas_bottom).offset(2);
        make.height.offset(40);
    }];
    [self.view addSubview:self.email_view];
    [self.email_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.email_tf.mas_bottom).offset(2);
        make.height.offset(1);
    }];
    [self.view addSubview:self.pwd_lab];
    [self.pwd_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.top.mas_equalTo(self.email_view.mas_bottom).offset(50);
    }];
    [self.view addSubview:self.pwd_tf];
    [self.pwd_tf mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.pwd_lab.mas_bottom).offset(2);
        make.height.offset(40);
    }];
    [self.view addSubview:self.pwd_view];
    [self.pwd_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.pwd_tf.mas_bottom).offset(2);
        make.height.offset(1);
    }];
    
    [self.view addSubview:self.forgetPwdBtn];
    [self.forgetPwdBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-30);
        make.top.mas_equalTo(self.pwd_view.mas_bottom).offset(30);
    }];
    [self.view addSubview:self.continueBtn];
    [self.continueBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.top.mas_equalTo(self.forgetPwdBtn.mas_bottom).offset(40);
        make.width.offset(240);
        make.height.offset(50);
    }];
}


/// validate email
/// @param emailStr isValdateEmail
-(BOOL)isValdateEmail:(NSString *)emailStr
{
    NSString*emailRegex =@"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
    NSPredicate*emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegex];
    return [emailTest evaluateWithObject:emailStr];
}


@end

@interface NeighborsSimpleCuteUserRegsterController ()<UITextViewDelegate>

@property (nonatomic,strong)UILabel *email_lab;

@property (nonatomic,strong)UITextField *email_tf;

@property (nonatomic,strong)UIView *email_view;

@property (nonatomic,strong)UILabel *pwd_lab;

@property (nonatomic,strong)UITextField *pwd_tf;

@property (nonatomic,strong)UIView *pwd_view;

@property (nonatomic,strong)UILabel *username_lab;

@property (nonatomic,strong)UITextField *username_tf;

@property (nonatomic,strong)UIView *username_view;

@property (nonatomic,strong)UIButton *agermentBtn;

@property (nonatomic,strong)UITextView *detailView;

@property (nonatomic,strong)UIButton *continueBtn;

@property (nonatomic,assign)BOOL isAgrement;

@end

@implementation NeighborsSimpleCuteUserRegsterController

- (UILabel *)email_lab
{
    if (!_email_lab) {
        _email_lab = [[UILabel alloc]init];
        _email_lab.text = @"Email";
        _email_lab.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        _email_lab.font = [UIFont systemFontOfSize:16];
        _email_lab.textAlignment = NSTextAlignmentLeft;
    }
    return _email_lab;
}

- (UITextField *)email_tf
{
    if (!_email_tf) {
        _email_tf = [[UITextField alloc]init];
        _email_tf.font = [UIFont systemFontOfSize:16];
        _email_tf.textColor = [UIColor whiteColor];
        _email_tf.textAlignment = NSTextAlignmentLeft;
        NSMutableAttributedString *attribuedString = [[NSMutableAttributedString alloc]initWithString:@"Enter your email"];
        [attribuedString addAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:18],NSForegroundColorAttributeName:RGB(123, 123, 123)} range:NSMakeRange(0, attribuedString.length)];
        _email_tf.attributedPlaceholder= attribuedString;
        UIView *view1=[[UIView alloc]initWithFrame:CGRectMake(0, 0, 1, 1)];
        _email_tf.leftView = view1;
        _email_tf.leftViewMode = UITextFieldViewModeAlways;
    }
    return _email_tf;
}

- (UIView *)email_view
{
    if (!_email_view) {
        _email_view = [[UIView alloc]init];
        _email_view.backgroundColor = RGB(60, 60, 60);
    }
    return _email_view;
}

- (UILabel *)pwd_lab
{
    if (!_pwd_lab) {
        _pwd_lab = [[UILabel alloc]init];
        _pwd_lab.text = @"Password";
        _pwd_lab.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        _pwd_lab.font = [UIFont systemFontOfSize:16];
        _pwd_lab.textAlignment = NSTextAlignmentLeft;
    }
    return _pwd_lab;
}
- (UITextField *)pwd_tf
{
    if (!_pwd_tf) {
        _pwd_tf = [[UITextField alloc]init];
        _pwd_tf.font = [UIFont systemFontOfSize:16];
        _pwd_tf.textColor = [UIColor whiteColor];
        _pwd_tf.textAlignment = NSTextAlignmentLeft;
        NSMutableAttributedString *attribuedString = [[NSMutableAttributedString alloc]initWithString:@"Enter your password"];
        [attribuedString addAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:18],NSForegroundColorAttributeName:RGB(123, 123, 123)} range:NSMakeRange(0, attribuedString.length)];
        _pwd_tf.attributedPlaceholder= attribuedString;
        UIView *view1=[[UIView alloc]initWithFrame:CGRectMake(0, 0, 1, 1)];
        _pwd_tf.leftView = view1;
        _pwd_tf.leftViewMode = UITextFieldViewModeAlways;
    }
    return _pwd_tf;
}
- (UIView *)pwd_view
{
    if (!_pwd_view) {
        _pwd_view = [[UIView alloc]init];
        _pwd_view.backgroundColor = RGB(60, 60, 60);
    }
    return _pwd_view;
}

- (UILabel *)username_lab
{
    if (!_username_lab) {
        _username_lab = [[UILabel alloc]init];
        _username_lab.text = @"Username";
        _username_lab.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        _username_lab.font = [UIFont systemFontOfSize:16];
        _username_lab.textAlignment = NSTextAlignmentLeft;
    }
    return _username_lab;
}

- (UITextField *)username_tf
{
    if (!_username_tf) {
        _username_tf = [[UITextField alloc]init];
        _username_tf.font = [UIFont systemFontOfSize:16];
        _username_tf.textColor = [UIColor whiteColor];
        _username_tf.textAlignment = NSTextAlignmentLeft;
        NSMutableAttributedString *attribuedString = [[NSMutableAttributedString alloc]initWithString:@"Enter your username"];
        [attribuedString addAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:18],NSForegroundColorAttributeName:RGB(123, 123, 123)} range:NSMakeRange(0, attribuedString.length)];
        _username_tf.attributedPlaceholder= attribuedString;
        UIView *view1=[[UIView alloc]initWithFrame:CGRectMake(0, 0, 1, 1)];
        _username_tf.leftView = view1;
        _username_tf.leftViewMode = UITextFieldViewModeAlways;
    }
    return _username_tf;
}

- (UIView *)username_view
{
    if (!_username_view) {
        _username_view = [[UIView alloc]init];
        _username_view.backgroundColor = RGB(60, 60, 60);
    }
    return _username_view;
}

- (UIButton *)agermentBtn
{
    if (!_agermentBtn) {
        _agermentBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_agermentBtn setImage:[UIImage imageNamed:TUIKitResource(@"a_register_nor")] forState:UIControlStateNormal];
        [_agermentBtn setImage:[UIImage imageNamed:TUIKitResource(@"a_register_sel")] forState:UIControlStateSelected];
        [_agermentBtn addTarget:self action:@selector(actionAgrementBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _agermentBtn;
}
-(void)actionAgrementBtn:(UIButton *)sender
{
    NSLog(@"agermentBtn btn");
    sender.selected = !sender.selected;
    if (sender.selected) {
        [self.agermentBtn setBackgroundImage:[UIImage imageNamed:TUIKitResource(@"a_register_sel")] forState:UIControlStateNormal];
        self.isAgrement = YES;
    }else{
        [self.agermentBtn setBackgroundImage:[UIImage imageNamed:TUIKitResource(@"a_register_nor")] forState:UIControlStateNormal];
        self.isAgrement = NO;
    }
}
- (UITextView *)detailView
{
    if (!_detailView) {
        _detailView = [[UITextView alloc] init];
        _detailView.linkTextAttributes = @{};
        NSDictionary *normalAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize:12], NSForegroundColorAttributeName: [UIColor whiteColor]};
        NSMutableAttributedString *totalStr = [[NSMutableAttributedString alloc] initWithString:@"By continuing, I confirm that I have reviewed and agree to the " attributes:normalAttributes];
        NSDictionary *userAgreementAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize:12], NSForegroundColorAttributeName: RGB(235, 142, 63), NSLinkAttributeName: @"service://"};
        NSAttributedString *userAgreementStr = [[NSAttributedString alloc] initWithString:@"Service Agreement" attributes:userAgreementAttributes];
        [totalStr appendAttributedString:userAgreementStr];
        NSAttributedString *andStr = [[NSAttributedString alloc] initWithString:@" and the " attributes:normalAttributes];
        [totalStr appendAttributedString:andStr];
        NSDictionary *privacyAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize:12], NSForegroundColorAttributeName: RGB(235, 142, 63), NSLinkAttributeName: @"privacy://"};
        NSAttributedString *privacyPolicyStr = [[NSAttributedString alloc] initWithString:@"Privacy Policy" attributes:privacyAttributes];
        [totalStr appendAttributedString:privacyPolicyStr];
        NSAttributedString *endStr = [[NSAttributedString alloc] initWithString:@"." attributes:normalAttributes];
        [totalStr appendAttributedString:endStr];
        _detailView.attributedText = totalStr;
        _detailView.delegate = self;
        _detailView.editable = NO;
        _detailView.scrollEnabled = NO;
        _detailView.textContainerInset = UIEdgeInsetsZero;
        _detailView.backgroundColor = [UIColor clearColor];
        _detailView.textContainer.lineFragmentPadding = 0;
    }
    return _detailView;
}

- (BOOL)textView:(UITextView *)textView shouldInteractWithURL:(NSURL *)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction {
    if ([[URL scheme] isEqualToString:@"service"]) {
        NeighborsSimpleCuteBaseWebController *agrementvc = [[NeighborsSimpleCuteBaseWebController  alloc]init];
        agrementvc.isShowHidden = YES;
        agrementvc.URLString = @"http://www.pokivoice.cn/terms.html";
        agrementvc.webTitle = @"Service Agreement";
        agrementvc.loadType = WKWebLoadTypeWebURLString;
        [self.navigationController pushViewController:agrementvc animated:YES];
        return NO;
    } else if ([[URL scheme] isEqualToString:@"privacy"]) {
        NeighborsSimpleCuteBaseWebController *provcyVc = [[NeighborsSimpleCuteBaseWebController  alloc]init];
        provcyVc.isShowHidden = YES;
        provcyVc.URLString = @"http://www.pokivoice.cn/privacy.html";
        provcyVc.loadType = WKWebLoadTypeWebURLString;
        provcyVc.webTitle = @"Privacy Policy";
        [self.navigationController pushViewController:provcyVc animated:YES];
        return NO;
    }
    return YES;
}

- (UIButton *)continueBtn
{
    if (!_continueBtn) {
        _continueBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_continueBtn setTitle:@"Continue" forState:UIControlStateNormal];
        _continueBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_continueBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_continueBtn addTarget:self action:@selector(actonRegsiterContinuteBtn:) forControlEvents:UIControlEventTouchUpInside];
        _continueBtn.layer.cornerRadius = 25.0f;
        _continueBtn.layer.masksToBounds = YES;
        [_continueBtn gradientButtonWithSize:CGSizeMake(240, 50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _continueBtn;
}

-(void)actonRegsiterContinuteBtn:(UIButton *)btn
{
    [self.view endEditing:YES];
    if (IS_EMPTY(self.email_tf.text)) {
        [SVProgressHUD showInfoWithStatus:@"Please enter ther email"];
        return;
    }
    if (IS_EMPTY(self.pwd_tf.text)) {
        [SVProgressHUD showInfoWithStatus:@"Please enter ther password"];
        return;
    }
    if (IS_EMPTY(self.username_tf.text)) {
        [SVProgressHUD showInfoWithStatus:@"Please enter ther username"];
        return;
    }
    if (![self isValdateEmail:self.email_tf.text]) {
        [SVProgressHUD showInfoWithStatus:@"Email format is incorrect"];
        return;
    }
    if (!self.isAgrement) {
        [SVProgressHUD showInfoWithStatus:@"Please agree to the agreement first"];
        return;
    }
    [SVProgressHUD show];
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"appType"] = @"81";
    param[@"clientNum"] = @"81003001";
    param[@"email"] = self.email_tf.text;
    param[@"nickName"] = self.username_tf.text;
    param[@"password"]     = self.pwd_tf.text;
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/account/user/emailRegister"];
    NSLog(@"baseurl:%@",baseUrl);
    NSLog(@"param:%@",param);
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"response.data:%@",response.data);
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            [SVProgressHUD dismiss];
            [[NSUserDefaults standardUserDefaults]setValue:response.data[@"tokenDto"][@"token"] forKey:NeighborsSimple_Token];
            [[NSUserDefaults standardUserDefaults]synchronize];
            NeighborsSimpleCuteWelcomeUseInfoController *welcomeInfovc = [[NeighborsSimpleCuteWelcomeUseInfoController alloc]init];
            welcomeInfovc.hidesBottomBarWhenPushed = YES;
            welcomeInfovc.emailStr    = self.email_tf.text;
            welcomeInfovc.pwdStr      = self.pwd_tf.text;
            [self.navigationController pushViewController:welcomeInfovc animated:YES];
        }else{
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD dismiss];
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
//    [SVProgressHUD show];
//    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
//        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
//            dispatch_async(dispatch_get_main_queue(), ^{
//                [SVProgressHUD dismiss];
//                [[NSUserDefaults standardUserDefaults]setValue:self.email_tf.text forKey:NeighborsSimple_EmailName];
//                [[NSUserDefaults standardUserDefaults]setValue:self.pwd_tf.text forKey:NeighborsSimple_EmailPwd];
//                [[NSUserDefaults standardUserDefaults]setValue:self.username_tf.text forKey:NeighborsSimple_EmailUser];
//                [[NSUserDefaults standardUserDefaults]setValue:@"Female" forKey:NeighborsSimple_EmailGender];
//                [[NSUserDefaults standardUserDefaults]setValue:@"20" forKey:NeighborsSimple_EmailAge];
//                [[NSUserDefaults standardUserDefaults]synchronize];
//                NeighborsSimpleCuteUserWelcomeController *welcomevc = [[NeighborsSimpleCuteUserWelcomeController alloc]init];
//                welcomevc.hidesBottomBarWhenPushed = YES;
//                [self.navigationController pushViewController:welcomevc animated:YES];
//        });
//    });
}
/// validate email
/// @param emailStr isValdateEmail
-(BOOL)isValdateEmail:(NSString *)emailStr
{
    NSString*emailRegex =@"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
    NSPredicate*emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegex];
    return [emailTest evaluateWithObject:emailStr];
}
/// forgewpwd btn
/// @param btn forgetpwd btn
-(void)actonForgetPwdBtn:(UIButton *)btn
{
    NeighborsSimpleCuteUserForgePwdController *forgetpwdvc = [[NeighborsSimpleCuteUserForgePwdController alloc]init];
    forgetpwdvc.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:forgetpwdvc animated:YES];
}
- (void)viewDidLoad
{
    self.view.backgroundColor = NSC_BGThemColor;
    self.navigationItem.title = @"Sign Up";
    [self NeighborsSimpleCuteSetLeftButton:[UIImage imageNamed:TUIKitResource(@"n_back")]];
    [self.view addSubview:self.email_lab];
    [self.email_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.top.offset(80);
    }];
    [self.view addSubview:self.email_tf];
    [self.email_tf mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.email_lab.mas_bottom).offset(2);
        make.height.offset(40);
    }];
    [self.view addSubview:self.email_view];
    [self.email_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.email_tf.mas_bottom).offset(2);
        make.height.offset(1);
    }];
    [self.view addSubview:self.pwd_lab];
    [self.pwd_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.top.mas_equalTo(self.email_view.mas_bottom).offset(50);
    }];
    [self.view addSubview:self.pwd_tf];
    [self.pwd_tf mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.pwd_lab.mas_bottom).offset(2);
        make.height.offset(40);
    }];
    [self.view addSubview:self.pwd_view];
    [self.pwd_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.pwd_tf.mas_bottom).offset(2);
        make.height.offset(1);
    }];
    
    [self.view addSubview:self.username_lab];
    [self.username_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.top.mas_equalTo(self.pwd_view.mas_bottom).offset(50);
    }];
    
    [self.view addSubview:self.username_tf];
    [self.username_tf mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.username_lab.mas_bottom).offset(2);
        make.height.offset(40);
    }];
    [self.view addSubview:self.username_view];
    [self.username_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.username_tf.mas_bottom).offset(2);
        make.height.offset(1);
    }];
    [self.view addSubview:self.agermentBtn];
    [self.agermentBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.top.mas_equalTo(self.username_view.mas_bottom).offset(30);
        make.width.height.offset(25);
    }];
    [self.view addSubview:self.detailView];
    [self.detailView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_equalTo(self.agermentBtn.mas_right).offset(8);
        make.top.mas_equalTo(self.agermentBtn.mas_top).offset(0);
        make.right.offset(-30);
    }];
    [self.view addSubview:self.continueBtn];
    [self.continueBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.bottom.offset(-Height_X - 30);
        make.width.offset(240);
        make.height.offset(50);
    }];
}
@end

@interface NeighborsSimpleCuteUserForgePwdController ()

@property (nonatomic,strong)UITextField *forget_email_tf;

@property (nonatomic,strong)UIView *forget_eamil_view;

@property (nonatomic,strong)UILabel *forget_detail_lab;

@property (nonatomic,strong)UIButton *forget_contiute_btn;

@end

@implementation NeighborsSimpleCuteUserForgePwdController

- (UITextField *)forget_email_tf
{
    if (!_forget_email_tf) {
        _forget_email_tf = [[UITextField alloc]init];
        _forget_email_tf.font = [UIFont systemFontOfSize:16];
        _forget_email_tf.textColor = [UIColor whiteColor];
        _forget_email_tf.textAlignment = NSTextAlignmentCenter;
        NSMutableAttributedString *attribuedString = [[NSMutableAttributedString alloc]initWithString:@"Enter your email"];
        [attribuedString addAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:18],NSForegroundColorAttributeName:RGB(123, 123, 123)} range:NSMakeRange(0, attribuedString.length)];
        _forget_email_tf.attributedPlaceholder= attribuedString;
        UIView *view1=[[UIView alloc]initWithFrame:CGRectMake(0, 0, 1, 1)];
        _forget_email_tf.leftView = view1;
        _forget_email_tf.leftViewMode = UITextFieldViewModeAlways;
    }
    return _forget_email_tf;
}

- (UIView *)forget_eamil_view
{
    if (!_forget_eamil_view) {
        _forget_eamil_view = [[UIView alloc]init];
        _forget_eamil_view.backgroundColor = RGB(60, 60, 60);
    }
    return _forget_eamil_view;
}

- (UILabel *)forget_detail_lab
{
    if (!_forget_detail_lab) {
        _forget_detail_lab = [[UILabel alloc]init];
        _forget_detail_lab.text = @"Please enter the email address or username ussed to register with us. We will then send you a code with instructions to create a new password.";
        _forget_detail_lab.numberOfLines = 0;
        _forget_detail_lab.textColor = RGB(150, 158, 158);
        _forget_detail_lab.font = [UIFont systemFontOfSize:13];
        _forget_detail_lab.textAlignment = NSTextAlignmentCenter;
    }
    return _forget_detail_lab;
}

- (UIButton *)forget_contiute_btn
{
    if (!_forget_contiute_btn) {
        _forget_contiute_btn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_forget_contiute_btn setTitle:@"Continue" forState:UIControlStateNormal];
        _forget_contiute_btn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_forget_contiute_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_forget_contiute_btn addTarget:self action:@selector(actonForgetContinuteBtn:) forControlEvents:UIControlEventTouchUpInside];
        _forget_contiute_btn.layer.cornerRadius = 25.0f;
        _forget_contiute_btn.layer.masksToBounds = YES;
        [_forget_contiute_btn gradientButtonWithSize:CGSizeMake(240, 50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _forget_contiute_btn;
}
-(void)actonForgetContinuteBtn:(UIButton *)btn
{
    NSLog(@"actonForgetContinuteBtn btn");
    [self.view endEditing:YES];
    if (IS_EMPTY(self.forget_email_tf.text)) {
        [SVProgressHUD showInfoWithStatus:@"Enter your email "];
        return;
    }
    [SVProgressHUD show];
    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
            dispatch_async(dispatch_get_main_queue(), ^{
                [SVProgressHUD dismiss];
                [SVProgressHUD showInfoWithStatus:@"Please pay attention to check if the sending is successful"];
                [self.navigationController popViewControllerAnimated:YES];
        });
    });
}
- (void)viewDidLoad
{
    self.view.backgroundColor = NSC_BGThemColor;
    self.navigationItem.title = @"Forgot password";
    [self NeighborsSimpleCuteSetLeftButton:[UIImage imageNamed:TUIKitResource(@"n_back")]];
    [self.view addSubview:self.forget_email_tf];
    [self.forget_email_tf mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.offset(100);
        make.height.offset(40);
    }];
    [self.view addSubview:self.forget_eamil_view];
    [self.forget_eamil_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.forget_email_tf.mas_bottom).offset(2);
        make.height.offset(2);
    }];
    [self.view addSubview:self.forget_detail_lab];
    [self.forget_detail_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.forget_eamil_view.mas_bottom).offset(30);
        make.height.offset(80);
    }];
    [self.view addSubview:self.forget_contiute_btn];
    [self.forget_contiute_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.top.mas_equalTo(self.forget_detail_lab.mas_bottom).offset(40);
        make.width.offset(240);
        make.height.offset(50);
    }];
}
@end

@interface NeighborsSimpleCuteUserWelcomeController ()<TZImagePickerControllerDelegate>

@property (nonatomic,strong)UIView *headerView;

@property (nonatomic,strong)UIImageView *headerImageView;

@property (nonatomic,strong)UIImageView *avtor_img;

@property (nonatomic,strong)UIButton *headImageBtn;

@property (nonatomic,strong)UILabel *avtor_lab;

@property (nonatomic,strong)UILabel *avtor_lab2;

@property (nonatomic,strong)UIButton *contiuteBtn;

@property (nonatomic,strong)UIImage *selectImage;

@property (nonatomic,assign)BOOL isUplodate;

@end

@implementation NeighborsSimpleCuteUserWelcomeController

- (UIView *)headerView
{
    if (!_headerView) {
        _headerView = [[UIView alloc]init];
        _headerView.backgroundColor = [UIColor clearColor];
    }
    return _headerView;
}


- (UIButton *)headImageBtn
{
    if (!_headImageBtn) {
        _headImageBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        _headImageBtn.imageView.contentMode = UIViewContentModeScaleAspectFill;
        _headImageBtn.clipsToBounds = YES;
        _headImageBtn.layer.cornerRadius = 166/2.0;
        [_headImageBtn addTarget:self action:@selector(headBtnClick:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _headImageBtn;
}

-(void)headBtnClick:(UIButton *)btn
{
    [self.view endEditing:YES];
    TZImagePickerController *imagePickerVc = [[TZImagePickerController alloc] initWithMaxImagesCount:1 columnNumber:4 delegate:self pushPhotoPickerVc:YES];
    [imagePickerVc setAllowPreview:NO];
    [imagePickerVc setNaviBgColor:[UIColor blackColor]];
    [imagePickerVc setAllowPickingVideo:NO];
    [imagePickerVc setIsSelectOriginalPhoto:NO];
    imagePickerVc.allowTakePicture = YES;
    [imagePickerVc setDidFinishPickingPhotosHandle:^(NSArray<UIImage *> *photos, NSArray *assets, BOOL isSelectOriginalPhoto) {
        self.selectImage = photos[0];
        [self.headImageBtn setImage:photos[0] forState:UIControlStateNormal];
        self.isUplodate = YES;
    }];
    imagePickerVc.modalPresentationStyle = UIModalPresentationFullScreen;
    [self presentViewController:imagePickerVc animated:YES completion:nil];
}

- (UIImageView *)headerImageView
{
    if (!_headerImageView) {
        _headerImageView = [[UIImageView alloc]init];
        _headerImageView.image = [UIImage imageNamed:TUIKitResource(@"signinorup_uploadbg")];
    }
    return _headerImageView;
}

- (UIImageView *)avtor_img
{
    if (!_avtor_img) {
        _avtor_img = [[UIImageView alloc]init];
        _avtor_img.image = [UIImage imageNamed:TUIKitResource(@"signinorup_camera")];
    }
    return _avtor_img ;
}
-(void)actionAvtorimageGesture:(UITapGestureRecognizer *)gesture
{
   
}
- (UILabel *)avtor_lab
{
    if (!_avtor_lab) {
        _avtor_lab = [[UILabel alloc]init];
        _avtor_lab.font = [UIFont boldSystemFontOfSize:18];
        _avtor_lab.text = @"Upload you best photo";
        _avtor_lab.textAlignment = NSTextAlignmentCenter;
        _avtor_lab.textColor = RGB(235, 142, 63);
    }
    return _avtor_lab;
}

- (UILabel *)avtor_lab2
{
    if (!_avtor_lab2) {
        _avtor_lab2 = [[UILabel alloc]init];
        _avtor_lab2.font = [UIFont boldSystemFontOfSize:18];
        _avtor_lab2.text = @"Post a profile photo to increase the likelihood you'll find someone!";
        _avtor_lab2.textAlignment = NSTextAlignmentCenter;
        _avtor_lab2.numberOfLines = 0;
        _avtor_lab2.textColor = [UIColor whiteColor];
    }
    return _avtor_lab2;
}

- (UIButton *)contiuteBtn
{
    if (!_contiuteBtn) {
        _contiuteBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_contiuteBtn setTitle:@"Continue" forState:UIControlStateNormal];
        _contiuteBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_contiuteBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_contiuteBtn addTarget:self action:@selector(actonWelcomeContinuteBtn:) forControlEvents:UIControlEventTouchUpInside];
        _contiuteBtn.layer.cornerRadius = 25.0f;
        _contiuteBtn.layer.masksToBounds = YES;
        [_contiuteBtn gradientButtonWithSize:CGSizeMake(240, 50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _contiuteBtn;
}

-(void)actonWelcomeContinuteBtn:(UIButton *)btn
{
    NSLog(@"actonWelcomeContinuteBtn btn");
    if (!self.isUplodate) {
        [SVProgressHUD showInfoWithStatus:@"Please select a image"];
        return;
    }
//    [SVProgressHUD show];
//    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
//        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
//            dispatch_async(dispatch_get_main_queue(), ^{
//                [SVProgressHUD dismiss];
//                [self actionLoginGoHome];
//        });
//    });
    
    [self actionuploadImage];
}
-(void)actionuploadImage
{
    NSString *urlStr  = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/qiniu/upload"];
    [SVProgressHUD showWithStatus:@"uploading..."];
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
    [manager.requestSerializer setValue:@"application/json;charset=utf-8" forHTTPHeaderField:@"Content-Type"];
    manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@"application/json",@"text/json",@"text/javascript",@"text/html", nil];
    manager.requestSerializer = [AFJSONRequestSerializer serializer];
    AFJSONResponseSerializer *response = [AFJSONResponseSerializer serializer];
    response.removesKeysWithNullValues = YES;//去除空值
    manager.responseSerializer = response;//申明返回的结果是json
    //                                                               NeighborsSimpleCuteUserModel *usermodel = [NeighborsSimpleCuteUserModel getUserInfo];
    NSString *token = [[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_Token];
    NSLog(@"token:%@",token);
    [manager.requestSerializer setValue:token forHTTPHeaderField:@"token"];
    NSDateFormatter *formatter=[[NSDateFormatter alloc]init];
    formatter.dateFormat=@"yyyyMMddHHmmss";
    NSString *str=[formatter stringFromDate:[NSDate date]];
    NSString *fileName=[NSString stringWithFormat:@"%@%@.jpg",str,[self getRandWithLetters]];
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"fileName"] = fileName;
    NSLog(@"param:%@",param);
    [manager POST:urlStr parameters:param headers:nil constructingBodyWithBlock:^(id<AFMultipartFormData>  _Nonnull formData) {
        NSData *imageData = UIImageJPEGRepresentation(self.selectImage, 0.5);
        [formData appendPartWithFileData:imageData name:@"picFile" fileName:fileName mimeType:@"image/jpg"];
    } progress:^(NSProgress * _Nonnull uploadProgress) {
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        [SVProgressHUD dismiss];
        NSLog(@"responseObject:%@",responseObject);
        [self actionUpdateImageWithPictureUrl:responseObject[@"data"]];
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"error:%@",error);
        [SVProgressHUD dismiss];
        [SVProgressHUD showErrorWithStatus:@"Request failed"];
        return;
    }];
}
-(void)actionUpdateImageWithPictureUrl:(NSString *)pictureUrl
{
    [SVProgressHUD show];
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"imgStatus"] = @"2";
    param[@"imgUrl"] = pictureUrl;
    param[@"tempStr7th"] = pictureUrl;
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/account/user/update"];
    NSLog(@"param:%@",param);
    NSLog(@"baseUrl:%@",baseUrl);
    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST2:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"update:%@",response.data);
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            //个人信息资料
            [self actionLoginGoHome];
        }else{
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    } failure:^(NSError * _Nonnull error) {
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}

-(void)actionLoginGoHome
{
    if ([NeighborsSimpleTool isVPNOn] == YES){
        NSLog(@"actionLoginGoHomeactionLoginGoHomeactionLoginGoHomeactionLoginGoHome OPEN");
        [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_VPN];
        [[NSUserDefaults standardUserDefaults]synchronize];
    }else{
        NSLog(@"actionLoginGoHomeactionLoginGoHomeactionLoginGoHomeactionLoginGoHome Close");
    }
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"appType"]   = @"81"; //84
    param[@"clientNum"] = @"81003001"; //84001001
    param[@"email"]          = self.emailStr;
    param[@"password"]       = self.pwdStr;
    param[@"type"]           = @"email";
    param[@"userName"]       = @"admin";
    NSString *baseUrl  = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/account/user/emailLogin"];
    NSLog(@"baseurl:%@",baseUrl);
    NSLog(@"param:%@",param);
    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST3:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"registrer:eamilLogin.data:%@",response.data);
        if (response.code == 0) {
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:@"Login successful"];
            NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel mj_objectWithKeyValues:response.data];
            [NeighborsSimpleCuteUserModel save:model];
            [self actinoSettingConfig];
            [[NSUserDefaults standardUserDefaults]setValue:self.emailStr forKey:NeighborsSimple_LoginUser];
            [[NSUserDefaults standardUserDefaults]setValue:self.pwdStr forKey:NeighborsSimple_LoginPWd];
            [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_LoginStatus];
            [[NSUserDefaults standardUserDefaults]setValue:@"Female" forKey:NeighborsSimple_EmailGender];
            [[NSUserDefaults standardUserDefaults]setValue:@"20" forKey:NeighborsSimple_EmailAge];
            [[NSUserDefaults standardUserDefaults]synchronize];
            NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
            BOOL isFlag = NO;
            NSMutableArray *countryArr = [NSMutableArray array];
            if ([userModel.appClient.spare1st containsString:@";"]) {
                [countryArr  addObjectsFromArray:[userModel.appClient.spare1st componentsSeparatedByString:@";"]];
            }else{
                if (IS_EMPTY(userModel.appClient.spare1st)) {
                    
                }else{
                    [countryArr addObject:userModel.appClient.spare1st];
                }
            }
            for (int i = 0; i< countryArr.count; i++) {
                NSString *countryStr2 = countryArr[i];
                NSLog(@"countryStr2countryStr2:%@",countryStr2);
                if ([userModel.userInfo.ipContent containsString:countryStr2]) {
                    isFlag = YES;
                    break;
                }
            }
            if (isFlag == YES) {
                NSLog(@"包含该国家");
                [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_COUNTRY];
                [[NSUserDefaults standardUserDefaults]synchronize];
            }else{
                NSLog(@"不包含该国家");
            }
            BOOL isVPN = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_VPN];
            BOOL isCountry = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_COUNTRY];
            if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th isEqualToString:@"1"] || [userModel.appClient.spare13th isEqualToString:@"1"] || isVPN == YES  || isCountry == YES) {
                //简单页面
                BOOL isShow = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_ShowPageStatus];
                if (isShow == YES) {
                    //两个按钮的
                    NeighborsSimpleCuteHomeRootController *homerootvc = [[NeighborsSimpleCuteHomeRootController alloc]init];
                    UINavigationController *rootNav = [[UINavigationController alloc]initWithRootViewController:homerootvc];
                    [UIApplication sharedApplication].keyWindow.rootViewController = rootNav;
                }else{
                    //一个按钮的
                    NeighborsSimpleCuteHomeMainController *homeMainvc = [[NeighborsSimpleCuteHomeMainController alloc]init];
                    UINavigationController *rootMainvc = [[UINavigationController alloc]initWithRootViewController:homeMainvc];
                    [UIApplication sharedApplication].keyWindow.rootViewController = rootMainvc;
                }
            }else{
                //复杂界面
                ZFTabbarController *tabbarvc =[[ZFTabbarController alloc]init];
                [UIApplication sharedApplication].keyWindow.rootViewController = tabbarvc;
                [[IMManagerUtil IMManagerSharedInstance]IMManagerconfigIM];
            }
        }else{
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD dismiss];
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}

-(void)actinoSettingConfig
{
    if (![NeighborsSimpleCuteFiterModel isOnline]) {
        NSLog(@"NeighborsSimpleCuteFiterModel:111");
        NeighborsSimpleCuteUserModel *userModel =  [NeighborsSimpleCuteUserModel getUserInfo];
        NeighborsSimpleCuteFiterModel *model = [[NeighborsSimpleCuteFiterModel alloc]init];
        NSLog(@"userModel.userinfo.gender:%ld",(long)userModel.userInfo.gender);
        if (userModel.userInfo.gender == 1 ) {
            model.genderStr = @"2";
        }else if(userModel.userInfo.gender == 2){
            model.genderStr = @"1";
        }else{
            model.genderStr = @"0";
        }
        model.maxStr     = @"99";
        model.minStr     = @"18";
        model.countryStr = @"";
        model.stateStr   = @"";
        model.cityStr    = @"";
        model.countryId  = @"";
        model.stateId    = @"";
        model.cityId     = @"";
        model.isanyWhere = YES;
        [NeighborsSimpleCuteFiterModel save:model];
    }
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    self.view.backgroundColor = NSC_BGThemColor;
    self.navigationItem.title = @"Welcome";
    [self NeighborsSimpleCuteSetLeftButton:[UIImage imageNamed:TUIKitResource(@"n_back")]];
    [self.view addSubview:self.headerView];
    [self.headerView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.top.offset(100);
        make.width.height.offset(171);
    }];
    [self.headerView addSubview:self.headerImageView];
    [self.headerImageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self.headerView addSubview:self.avtor_img];
    [self.avtor_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.headerView);
        make.centerY.mas_equalTo(self.headerView);
    }];
    [self.headerView addSubview:self.headImageBtn];
    [self.headImageBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.headerView);
        make.centerY.mas_equalTo(self.headerView);
        make.width.height.offset(166);
    }];
    
    [self.view addSubview:self.avtor_lab];
    [self.avtor_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.top.mas_equalTo(self.headerView.mas_bottom).offset(20);
    }];
    [self.view addSubview:self.avtor_lab2];
    [self.avtor_lab2 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.top.mas_equalTo(self.avtor_lab.mas_bottom).offset(20);
        make.left.offset(40);
        make.right.offset(-40);
    }];
    [self.view addSubview:self.contiuteBtn];
    [self.contiuteBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.top.mas_equalTo(self.avtor_lab2.mas_bottom).offset(40);
        make.width.offset(240);
        make.height.offset(50);
    }];
}
@end

//注册选择地址

@interface NeighborsSimpleCuteWelcomeUseInfoController()
@property (strong, nonatomic)  UILabel     *gender_lab;
@property (strong, nonatomic)  UILabel     *gender_line_lab;
@property (strong, nonatomic)  UIButton    *gender_btn;
@property (strong, nonatomic)  UITextField *gender_tf;
@property (strong, nonatomic)  UILabel     *age_lab;
@property (strong, nonatomic)  UILabel     *age_line_lab;
@property (strong, nonatomic)  UIButton    *age_btn;
@property (strong, nonatomic)  UITextField *age_tf;
@property (strong, nonatomic)  UILabel     *location_lab;
@property (strong, nonatomic)  UILabel     *location_line_lab;
@property (strong, nonatomic)  UIButton    *location_btn;
@property (strong, nonatomic)  UITextField *location_tf;
@property (strong, nonatomic)  UIButton *continue_btn;

@property (nonatomic,strong)NSMutableArray *genderListArr;
@property (nonatomic,strong)NSMutableArray *ageListArr;
@property (nonatomic,copy)NSString *genderStr;
@property (nonatomic,strong)NeighborsSimpleCuteResetCountryModel *countryModel;
@property (nonatomic,strong)NeighborsSimpleCuteResetCountryModel *stateModel;
@property (nonatomic,strong)NeighborsSimpleCuteResetCountryModel *cityModel;
@end

@implementation NeighborsSimpleCuteWelcomeUseInfoController


- (UIButton *)continue_btn
{
    if(!_continue_btn){
        _continue_btn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_continue_btn setTitle:@"Continue" forState:UIControlStateNormal];
        _continue_btn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_continue_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_continue_btn addTarget:self action:@selector(actonWelcomeInfoContinuteBtn:) forControlEvents:UIControlEventTouchUpInside];
        _continue_btn.layer.cornerRadius = 25.0f;
        _continue_btn.layer.masksToBounds = YES;
        [_continue_btn gradientButtonWithSize:CGSizeMake(240, 50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _continue_btn;
}

-(void)actonWelcomeInfoContinuteBtn:(UIButton *)btn
{
    NSLog(@"actonWelcomeInfoContinuteBtn btn");
    if (IS_EMPTY(self.gender_tf.text)) {
        [SVProgressHUD showInfoWithStatus:@"Choose your gender"];
        return;
    }
    if (IS_EMPTY(self.age_tf.text)) {
        [SVProgressHUD showInfoWithStatus:@"Choose your age"];
        return;
    }
    if (IS_EMPTY(self.location_tf.text)) {
        [SVProgressHUD showInfoWithStatus:@"Choose your location"];
        return;
    }
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"country"]    = self.countryModel.name;
    param[@"countryId"]  = @(self.countryModel.id);
    param[@"tempStr6th"] = self.countryModel.code;
    param[@"province"]   = self.stateModel.name;
    param[@"provinceId"] = @(self.stateModel.id);
    param[@"tempStr5th"] = self.stateModel.code;
    param[@"city"]       = self.cityModel.name;
    param[@"cityId"]     = @(self.cityModel.id);
    param[@"gender"]     = self.genderStr;
    param[@"age"]        = self.age_tf.text;
    NSString *baseUrl    = [NSString stringWithFormat:@"%@/%@",NSC_Base_Url,@"api/account/user/update"];
    NSLog(@"baseUrl:%@",baseUrl);
    NSLog(@"param:%@",param);
    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST2:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"update:%@",response.data);
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            NeighborsSimpleCuteUserWelcomeController *welcomevc = [[NeighborsSimpleCuteUserWelcomeController alloc]init];
            welcomevc.hidesBottomBarWhenPushed = YES;
            welcomevc.emailStr    = self.emailStr;
            welcomevc.pwdStr      = self.pwdStr;
            [self.navigationController pushViewController:welcomevc animated:YES];
        }else{
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    } failure:^(NSError * _Nonnull error) {
        [SVProgressHUD dismiss];
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}

-(void)actionLoginGoHome
{
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"appType"]   = @"81"; //84
    param[@"clientNum"] = @"81003001"; //84001001
    param[@"email"]          = self.emailStr;
    param[@"password"]       = self.pwdStr;
    param[@"type"]           = @"email";
    param[@"userName"]       = @"admin";
    NSString *baseUrl  = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/account/user/emailLogin"];
    NSLog(@"baseurl:%@",baseUrl);
    NSLog(@"param:%@",param);
    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST3:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"registrer:eamilLogin.data:%@",response.data);
        if (response.code == 0) {
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:@"Login successful"];
            NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel mj_objectWithKeyValues:response.data];
            [NeighborsSimpleCuteUserModel save:model];
            [self actinoSettingConfig];
            [[NSUserDefaults standardUserDefaults]setValue:self.emailStr forKey:NeighborsSimple_LoginUser];
            [[NSUserDefaults standardUserDefaults]setValue:self.pwdStr forKey:NeighborsSimple_LoginPWd];
            [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_LoginStatus];
            [[NSUserDefaults standardUserDefaults]setValue:@"Female" forKey:NeighborsSimple_EmailGender];
            [[NSUserDefaults standardUserDefaults]setValue:@"20" forKey:NeighborsSimple_EmailAge];
            [[NSUserDefaults standardUserDefaults]synchronize];
            NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
            BOOL isFlag = NO;
            NSMutableArray *countryArr = [NSMutableArray array];
            if ([userModel.appClient.spare1st containsString:@";"]) {
                [countryArr  addObjectsFromArray:[userModel.appClient.spare1st componentsSeparatedByString:@";"]];
            }else{
                [countryArr addObject:userModel.appClient.spare1st];
            }
            for (int i = 0; i< countryArr.count; i++) {
                NSString *countryStr2 = countryArr[i];
                NSLog(@"countryStr2countryStr2:%@",countryStr2);
                if ([userModel.userInfo.ipContent containsString:countryStr2]) {
                    isFlag = YES;
                    break;
                }
            }
            if (isFlag == YES) {
                NSLog(@"包含该国家");
                [[NSUserDefaults standardUserDefaults]setBool:YES forKey:NeighborsSimple_COUNTRY];
                [[NSUserDefaults standardUserDefaults]synchronize];
            }else{
                NSLog(@"不包含该国家");
            }
            BOOL isVPN = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_VPN];
            BOOL isCountry = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_COUNTRY];
            if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th isEqualToString:@"1"] || [userModel.appClient.spare13th isEqualToString:@"1"] || isVPN == YES  || isCountry == YES) {
                //简单页面
                BOOL isShow = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_ShowPageStatus];
                if (isShow == YES) {
                    //两个按钮的
                    NeighborsSimpleCuteHomeRootController *homerootvc = [[NeighborsSimpleCuteHomeRootController alloc]init];
                    UINavigationController *rootNav = [[UINavigationController alloc]initWithRootViewController:homerootvc];
                    [UIApplication sharedApplication].keyWindow.rootViewController = rootNav;
                }else{
                    //一个按钮的
                    NeighborsSimpleCuteHomeMainController *homeMainvc = [[NeighborsSimpleCuteHomeMainController alloc]init];
                    UINavigationController *rootMainvc = [[UINavigationController alloc]initWithRootViewController:homeMainvc];
                    [UIApplication sharedApplication].keyWindow.rootViewController = rootMainvc;
                }
            }else{
                //复杂界面
                ZFTabbarController *tabbarvc =[[ZFTabbarController alloc]init];
                [UIApplication sharedApplication].keyWindow.rootViewController = tabbarvc;
                [[IMManagerUtil IMManagerSharedInstance]IMManagerconfigIM];
            }
        }else{
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD dismiss];
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}
-(void)actinoSettingConfig
{
    if (![NeighborsSimpleCuteFiterModel isOnline]) {
        NSLog(@"NeighborsSimpleCuteFiterModel:111");
        NeighborsSimpleCuteUserModel *userModel =  [NeighborsSimpleCuteUserModel getUserInfo];
        NeighborsSimpleCuteFiterModel *model = [[NeighborsSimpleCuteFiterModel alloc]init];
        NSLog(@"userModel.userinfo.gender:%ld",(long)userModel.userInfo.gender);
        if (userModel.userInfo.gender == 1 ) {
            model.genderStr = @"2";
        }else if(userModel.userInfo.gender == 2){
            model.genderStr = @"1";
        }else{
            model.genderStr = @"0";
        }
        model.maxStr     = @"99";
        model.minStr     = @"18";
        model.countryStr = @"";
        model.stateStr   = @"";
        model.cityStr    = @"";
        model.countryId  = @"";
        model.stateId    = @"";
        model.cityId     = @"";
        model.isanyWhere = YES;
        [NeighborsSimpleCuteFiterModel save:model];
    }
}

- (UILabel *)gender_lab
{
    if (!_gender_lab) {
        _gender_lab = [[UILabel alloc]init];
        _gender_lab.text = @"Gender";
        _gender_lab.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        _gender_lab.font = [UIFont systemFontOfSize:16];
        _gender_lab.textAlignment = NSTextAlignmentLeft;
    }
    return _gender_lab;
}

- (UILabel *)gender_line_lab
{
    if(!_gender_line_lab){
        _gender_line_lab = [[UILabel alloc]init];
        _gender_line_lab.backgroundColor = RGB(60, 60, 60);
    }
    return _gender_line_lab;
}
- (UITextField *)gender_tf
{
    if (!_gender_tf) {
//        _gender_tf = [[UITextField alloc]init];
//        _gender_tf.userInteractionEnabled = NO;
//        _gender_tf.enabled = NO;
//        _gender_tf.textAlignment = NSTextAlignmentLeft;
//        _gender_tf.textColor = [UIColor whiteColor];
//        _gender_tf.font = [UIFont systemFontOfSize:18];
        _gender_tf = [[UITextField alloc]init];
        _gender_tf.userInteractionEnabled = NO;
        _gender_tf.enabled = NO;
        _gender_tf.font = [UIFont systemFontOfSize:16];
        _gender_tf.textColor = [UIColor whiteColor];
        _gender_tf.textAlignment = NSTextAlignmentLeft;
        NSMutableAttributedString *attribuedString = [[NSMutableAttributedString alloc]initWithString:@"Choose your gender"];
        [attribuedString addAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:18],NSForegroundColorAttributeName:RGB(123, 123, 123)} range:NSMakeRange(0, attribuedString.length)];
        _gender_tf.attributedPlaceholder= attribuedString;
        UIView *view1=[[UIView alloc]initWithFrame:CGRectMake(0, 0, 1, 1)];
        _gender_tf.leftView = view1;
        _gender_tf.leftViewMode = UITextFieldViewModeAlways;
    }
    return _gender_tf;
}

- (UIButton *)gender_btn
{
    if(!_gender_btn){
        _gender_btn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_gender_btn addTarget:self action:@selector(actionChooseGenderBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _gender_btn;
}
-(void)actionChooseGenderBtn:(UIButton *)btn
{
    NSLog(@"Choose gender");
    [EditMyPickerView showWithData:@[@"Male",@"Female"] flag:1 tipText:@"Gender" block:^(NSArray * _Nonnull arr) {
        NSString *str = [arr firstObject];
        if([str isEqualToString:@"Male"]){
            self.genderStr = @"1";
        }else if ([str isEqualToString:@"Female"]){
            self.genderStr = @"2";
        }
        self.gender_tf.text = str;
    }];
}

- (UILabel *)age_lab
{
    if (!_age_lab) {
        _age_lab = [[UILabel alloc]init];
        _age_lab.text = @"Age";
        _age_lab.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        _age_lab.font = [UIFont systemFontOfSize:16];
        _age_lab.textAlignment = NSTextAlignmentLeft;
    }
    return _age_lab;
}

- (UILabel *)age_line_lab
{
    if(!_age_line_lab){
        _age_line_lab = [[UILabel alloc]init];
        _age_line_lab.backgroundColor = RGB(60, 60, 60);
    }
    return _age_line_lab;
}
- (UITextField *)age_tf
{
    if (!_age_tf) {
        _age_tf = [[UITextField alloc]init];
        _age_tf.userInteractionEnabled = NO;
        _age_tf.enabled = NO;
        _age_tf.font = [UIFont systemFontOfSize:16];
        _age_tf.textColor = [UIColor whiteColor];
        _age_tf.textAlignment = NSTextAlignmentLeft;
        NSMutableAttributedString *attribuedString = [[NSMutableAttributedString alloc]initWithString:@"Choose your age"];
        [attribuedString addAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:18],NSForegroundColorAttributeName:RGB(123, 123, 123)} range:NSMakeRange(0, attribuedString.length)];
        _age_tf.attributedPlaceholder= attribuedString;
        UIView *view1=[[UIView alloc]initWithFrame:CGRectMake(0, 0, 1, 1)];
        _age_tf.leftView = view1;
        _age_tf.leftViewMode = UITextFieldViewModeAlways;
    }
    return _age_tf;
}

- (UIButton *)age_btn
{
    if(!_age_btn){
        _age_btn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_age_btn addTarget:self action:@selector(actionChooseAgeBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _age_btn;
}
-(void)actionChooseAgeBtn:(UIButton *)btn
{
    NSLog(@"Choose age");
    NSMutableArray *arr = [NSMutableArray array];
    for(int i=18;i<100;i++){
        [arr addObject:[NSString stringWithFormat:@"%d",i]];
    }
    [EditMyPickerView showWithData:[NSArray arrayWithArray:arr] flag:1 tipText:@"Age" block:^(NSArray * _Nonnull arr) {
        NSString *str = [arr firstObject];
        self.age_tf.text = str;
    }];
}
- (UILabel *)location_lab
{
    if (!_location_lab) {
        _location_lab = [[UILabel alloc]init];
        _location_lab.text = @"Location";
        _location_lab.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        _location_lab.font = [UIFont systemFontOfSize:16];
        _location_lab.textAlignment = NSTextAlignmentLeft;
    }
    return _location_lab;
}

- (UILabel *)location_line_lab
{
    if(!_location_line_lab){
        _location_line_lab = [[UILabel alloc]init];
        _location_line_lab.backgroundColor = RGB(60, 60, 60);
    }
    return _location_line_lab;
}
- (UITextField *)location_tf
{
    if (!_location_tf) {
//        _location_tf = [[UITextField alloc]init];
//        _location_tf.userInteractionEnabled = NO;
//        _location_tf.enabled = NO;
//        _location_tf.textAlignment = NSTextAlignmentLeft;
//        _location_tf.textColor = [UIColor whiteColor];
//        _location_tf.font = [UIFont systemFontOfSize:18];
        _location_tf = [[UITextField alloc]init];
        _location_tf.userInteractionEnabled = NO;
        _location_tf.enabled = NO;
        _location_tf.font = [UIFont systemFontOfSize:16];
        _location_tf.textColor = [UIColor whiteColor];
        _location_tf.textAlignment = NSTextAlignmentLeft;
        NSMutableAttributedString *attribuedString = [[NSMutableAttributedString alloc]initWithString:@"Choose your location"];
        [attribuedString addAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:18],NSForegroundColorAttributeName:RGB(123, 123, 123)} range:NSMakeRange(0, attribuedString.length)];
        _location_tf.attributedPlaceholder= attribuedString;
        UIView *view1=[[UIView alloc]initWithFrame:CGRectMake(0, 0, 1, 1)];
        _location_tf.leftView = view1;
        _location_tf.leftViewMode = UITextFieldViewModeAlways;
    }
    return _location_tf;
}

- (UIButton *)location_btn
{
    if(!_location_btn){
        _location_btn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_location_btn addTarget:self action:@selector(actionChooseLocationBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _location_btn;
}
-(void)actionChooseLocationBtn:(UIButton *)btn
{
    NSLog(@"Choose location btn");
    NeighborsSimpleCuteLocationShowView *locationShowView = [[NeighborsSimpleCuteLocationShowView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
    [locationShowView setNeighborsSimpleCuteLocationShowViewSelectBlock:^(NeighborsSimpleCuteResetCountryModel * _Nonnull countryModel, NeighborsSimpleCuteResetCountryModel * _Nonnull statemodel, NeighborsSimpleCuteResetCountryModel * _Nonnull cityModel) {
        self.countryModel = countryModel;
        self.stateModel = statemodel;
        self.cityModel  = cityModel;
        if (IS_EMPTY(self.cityModel.name)) {
            if (IS_EMPTY(self.stateModel.name)) {
                self.location_tf.text = [NSString stringWithFormat:@"%@",countryModel.name];
            }else{
                self.location_tf.text = [NSString stringWithFormat:@"%@, %@",statemodel.name,countryModel.name];
            }
        }else{
            self.location_tf.text = [NSString stringWithFormat:@"%@, %@,  %@",cityModel.name,statemodel.name,countryModel.name];
        }
    }];
    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    NSCParameterAssert(window);
    [window addSubview:locationShowView];
}

-(void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"Welcome";
    [self.view addSubview:self.gender_lab];
    [self.gender_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.top.offset(80);
    }];
    
    [self.view addSubview:self.gender_tf];
    [self.gender_tf mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.gender_lab.mas_bottom).offset(5);
        make.height.offset(40);
    }];
    
    [self.view addSubview:self.gender_line_lab];
    [self.gender_line_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.gender_tf.mas_bottom).offset(2);
        make.height.offset(1);
    }];
    
    [self.view addSubview:self.gender_btn];
    [self.gender_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.gender_lab.mas_top);
        make.bottom.mas_equalTo(self.gender_line_lab.mas_bottom);
    }];
    
    
    [self.view addSubview:self.age_lab];
    [self.age_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.mas_equalTo(self.gender_line_lab.mas_bottom).offset(50);
        make.left.offset(30);
    }];
    
    [self.view addSubview:self.age_tf];
    [self.age_tf mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.age_lab.mas_bottom).offset(5);
        make.height.offset(40);
    }];
    
    [self.view addSubview:self.age_line_lab];
    [self.age_line_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.age_tf.mas_bottom).offset(2);
        make.height.offset(1);
    }];
    
    [self.view addSubview:self.age_btn];
    [self.age_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.age_lab.mas_top);
        make.bottom.mas_equalTo(self.age_line_lab.mas_bottom);
    }];
    
    [self.view addSubview:self.location_lab];
    [self.location_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.mas_equalTo(self.age_line_lab.mas_bottom).offset(50);
        make.left.offset(30);
    }];
    
    [self.view addSubview:self.location_tf];
    [self.location_tf mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.location_lab.mas_bottom).offset(5);
        make.height.offset(40);
    }];
    
    [self.view addSubview:self.location_line_lab];
    [self.location_line_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.location_tf.mas_bottom).offset(2);
        make.height.offset(1);
    }];
    
    [self.view addSubview:self.location_btn];
    [self.location_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.location_lab.mas_top);
        make.bottom.mas_equalTo(self.location_line_lab.mas_bottom);
    }];
    
    [self.view addSubview:self.continue_btn];
    [self.continue_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.top.mas_equalTo(self.location_line_lab.mas_bottom).offset(50);
        make.width.offset(240);
        make.height.offset(50);
    }];

//    NSMutableAttributedString *attribuedString = [[NSMutableAttributedString alloc]initWithString:@"Choose your gender"];
//    [attribuedString addAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:18],NSForegroundColorAttributeName:RGB(123, 123, 123)} range:NSMakeRange(0, attribuedString.length)];
//    self.gender_tf.attributedPlaceholder= attribuedString;
//    UIView *view1 =[[UIView alloc]initWithFrame:CGRectMake(0, 0, 1, 1)];
//    self.gender_tf.leftView = view1;
//    self.gender_tf.leftViewMode=UITextFieldViewModeAlways;
//
//    NSMutableAttributedString *attribuedString2 = [[NSMutableAttributedString alloc]initWithString:@"Choose your age"];
//    [attribuedString2 addAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:18],NSForegroundColorAttributeName:RGB(123, 123, 123)} range:NSMakeRange(0, attribuedString2.length)];
//    self.age_tf.attributedPlaceholder= attribuedString2;
//    UIView *view2 =[[UIView alloc]initWithFrame:CGRectMake(0, 0, 1, 1)];
//    self.age_tf.leftView = view2;
//    self.age_tf.leftViewMode=UITextFieldViewModeAlways;
//
//    NSMutableAttributedString *attribuedString3 = [[NSMutableAttributedString alloc]initWithString:@"Choose your location"];
//    [attribuedString3 addAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:18],NSForegroundColorAttributeName:RGB(123, 123, 123)} range:NSMakeRange(0, attribuedString3.length)];
//    self.location_tf.attributedPlaceholder= attribuedString3;
//    UIView *view3 =[[UIView alloc]initWithFrame:CGRectMake(0, 0, 1, 1)];
//    self.location_tf.leftView = view3;
//    self.location_tf.leftViewMode=UITextFieldViewModeAlways;
}

@end

/// NeighborsSimpleCuteHomeRootController
@interface NeighborsSimpleCuteHomeRootController()<SGPageTitleViewDelegate, SGPageContentCollectionViewDelegate>
@property (nonatomic, strong) SGPageTitleView *pageTitleView;
@property (nonatomic, strong) SGPageContentCollectionView *pageContentCollectionView;
@property (nonatomic, strong) NSDictionary *countDic;
@property (nonatomic, strong) NeighborsSimpleCuteHomeMainController *takenvc;
@property (nonatomic, strong) NeighborsSimpleCuteHomeVoiceController *notfilmedvc;
@property (nonatomic, assign)BOOL isShowUser;
@property (nonatomic,strong)UIView *topView;
@property (nonatomic,strong)UIButton *leftBtn;
@property (nonatomic,strong)UIButton *rightBtn;
@end
@implementation NeighborsSimpleCuteHomeRootController
- (NeighborsSimpleCuteHomeMainController *)takenvc
{
    if (!_takenvc) {
        _takenvc = [[NeighborsSimpleCuteHomeMainController alloc]init];
    }
    return _takenvc;
}
- (NeighborsSimpleCuteHomeVoiceController *)notfilmedvc
{
    if (!_notfilmedvc) {
        _notfilmedvc = [[NeighborsSimpleCuteHomeVoiceController alloc]init];
    }
    return _notfilmedvc;
}
/// right bnt
/// @param btn right btn
-(void)actionRihgtBtn:(UIButton *)btn
{
    [self.rightBtn gradientButtonWithSize:CGSizeMake(170/2, 30) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    [self.rightBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    [self.leftBtn gradientButtonWithSize:CGSizeMake(170/2, 30) colorArray:@[(id)RGB(50, 50,50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    [self.leftBtn setTitleColor:RGB(200, 200, 200) forState:UIControlStateNormal];
    [self addChildViewController:self.notfilmedvc];
    self.notfilmedvc.view.frame = self.view.bounds;
    [self.view addSubview:self.notfilmedvc.view];
    [self.notfilmedvc didMoveToParentViewController:self];
}
/// left btn
/// @param btn left btn
-(void)actionLeftBtn:(UIButton *)btn
{
    [self.leftBtn gradientButtonWithSize:CGSizeMake(170/2, 30) colorArray:@[(id)RGB(235, 142, 63),(id)RGB(250, 204, 72)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    [self.leftBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    [self.rightBtn gradientButtonWithSize:CGSizeMake(170/2, 30) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    [self.rightBtn setTitleColor:RGB(200, 200,200) forState:UIControlStateNormal];
    [self addChildViewController:self.takenvc];
    self.takenvc.view.frame = self.view.bounds;
    [self.view addSubview:self.takenvc.view];
    [self.takenvc didMoveToParentViewController:self];
}
-(void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
}
- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = NSC_BGThemColor;
    [self NeighborsSimpleCuteSetLeftButton:[UIImage imageNamed:TUIKitResource(@"n_main_setting")]];
    [self NeighborsSimpleCuteSetRightButton:[UIImage imageNamed:TUIKitResource(@"n_main_message")]];
    self.topView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 170, 31)];
    self.topView.backgroundColor =  RGB(200, 200, 200);
    self.topView.layer.cornerRadius = 5.0f;
    self.topView.layer.masksToBounds = YES;
    self.topView.layer.borderColor = RGB(200, 200, 200).CGColor;
    self.topView.layer.borderWidth = 1.0f;
    self.leftBtn = [[UIButton alloc]initWithFrame:CGRectMake(1, 0.5, 170/2, 30)];
    [self.leftBtn setTitle:@"SUPRISE" forState:UIControlStateNormal];
    [self.leftBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    self.leftBtn.titleLabel.font = [UIFont systemFontOfSize:15];
    [self.leftBtn addTarget:self action:@selector(actionLeftBtn:) forControlEvents:UIControlEventTouchUpInside];
    self.rightBtn = [[UIButton alloc]initWithFrame:CGRectMake(170/2+1, 0.5, 170/2, 30)];
    [self.rightBtn setTitle:@"POPULAR" forState:UIControlStateNormal];
    [self.rightBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    self.rightBtn.titleLabel.font = [UIFont systemFontOfSize:15];
    [self.rightBtn addTarget:self action:@selector(actionRihgtBtn:) forControlEvents:UIControlEventTouchUpInside];
    self.navigationItem.titleView = self.topView;
    [self.topView addSubview:self.leftBtn];
    [self.topView addSubview:self.rightBtn];
    [self.leftBtn gradientButtonWithSize:CGSizeMake(170/2, 30) colorArray:@[(id)RGB(235, 142, 63),(id)RGB(250, 204, 72)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    [self.leftBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    [self.rightBtn gradientButtonWithSize:CGSizeMake(170/2, 30) colorArray:@[(id)RGB(0, 0, 0),(id)RGB(0, 0, 0)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    [self.rightBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    [self.view addSubview:self.notfilmedvc.view];
    [self actionRihgtBtn:nil];
    self.showMsgLab = YES;
}
- (void)onNeighborsSimpleCuteLeftBackBtn:(UIButton *)btn
{   // zf todo 要修改的东西
    NeighborsSimpleCuteSettingOtherMainController *settingvc = [[NeighborsSimpleCuteSettingOtherMainController alloc]init];
    settingvc.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:settingvc animated:YES];
}

- (void)onNeighborsSimpleCuteRightBackBtn:(UIButton *)btn
{
    NeighborsSimpleCuteMessageMainController *messagevc = [[NeighborsSimpleCuteMessageMainController alloc]init];
    messagevc.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:messagevc animated:YES];
//    CXMessageConverListtionController *messageConverListVc = [[CXMessageConverListtionController alloc]init];
//    messageConverListVc.hidesBottomBarWhenPushed = YES;
//    [self.navigationController pushViewController:messageConverListVc animated:YES];
}
@end
@interface NeighborsSimpleCuteHomeVoiceController () <UICollectionViewDelegate,UICollectionViewDataSource>
@property (nonatomic,strong)UICollectionView  *voiceCollectionView;
@property (nonatomic,strong)NSMutableArray    *vocieListArr;
@end

@implementation NeighborsSimpleCuteHomeVoiceController
- (NSMutableArray *)vocieListArr
{
    if (!_vocieListArr) {
        _vocieListArr =[NSMutableArray array];
    }
    return _vocieListArr;
}
- (UICollectionView *)voiceCollectionView
{
    if (!_voiceCollectionView) {
        UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc]init];
        flow.scrollDirection = UICollectionViewScrollDirectionVertical;
        flow.minimumLineSpacing = 10;//行间距
        flow.minimumInteritemSpacing = 10;//列间距
        _voiceCollectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flow];
        _voiceCollectionView.backgroundColor = [UIColor clearColor];
        _voiceCollectionView.showsVerticalScrollIndicator = NO;
        _voiceCollectionView.showsHorizontalScrollIndicator = NO;
        _voiceCollectionView.delegate = self;
        _voiceCollectionView.dataSource = self;
        [_voiceCollectionView registerClass:[NeighborsSimpleCuteVoiceContentViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteVoiceContentViewCell"];
    }
    return _voiceCollectionView;
}
-(void)viewDidLoad
{
    [super viewDidLoad];
    [self setupVoiceData];
    [self.view addSubview:self.voiceCollectionView];
    [self.voiceCollectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
}

-(void)setupVoiceData{
    NSMutableDictionary *param  = [NSMutableDictionary dictionary];
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    param[@"appType"] = @"85"; //popular系统的用户列表
    param[@"clientNum"] = @"81003001";
    if (model.userInfo.gender == 0) {
        param[@"gender"] = @"0";
    }else if(model.userInfo.gender == 1){
        param[@"gender"] = @"2";
    }else if(model.userInfo.gender == 2){
        param[@"gender"] = @"1";
    }
    NSString *baseurl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/bottle/bottleList"];
    NSLog(@"param:%@",param);
    NSLog(@"baseUrl:%@",baseurl);
    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseurl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"response.data11111111:%@",response.data);
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            [self.vocieListArr removeAllObjects];
            self.vocieListArr  = [NeighborsSimpleCuteHomeVoiceModel mj_objectArrayWithKeyValuesArray:response.data];
            NSLog(@"self.homeAllListArr.count:%lu",(unsigned long)self.vocieListArr.count);
            [self.voiceCollectionView reloadData];
        }else{
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}

#pragma mark --- voiceCollectionView 代理方法
-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 1;
}
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return self.vocieListArr.count;
}
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    return UIEdgeInsetsMake(10, 10, 10, 10);
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    return CGSizeMake((IPHONE_WIDTH - 31)/2, 230);
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    NeighborsSimpleCuteVoiceContentViewCell *contentCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteVoiceContentViewCell" forIndexPath:indexPath];
    NeighborsSimpleCuteHomeVoiceModel *model = self.vocieListArr[indexPath.row];
    NSString *imageBaseUrl = [NSString stringWithFormat:@"%@/",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th];
    NSLog(@"imageBaseUrl:%@",imageBaseUrl);
    NSString *imageBaseUrl2 =  [NSString stringWithFormat:@"%@%@",imageBaseUrl,model.userInfo.imgUrl];
    NSLog(@"imageBaseUrl2:%@", imageBaseUrl2);
    [contentCell.bgImg sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,model.userInfo.imgUrl]] placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
    return contentCell;
}
-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
    NeighborsSimpleCuteHomeVoiceModel *model = self.vocieListArr[indexPath.row];
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"bottleId"] = @(model.id);
    NSString *baseUrl = [NSString stringWithFormat:@"%@api/bottle/open/%@",NSC_Base_Url,@(model.id)];
    NSLog(@"param:%@",param);
    NSLog(@"baseurl:%@",baseUrl);
    NeighborsSimpleCuteVoicePlayView *playView= [[NeighborsSimpleCuteVoicePlayView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
    playView.voiceModel = model;
    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    NSCParameterAssert(window);
    [window addSubview:playView];
    [playView setNeighborsSimpleCuteVoicePlayViewCallBlock:^{
        NeighborsSimpleCuteVideoCallView *callView = [[NeighborsSimpleCuteVideoCallView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
        callView.voiceModel = model;
        UIWindow *window = [UIApplication sharedApplication].keyWindow;
        NSCParameterAssert(window);
        [window addSubview:callView];
    }];
    [playView setNeighborsSimpleCuteVoicePlayViewReportBlock:^{
        [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) {
            if (granted) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    // Microphone enabled code‘
                    NeighborsSimpleCuteSettingFeedBackController *reportShowVc = [[NeighborsSimpleCuteSettingFeedBackController alloc]init];
                    reportShowVc.hidesBottomBarWhenPushed = YES;
                    [reportShowVc setNeighborsSimpleCuteSettingFeedBackControllerBackBlock:^{
                        playView.hidden = NO;
                    }];
                    [self.navigationController pushViewController:reportShowVc animated:YES];
                });

            } else {
            }
        }];
     
    }];
    [playView setNeighborsSimpleCuteVoicePlayViewChatBlock:^{
        // 聊天界面功
        NeighborsSimpleCuteMessageChatMainController *messageChatVc = [[NeighborsSimpleCuteMessageChatMainController alloc]init];
        messageChatVc.hidesBottomBarWhenPushed = YES;
        NSString *imageBaseUrl = [NSString stringWithFormat:@"%@/",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th];
        messageChatVc.IconStr = [NSString stringWithFormat:@"%@%@",imageBaseUrl,model.userInfo.imgUrl];
        messageChatVc.NameStr = model.userInfo.nickName;
        [self.navigationController pushViewController:messageChatVc animated:YES];
        //NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
//        ChatViewController *chat = [[ChatViewController alloc] init];
//        chat.userId              = [NSString stringWithFormat:@"%ld",(long)model.userId];
//        TUIConversationCellData *conversationData = [[TUIConversationCellData alloc] init];
//        conversationData.userID = model.userInfo.tempStr20th;
//        conversationData.title = model.userInfo.nickName;
//        chat.conversationData = conversationData;
//        [self.navigationController pushViewController:chat animated:YES];
        /*
        NSLog(@"userModel.data.userInfo.memberLevel:%ld",(long)userModel.userInfo.memberLevel);
        if (userModel.userInfo.memberLevel == 1) {
            //是会员
            ChatViewController *chat = [[ChatViewController alloc] init];
            chat.userId              = [NSString stringWithFormat:@"%ld",(long)model.userId];
            TUIConversationCellData *conversationData = [[TUIConversationCellData alloc] init];
            conversationData.userID = model.userInfo.tempStr20th;
            conversationData.title = model.userInfo.nickName;
            chat.conversationData = conversationData;
            [self.navigationController pushViewController:chat animated:YES];
        }else{
            //不是会员
            MJWeakSelf
            IMUpdateGrdateView *alertShowView = [[IMUpdateGrdateView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
            UIWindow *window = [UIApplication sharedApplication].keyWindow;
            [alertShowView setIMUpdateGrdateViewUpgradeBlock:^{
                NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
                BOOL isVPN = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_VPN];
                BOOL isCountry = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_COUNTRY];
                       if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th isEqualToString:@"1"] || [userModel.appClient.spare13th isEqualToString:@"1"] || isVPN == YES  || isCountry == YES) {
                           ZFMemberUpgrdeController *memberupgrdevc = [[ZFMemberUpgrdeController alloc]init];
                           memberupgrdevc.hidesBottomBarWhenPushed = YES;
                           [weakSelf.navigationController pushViewController:memberupgrdevc animated:YES];
                       }else{
                           //H5支付功能
                           NSString *spare12th = userModel.appClient.spare12th;
                           NSLog(@"spare12th:%@",spare12th);
                           NSString *ipContent = userModel.userInfo.ipContent;
                           NSLog(@"ipContent:%@",ipContent);
                           NSDictionary *dics = [ipContent getCxshareldstaretlToDictionary];
                           NSLog(@"ip:%@",dics[@"ip"]);
                           NSString *RealUrl = [NSString stringWithFormat:@"%@ip=%@?userid=%ld?token=%@",spare12th,dics[@"ip"],(long)userModel.userInfo.userId,userModel.tokenDto.token];
                           NSLog(@"RealUrl:%@",RealUrl);
                           
                           NeighborsSimpleCuteBaseWebController *vc = [[NeighborsSimpleCuteBaseWebController alloc]init];
                           vc.webTitle = @"Upgrade";
                           vc.loadType = WKWebLoadTypeWebURLString;
                           vc.URLString = RealUrl;
                           [weakSelf.navigationController pushViewController:vc animated:YES];
                }
            }];
            [alertShowView setIMUpdateGrdateViewUpgradeDissmissBlock:^{
                
            }];
            NSCParameterAssert(window);
            [window addSubview:alertShowView];
//            //弹窗功能
//            NSString *setSr = userModel.appClient.stateSet;
//            NSLog(@"setStr:%@",setSr);
//            NSArray *array = [setSr componentsSeparatedByString:@";"];
//            NSLog(@"array[0]:%@",array[0]);
//            NSLog(@"array[1]:%@",array[1]);
//            VerifyAccountUpdateView *acctounView = [[VerifyAccountUpdateView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
//            acctounView.titleStr = array[0];
//            UIWindow *window = [UIApplication sharedApplication].keyWindow;
//            [acctounView setVerifyAccountUpdateViewMessageBlock:^{
//            BOOL isVPN = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_VPN];
//            BOOL isCountry = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_COUNTRY];
//                    if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th isEqualToString:@"1"]|| isVPN == YES || isCountry == YES)
//                               {
//                                   //关闭界面，不触发什么
//                                   NSLog(@"关闭界面，不触发什么");
//                               }else{
//                                   NSString *spare18th = userModel.appClient.spare18th;
//                                   NSLog(@"spare18th:%@",spare18th);
//                                   NSArray *spare18thArr = [spare18th componentsSeparatedByString:@";"];
//                                   NSLog(@"spare18thArr.count:%lu",(unsigned long)spare18thArr.count);
//                                   NSString *ipContent = userModel.userInfo.ipContent;
//                                   NSLog(@"ipContent:%@",ipContent);
//                                   if ([ipContent containsString:@"美国"] || [ipContent containsString:@"United States"] || [ipContent containsString:@"America"]) {
//                                        //是美国人
//                                       NSLog(@"美国人");
//                                       //gender 1:是女 ， 2是男 0:全部
//                                       NSString *gender = [NSString stringWithFormat:@"%ld",(long)userModel.userInfo.gender];
//                                       NSLog(@"gender:%@",gender);
//                                       if ([gender isEqualToString:@"2"]) {
//                                           //女 第二个聊天
//                                           NSString *secondStr = spare18thArr[1];
//                                           NSLog(@"secondStr:%@",secondStr);
//                                           NSArray *secondArr = [secondStr componentsSeparatedByString:@","];
//                                           NSLog(@"secondArr[0]:%@",secondArr[0]);
//                                           NSLog(@"secondArr[1]:%@",secondArr[1]);
//                                           ChatViewController *chat = [[ChatViewController alloc] init];
//                                           chat.userId              = secondArr[2];
//                                           TUIConversationCellData *conversationData = [[TUIConversationCellData alloc] init];
//                                           conversationData.userID = secondArr[0];
//                                           conversationData.title = secondArr[1];
//                                           chat.conversationData = conversationData;
//                                           [self.navigationController pushViewController:chat animated:YES];
//
//                                       }else if([gender isEqualToString:@"1"]){
//                                           //男
//                                           NSString *firstStr = spare18thArr[0];
//                                           NSLog(@"firstStr:%@",firstStr);
//                                           NSArray *firstArr = [firstStr componentsSeparatedByString:@","];
//                                           NSLog(@"firstArr[0]:%@",firstArr[0]);
//                                           NSLog(@"firstArr[1]:%@",firstArr[1]);
//                                           ChatViewController *chat = [[ChatViewController alloc] init];
//                                           chat.userId              = firstArr[2];
//                                           TUIConversationCellData *conversationData = [[TUIConversationCellData alloc] init];
//                                           conversationData.userID = firstArr[0];
//                                           conversationData.title = firstArr[1];
//                                           chat.conversationData = conversationData;
//                                           [self.navigationController pushViewController:chat animated:YES];
//                                       }else{
//                                           //全部
//                                           NSString *fiveStr = spare18thArr[4];
//                                           NSLog(@"fiveStr:%@",fiveStr);
//                                           NSArray *fiveArr = [fiveStr componentsSeparatedByString:@","];
//                                           NSLog(@"fiveArr[0]:%@",fiveArr[0]);
//                                           NSLog(@"fiveArr[1]:%@",fiveArr[1]);
//                                           ChatViewController *chat = [[ChatViewController alloc] init];
//                                           chat.userId              = fiveArr[2];
//                                           TUIConversationCellData *conversationData = [[TUIConversationCellData alloc] init];
//                                           conversationData.userID = fiveArr[0];
//                                           conversationData.title = fiveArr[1];
//                                           chat.conversationData = conversationData;
//                                           [self.navigationController pushViewController:chat animated:YES];
//                                       }
//                                   }else{
//                                       //不是美国人
//                                       NSLog(@"不是美国人");
//                                       NSString *gender = [NSString stringWithFormat:@"%ld",(long)userModel.userInfo.gender];
//                                       NSLog(@"gender:%@",gender);
//                                       if ([gender isEqualToString:@"2"]) {
//                                           //女
//                                           NSString *fourStr = spare18thArr[3];
//                                           NSLog(@"fourStr:%@",fourStr);
//                                           NSArray *fourArr = [fourStr componentsSeparatedByString:@","];
//                                           NSLog(@"fourArr[0]:%@",fourArr[0]);
//                                           NSLog(@"fourArr[1]:%@",fourArr[1]);
//                                           ChatViewController *chat = [[ChatViewController alloc] init];
//                                           chat.userId              = fourArr[2];
//                                           TUIConversationCellData *conversationData = [[TUIConversationCellData alloc] init];
//                                           conversationData.userID = fourArr[0];
//                                           conversationData.title = fourArr[1];
//                                           chat.conversationData = conversationData;
//                                           [self.navigationController pushViewController:chat animated:YES];
//                                       }else if([gender isEqualToString:@"1"]){
//                                           //男
//                                           NSString *thirdStr = spare18thArr[2];
//                                           NSLog(@"thirdStr:%@",thirdStr);
//                                           NSArray *thirdArr = [thirdStr componentsSeparatedByString:@","];
//                                           NSLog(@"thirdArr[0]:%@",thirdArr[0]);
//                                           NSLog(@"thirdArr[1]:%@",thirdArr[1]);
//                                           ChatViewController *chat = [[ChatViewController alloc] init];
//                                           chat.userId              = thirdArr[2];
//                                           TUIConversationCellData *conversationData = [[TUIConversationCellData alloc] init];
//                                           conversationData.userID = thirdArr[0];
//                                           conversationData.title = thirdArr[1];
//                                           chat.conversationData = conversationData;
//                                           [self.navigationController pushViewController:chat animated:YES];
//                                       }else{
//                                           //全部
//                                           NSString *fiveStr = spare18thArr[4];
//                                           NSLog(@"fiveStr:%@",fiveStr);
//                                           NSArray *fiveArr = [fiveStr componentsSeparatedByString:@","];
//                                           NSLog(@"fiveArr[0]:%@",fiveArr[0]);
//                                           NSLog(@"fiveArr[1]:%@",fiveArr[1]);
//                                           ChatViewController *chat = [[ChatViewController alloc] init];
//                                           chat.userId              = fiveArr[2];
//                                           TUIConversationCellData *conversationData = [[TUIConversationCellData alloc] init];
//                                           conversationData.userID = fiveArr[0];
//                                           conversationData.title = fiveArr[1];
//                                           chat.conversationData = conversationData;
//                                           [self.navigationController pushViewController:chat animated:YES];
//                                       }
//                                   }
//                               }
//                    }];
//            NSCParameterAssert(window);
//            [window addSubview:acctounView];
         */
//        }
    }];
    //删除功能
    [playView setNeighborsSimpleCuteVoicePlayViewDelBlock:^{
        [self.vocieListArr removeObject:model];
        [self.voiceCollectionView reloadData];
    }];
    //关闭页面功能
    [playView setNeighborsSimpleCuteVoicePlayViewCloseBlock:^{
        //[self.vocieListArr removeObject:model];
        //[self.voiceCollectionView reloadData];
    }];
}
@end

@interface NeighborsSimpleCuteHomeMainController ()
@property (nonatomic,strong)UIImageView *titleBgView;
@property (nonatomic,strong)UIView *contentBgView;
@property (nonatomic,strong)UIImageView *contentBgImagView;
@property (nonatomic,strong)UIView *bottomBgView;
@property (nonatomic,strong)UIButton *refreshBtn;
@property (nonatomic,strong)UIButton *sortBtn;
@property (nonatomic,strong)UIButton *sendBtn;

@property (nonatomic,strong)UIView *first_view;
@property (nonatomic,strong)UIImageView *first_bg_img;
@property (nonatomic,strong)UIImageView *first_img;
@property (nonatomic,strong)UIButton *first_btn;

@property (nonatomic,strong)UIView *second_view;
@property (nonatomic,strong)UIImageView *second_bg_img;
@property (nonatomic,strong)UIImageView *second_img;
@property (nonatomic,strong)UIButton *second_btn;

@property (nonatomic,strong)UIView *third_view;
@property (nonatomic,strong)UIImageView *third_bg_img;
@property (nonatomic,strong)UIImageView *third_img;
@property (nonatomic,strong)UIButton *third_btn;

@property (nonatomic,strong)UIView *four_view;
@property (nonatomic,strong)UIImageView *four_bg_img;
@property (nonatomic,strong)UIImageView *four_img;
@property (nonatomic,strong)UIButton *four_btn;

@property (nonatomic,strong)UIView *five_view;
@property (nonatomic,strong)UIImageView *five_bg_img;
@property (nonatomic,strong)UIImageView *five_img;
@property (nonatomic,strong)UIButton *five_btn;

@property (nonatomic,strong)UIView *six_view;
@property (nonatomic,strong)UIImageView *six_bg_img;
@property (nonatomic,strong)UIImageView *six_img;
@property (nonatomic,strong)UIButton *six_btn;

@property (nonatomic,strong)UIView *seven_view;
@property (nonatomic,strong)UIImageView *seven_bg_img;
@property (nonatomic,strong)UIImageView *seven_img;
@property (nonatomic,strong)UIButton *seven_btn;

@property (nonatomic,strong)NSMutableArray *firstListArr;
@property (nonatomic,strong)NSMutableArray *secondListArr;
@property (nonatomic,strong)NSTimer *timer;
@property (nonatomic,strong)NSTimer *timer2;
@property (nonatomic,assign)NSInteger cutDown;
@property (nonatomic,assign)BOOL isRefresh;
@property (nonatomic,strong)NSMutableArray *homeAllListArr;
@property (nonatomic,strong)NSMutableArray *randomListArr;

@end

@implementation NeighborsSimpleCuteHomeMainController

- (NSMutableArray *)homeAllListArr
{
    if (!_homeAllListArr) {
        _homeAllListArr = [NSMutableArray array];
    }
    return _homeAllListArr;
}

- (NSMutableArray *)randomListArr
{
    if (!_randomListArr) {
        _randomListArr = [NSMutableArray array];
    }
    return _randomListArr;
}

- (NSMutableArray *)firstListArr
{
    if (!_firstListArr) {
        _firstListArr = [NSMutableArray array];
    }
    return  _firstListArr;
}
- (NSMutableArray *)secondListArr
{
    if (!_secondListArr) {
        _secondListArr = [NSMutableArray array];
    }
    return _secondListArr;
}
- (NSTimer *)timer2
{
    if (!_timer2) {
        _timer2 = [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(updateProgress2) userInfo:nil repeats:true];
    }
    return _timer2;
}
-(void)updateProgress2
{
    NSString *imageBaseUrl = [NSString stringWithFormat:@"%@/",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th];
    NSLog(@"self.cutDownself.cutDownself.cutDown:%ld",(long)self.cutDown);
    self.cutDown --;
    if (self.cutDown == 0) {
        [SVProgressHUD dismiss];
        [self.timer2 setFireDate:[NSDate distantFuture]];
        return;
    }
        if (self.homeAllListArr.count >= 7) {
            if (self.cutDown == 1) {
                self.six_view.hidden = NO;
                NeighborsSimpleCuteHomeVoiceModel *svoicemodel5 = self.homeAllListArr[5];
                [self.six_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel5.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                if (svoicemodel5.audioUrl.length > 0) {
                    self.six_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                }else{
                    self.six_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                  }
            }else if(self.cutDown == 2){
                self.second_view.hidden = NO;
                NeighborsSimpleCuteHomeVoiceModel *svoicemodel2 = self.homeAllListArr[1];
                [self.second_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel2.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                if (svoicemodel2.audioUrl.length > 0) {
                    self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                }else{
                    self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                }
            }else if(self.cutDown == 3){
                self.five_view.hidden = NO;
                NeighborsSimpleCuteHomeVoiceModel *svoicemodel4 = self.homeAllListArr[4];
                [self.five_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel4.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                if (svoicemodel4.audioUrl.length > 0) {
                    self.five_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                }else{
                    self.five_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                }
            }else if(self.cutDown == 4){
                self.four_view.hidden = NO;
                NeighborsSimpleCuteHomeVoiceModel *svoicemodel3 = self.homeAllListArr[3];
                [self.four_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel3.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                if (svoicemodel3.audioUrl.length > 0) {
                    self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                }else{
                    self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                }
            }else if(self.cutDown == 5){
                self.third_view.hidden = NO;
                NeighborsSimpleCuteHomeVoiceModel *svoicemodel2 = self.homeAllListArr[2];
                [self.third_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel2.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                if (svoicemodel2.audioUrl.length > 0) {
                    self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                }else{
                    self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                }
            }else if(self.cutDown == 6){
                self.first_view.hidden = NO;
                NeighborsSimpleCuteHomeVoiceModel *svoicemodel1 = self.homeAllListArr[0];
                [self.first_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel1.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                if (svoicemodel1.audioUrl.length > 0) {
                    self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                }else{
                    self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                }
            }else if(self.cutDown == 7){
                self.seven_view.hidden = NO;
                NeighborsSimpleCuteHomeVoiceModel *svoicemodel6 = self.homeAllListArr[6];
                [self.seven_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel6.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                if (svoicemodel6.audioUrl.length > 0) {
                    self.seven_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                }else{
                    self.seven_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                }
            }
        }else{
             if(self.homeAllListArr.count == 1){
                 if (self.cutDown == 1) {
                     self.first_view.hidden = NO;
                     NeighborsSimpleCuteHomeVoiceModel *svoicemodel1 = self.homeAllListArr[0];
                     [self.first_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel1.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                     if (svoicemodel1.audioUrl.length > 0) {
                         self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                     }else{
                         self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                     }
                 }
                
            }else if(self.homeAllListArr.count == 2){
                if (self.cutDown == 1) {
                    self.first_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel1 = self.homeAllListArr[0];
                    [self.first_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel1.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel1.audioUrl.length > 0) {
                        self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }else if(self.cutDown ==2){
                    self.second_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel2 = self.homeAllListArr[1];
                    [self.second_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel2.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel2.audioUrl.length > 0) {
                        self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }
            }else if(self.homeAllListArr.count == 3){
                if (self.cutDown == 1) {
                    self.first_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel1 = self.homeAllListArr[0];
                    [self.first_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel1.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel1.audioUrl.length > 0) {
                        self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }else if(self.cutDown ==2){
                    self.second_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel2 = self.homeAllListArr[1];
                    [self.second_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel2.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel2.audioUrl.length > 0) {
                        self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }else if(self.cutDown == 3){
                    self.third_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel3 = self.homeAllListArr[2];
                    [self.third_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel3.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel3.audioUrl.length > 0) {
                        self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }
            }else if(self.homeAllListArr.count == 4){
                if (self.cutDown == 1) {
                    self.first_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel1 = self.homeAllListArr[0];
                    [self.first_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel1.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel1.audioUrl.length > 0) {
                        self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }else if(self.cutDown ==2){
                    self.second_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel2 = self.homeAllListArr[1];
                    [self.second_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel2.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel2.audioUrl.length > 0) {
                        self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }else if(self.cutDown == 3){
                    self.third_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel3 = self.homeAllListArr[2];
                    [self.third_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel3.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel3.audioUrl.length > 0) {
                        self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }else if(self.cutDown == 4){
                    self.four_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel4 = self.homeAllListArr[3];
                    [self.four_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel4.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel4.audioUrl.length > 0) {
                        self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }
            }else if(self.homeAllListArr.count == 5){
                if (self.cutDown == 1) {
                    self.first_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel1 = self.homeAllListArr[0];
                    [self.first_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel1.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel1.audioUrl.length > 0) {
                        self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }else if(self.cutDown ==2){
                    self.second_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel2 = self.homeAllListArr[1];
                    [self.second_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel2.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel2.audioUrl.length > 0) {
                        self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }else if(self.cutDown == 3){
                    self.third_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel3 = self.homeAllListArr[2];
                    [self.third_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel3.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel3.audioUrl.length > 0) {
                        self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }else if(self.cutDown == 4){
                    self.four_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel4 = self.homeAllListArr[3];
                    [self.four_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel4.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel4.audioUrl.length > 0) {
                        self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }else if(self.cutDown == 5){
                    self.five_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel5 = self.homeAllListArr[4];
                    [self.five_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel5.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel5.audioUrl.length > 0) {
                        self.five_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.five_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }
                }
            }else if(self.homeAllListArr.count == 6){
                if (self.cutDown == 1) {
                    self.first_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel1 = self.homeAllListArr[0];
                    [self.first_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel1.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel1.audioUrl.length > 0) {
                        self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }else if(self.cutDown ==2){
                    self.second_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel2 = self.homeAllListArr[1];
                    [self.second_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel2.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel2.audioUrl.length > 0) {
                        self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }else if(self.cutDown == 3){
                    self.third_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel3 = self.homeAllListArr[2];
                    [self.third_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel3.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel3.audioUrl.length > 0) {
                        self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }else if(self.cutDown == 4){
                    self.four_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel4 = self.homeAllListArr[3];
                    [self.four_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel4.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel4.audioUrl.length > 0) {
                        self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }else if(self.cutDown == 5){
                    self.five_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel5 = self.homeAllListArr[4];
                    [self.five_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel5.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel5.audioUrl.length > 0) {
                        self.five_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.five_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }else if(self.cutDown == 6){
                    self.six_view.hidden = NO;
                    NeighborsSimpleCuteHomeVoiceModel *svoicemodel6 = self.homeAllListArr[5];
                    [self.six_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel6.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
                    if (svoicemodel6.audioUrl.length > 0) {
                        self.six_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
                    }else{
                        self.six_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
                    }
                }
        }
    }
    
}
-(NSTimer *)timer{
    if (!_timer) {
        _timer=[NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(updateProgress) userInfo:nil repeats:true];
    }
    return _timer;
}
-(void)updateProgress
{

}

- (UIView *)seven_view
{
    if (!_seven_view) {
        _seven_view = [[UIView alloc]init];
        _seven_view.hidden = YES;
    }
    return _seven_view;
}

- (UIImageView *)seven_bg_img
{
    if (!_seven_bg_img) {
        _seven_bg_img = [[UIImageView alloc]init];
        _seven_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        _seven_bg_img.contentMode = UIViewContentModeScaleAspectFit;
    }
    return _seven_bg_img;
}

- (UIImageView *)seven_img
{
    if (!_seven_img) {
        _seven_img = [[UIImageView alloc]init];
        _seven_img.image = [UIImage imageNamed:TUIKitResource(@"test")];
        _seven_img.contentMode = UIViewContentModeScaleAspectFill;
        _seven_img.layer.cornerRadius = 15.0f;
        _seven_img.layer.masksToBounds = YES;
    }
    return _seven_img;
}
- (UIButton *)seven_btn
{
    if (!_seven_btn) {
        _seven_btn = [[UIButton alloc]init];
        [_seven_btn addTarget:self action:@selector(actionactionPlayVoiceBtnBtn:) forControlEvents:UIControlEventTouchUpInside];
        _seven_btn.tag = 6;
    }
    return _seven_btn;
}

- (UIView *)six_view
{
    if (!_six_view) {
        _six_view = [[UIView alloc]init];
        _six_view.hidden = YES;
    }
    return _six_view;
}

- (UIImageView *)six_bg_img
{
    if (!_six_bg_img) {
        _six_bg_img = [[UIImageView alloc]init];
        _six_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        _six_bg_img.contentMode = UIViewContentModeScaleAspectFit;
    }
    return _six_bg_img;
}

- (UIImageView *)six_img
{
    if (!_six_img) {
        _six_img = [[UIImageView alloc]init];
        _six_img.image = [UIImage imageNamed:TUIKitResource(@"test")];
        _six_img.contentMode = UIViewContentModeScaleAspectFill;
        _six_img.layer.cornerRadius = 15.0f;
        _six_img.layer.masksToBounds = YES;
    }
    return _six_img;
}

- (UIButton *)six_btn
{
    if (!_six_btn) {
        _six_btn = [[UIButton alloc]init];
        [_six_btn addTarget:self action:@selector(actionactionPlayVoiceBtnBtn:) forControlEvents:UIControlEventTouchUpInside];
        _six_btn.tag = 5;
    }
    return _six_btn;
}

- (UIView *)five_view
{
    if (!_five_view) {
        _five_view = [[UIView alloc]init];
        _five_view.hidden = YES;
    }
    return _five_view;
}
- (UIImageView *)five_bg_img
{
    if (!_five_bg_img) {
        _five_bg_img = [[UIImageView alloc]init];
        _five_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        _five_bg_img.contentMode = UIViewContentModeScaleAspectFit;
    }
    return _five_bg_img;
}

- (UIImageView *)five_img
{
    if (!_five_img) {
        _five_img = [[UIImageView alloc]init];
        _five_img.image = [UIImage imageNamed:TUIKitResource(@"test")];
        _five_img.contentMode = UIViewContentModeScaleAspectFill;
        _five_img.layer.cornerRadius = 15.0f;
        _five_img.layer.masksToBounds = YES;
    }
    return _five_img;
}

- (UIButton *)five_btn
{
    if (!_five_btn) {
        _five_btn = [[UIButton alloc]init];
        [_five_btn addTarget:self action:@selector(actionactionPlayVoiceBtnBtn:) forControlEvents:UIControlEventTouchUpInside];
        _five_btn.tag = 4;
    }
    return _five_btn;
}

- (UIView *)four_view
{
    if (!_four_view) {
        _four_view = [[UIView alloc]init];
        _four_view.hidden = YES;
    }
    return _four_view;
}
- (UIImageView *)four_bg_img
{
    if (!_four_bg_img) {
        _four_bg_img = [[UIImageView alloc]init];
        _four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        _four_bg_img.contentMode = UIViewContentModeScaleAspectFit;
    }
    return _four_bg_img;
}

- (UIImageView *)four_img
{
    if (!_four_img) {
        _four_img = [[UIImageView alloc]init];
        _four_img.image = [UIImage imageNamed:TUIKitResource(@"test")];
        _four_img.contentMode = UIViewContentModeScaleAspectFill;
        _four_img.layer.cornerRadius = 15.0f;
        _four_img.layer.masksToBounds = YES;
    }
    return _four_img;
}
- (UIButton *)four_btn
{
    if (!_four_btn) {
        _four_btn = [[UIButton alloc]init];
        [_four_btn addTarget:self action:@selector(actionactionPlayVoiceBtnBtn:) forControlEvents:UIControlEventTouchUpInside];
        _four_btn.tag = 3;
    }
    return _four_btn;
}


- (UIView *)third_view
{
    if (!_third_view) {
        _third_view = [[UIView alloc]init];
        _third_view.hidden = YES;
    }
    return _third_view;
}
- (UIImageView *)third_bg_img
{
    if (!_third_bg_img) {
        _third_bg_img = [[UIImageView alloc]init];
        _third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        _third_bg_img.contentMode = UIViewContentModeScaleAspectFit;
    }
    return _third_bg_img;
}

- (UIImageView *)third_img
{
    if (!_third_img) {
        _third_img = [[UIImageView alloc]init];
        _third_img.image = [UIImage imageNamed:TUIKitResource(@"test")];
        _third_img.contentMode = UIViewContentModeScaleAspectFill;
        _third_img.layer.cornerRadius = 15.0f;
        _third_img.layer.masksToBounds = YES;
    }
    return _third_img;
}

- (UIButton *)third_btn
{
    if (!_third_btn) {
        _third_btn = [[UIButton alloc]init];
        [_third_btn addTarget:self action:@selector(actionactionPlayVoiceBtnBtn:) forControlEvents:UIControlEventTouchUpInside];
        _third_btn.tag = 2;
    }
    return _third_btn;
}

- (UIView *)second_view
{
    if (!_second_view) {
        _second_view = [[UIView alloc]init];
        _second_view.hidden = YES;
    }
    return _second_view;
}

- (UIImageView *)second_bg_img
{
    if (!_second_bg_img) {
        _second_bg_img = [[UIImageView alloc]init];
        _second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        _second_bg_img.contentMode = UIViewContentModeScaleAspectFit;
    }
    return _second_bg_img;
}

- (UIImageView *)second_img
{
    if (!_second_img) {
        _second_img = [[UIImageView alloc]init];
        _second_img.image = [UIImage imageNamed:TUIKitResource(@"test")];
        _second_img.contentMode = UIViewContentModeScaleAspectFill;
        _second_img.layer.cornerRadius = 15.0f;
        _second_img.layer.masksToBounds = YES;
    }
    return _second_img;
}

- (UIButton *)second_btn
{
    if (!_second_btn) {
        _second_btn = [[UIButton alloc]init];
        [_second_btn addTarget:self action:@selector(actionactionPlayVoiceBtnBtn:) forControlEvents:UIControlEventTouchUpInside];
        _second_btn.tag = 1;
    }
    return _second_btn;
}
-(void)actionactionPlayVoiceBtn:(UIButton *)btn
{
    NSLog(@"actionactionPlayVoiceBtnactionactionPlayVoiceBtn");
}
- (UIView *)first_view
{
    if (!_first_view) {
        _first_view = [[UIView alloc]init];
        _first_view.hidden = YES;
    }
    return _first_view;
}

- (UIImageView *)first_bg_img
{
    if (!_first_bg_img) {
        _first_bg_img = [[UIImageView alloc]init];
        _first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        _first_bg_img.contentMode = UIViewContentModeScaleAspectFit;
    }
    return _first_bg_img;
}

- (UIImageView *)first_img
{
    if (!_first_img) {
        _first_img = [[UIImageView alloc]init];
        _first_img.image = [UIImage imageNamed:TUIKitResource(@"test")];
        _first_img.contentMode = UIViewContentModeScaleAspectFill;
        _first_img.layer.cornerRadius = 15.0f;
        _first_img.layer.masksToBounds = YES;
    }
    return _first_img;
}

- (UIButton *)first_btn
{
    if (!_first_btn) {
        _first_btn = [[UIButton alloc]init];
        [_first_btn addTarget:self action:@selector(actionactionPlayVoiceBtnBtn:) forControlEvents:UIControlEventTouchUpInside];
        _first_btn.tag = 0;
    }
    return _first_btn;
}
- (UIImageView *)contentBgImagView
{
    if (!_contentBgImagView) {
        _contentBgImagView = [[UIImageView alloc]init];
        _contentBgImagView.image = [UIImage imageNamed:TUIKitResource(@"n_piaoliup_bg")];
    }
    return _contentBgImagView;
}

- (UIView *)contentBgView
{
    if (!_contentBgView) {
        _contentBgView = [[UIView alloc]init];
        _contentBgView.backgroundColor = [UIColor clearColor];
    }
    return _contentBgView;
}
- (UIView *)bottomBgView
{
    if (!_bottomBgView) {
        _bottomBgView = [[UIView alloc]init];
        _bottomBgView.backgroundColor = RGB(50, 50, 50);
        _bottomBgView.layer.cornerRadius = 25.0f;
        _bottomBgView.layer.masksToBounds = YES;
    }
    return _bottomBgView;
}

- (UIButton *)refreshBtn
{
    if (!_refreshBtn) {
        _refreshBtn = [[UIButton alloc]init];
        [_refreshBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_main_search")] forState:UIControlStateNormal];
        [_refreshBtn addTarget:self action:@selector(actionHomeRefresh:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _refreshBtn;
}
-(void)actionHomeRefresh:(UIButton *)sender
{
    NSMutableDictionary *param  = [NSMutableDictionary dictionary];
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    param[@"appType"] = @"85"; //是suprise系统的，这个系统如果修改apptype需要修改两个地方。
    param[@"clientNum"] = @"81003001";
    if (model.userInfo.gender == 0) {
        param[@"gender"] = @"0";
    }else if(model.userInfo.gender == 1){
        param[@"gender"] = @"2";
    }else if(model.userInfo.gender == 2){
        param[@"gender"] = @"1";
    }
    NSString *baseurl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/bottle/bottleList"];
    NSLog(@"param:%@",param);
    NSLog(@"baseUrl:%@",baseurl);
    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseurl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"response.data:%@",response.data);
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            NSMutableArray *array = [NSMutableArray array];
            [self.homeAllListArr removeAllObjects];
            [self.randomListArr removeAllObjects];
            array = [NeighborsSimpleCuteHomeVoiceModel mj_objectArrayWithKeyValuesArray:response.data];
            NSLog(@"self.homeAllListArr.count:%lu",(unsigned long)array.count);
            self.first_view.hidden = YES;
            self.second_view.hidden = YES;
            self.third_view.hidden = YES;
            self.four_view.hidden = YES;
            self.five_view.hidden = YES;
            self.six_view.hidden = YES;
            self.seven_view.hidden = YES;
            if (array.count >=7) {
                for (int i = 0; i<7; i++) {
                    int index = arc4random() % (array.count);
                    NSString *indexStr = nil;
                    indexStr = [NSString stringWithFormat:@"%d",index];
                    while ([self.randomListArr containsObject:indexStr]) {
                        int index = arc4random() % (array.count);
                        indexStr = [NSString stringWithFormat:@"%d",index];
                    }
                    [self.randomListArr addObject:indexStr];
                    NSLog(@"homeAllListArr:snum:%@",indexStr);
                    int tagtalTag = [indexStr intValue];
                    [self.homeAllListArr addObject:array[tagtalTag]];
                }
                [SVProgressHUD show];
                self.cutDown = 9;
            }else{
                [self.homeAllListArr addObjectsFromArray:array];
                [SVProgressHUD show];
                if (array.count == 0) {
                    [SVProgressHUD dismiss];
                    return;
                }else if(array.count == 1){
                    self.cutDown = 3;
                }else if(array.count == 2){
                    self.cutDown = 4;
                }else if(array.count == 3){
                    self.cutDown = 5;
                }else if(array.count == 4){
                    self.cutDown = 6;
                }else if(array.count == 5){
                    self.cutDown = 7;
                }else if(array.count == 6){
                    self.cutDown = 8;
                }
            }
            self.timer2.fireDate=[NSDate distantPast];
        }else{
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}
- (UIButton *)sortBtn
{
    if (!_sortBtn) {
        _sortBtn = [[UIButton alloc]init];
        [_sortBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_main_list")] forState:UIControlStateNormal];
        [_sortBtn addTarget:self action:@selector(actionHomeSort) forControlEvents:UIControlEventTouchUpInside];
    }
    return _sortBtn;
}

-(void)actionHomeSort
{
    NSLog(@"actionHomeSort");
    NeighborsSimpleCuteVoiceListController *voiceListvc = [[NeighborsSimpleCuteVoiceListController alloc]init];
    voiceListvc.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:voiceListvc animated:YES];
}

- (UIButton *)sendBtn
{
    if (!_sendBtn) {
        _sendBtn = [[UIButton alloc]init];
        [_sendBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_main_voice")] forState:UIControlStateNormal];
        [_sendBtn addTarget:self action:@selector(actionSendBtn) forControlEvents:UIControlEventTouchUpInside];
        _sendBtn.layer.cornerRadius = 30.0f;
        _sendBtn.layer.masksToBounds = YES;
        [_sendBtn gradientButtonWithSize:CGSizeMake(60, 60) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _sendBtn;
}

-(void)actionSendBtn
{
    NSLog(@"actionSendBtnactionSendBtnactionSendBtn");
    NeighborsSimpleCuteVoiceShowView *voiceShowView = [[NeighborsSimpleCuteVoiceShowView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    NSCParameterAssert(window);
    [window addSubview:voiceShowView];
}
- (UIImageView *)titleBgView
{
    if (!_titleBgView) {
        _titleBgView = [[UIImageView alloc]init];
        _titleBgView.image = [UIImage imageNamed:TUIKitResource(@"hooilbiaoti")];
        _titleBgView.contentMode = UIViewContentModeScaleAspectFit;
    }
    return _titleBgView;
}

-(void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = NSC_MainThemColor;
    self.navigationItem.titleView = self.titleBgView;
    self.isRefresh = YES;
    [self NeighborsSimpleCuteSetLeftButton:[UIImage imageNamed:TUIKitResource(@"n_main_setting")]];
    [self NeighborsSimpleCuteSetRightButton:[UIImage imageNamed:TUIKitResource(@"n_main_message")]];
    [self setupUI];
    [self actionHomeData];
}

-(void)actionHomeData
{
    NSMutableDictionary *param  = [NSMutableDictionary dictionary];
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    param[@"appType"] = @"85";//是suprise系统的，这个系统如果修改apptype需要修改两个地方。
    param[@"clientNum"] = @"81003001";
    if (model.userInfo.gender == 0) {
        param[@"gender"] = @"0";
    }else if(model.userInfo.gender == 1){
        param[@"gender"] = @"2";
    }else if(model.userInfo.gender == 2){
        param[@"gender"] = @"1";
    }
    NSString *baseurl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/bottle/bottleList"];
    NSLog(@"param:%@",param);
    NSLog(@"baseUrl:%@",baseurl);
    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseurl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"response.data:%@",response.data);
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            self.first_view.hidden = YES;
            self.second_view.hidden = YES;
            self.third_view.hidden = YES;
            self.four_view.hidden = YES;
            self.five_view.hidden = YES;
            self.six_view.hidden = YES;
            self.seven_view.hidden = YES;
            [self.homeAllListArr removeAllObjects];
            self.homeAllListArr  = [NeighborsSimpleCuteHomeVoiceModel mj_objectArrayWithKeyValuesArray:response.data];
            NSLog(@"self.homeAllListArr.count:%lu",(unsigned long)self.homeAllListArr.count);
            [self actionSetHomeData];
        }else{
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}
-(void)actionSetHomeData
{   NSString *imageBaseUrl = [NSString stringWithFormat:@"%@/",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th];
    if (self.homeAllListArr.count >= 7) {
    self.first_view.hidden = NO;
    NeighborsSimpleCuteHomeVoiceModel *svoicemodel0 = self.homeAllListArr[0];
    [self.first_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel0.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
    if (svoicemodel0.audioUrl.length > 0) {
        self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
    }else{
        self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
    }
    self.second_view.hidden = NO;
    NeighborsSimpleCuteHomeVoiceModel *svoicemodel1 = self.homeAllListArr[1];
    [self.second_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel1.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
    if (svoicemodel1.audioUrl.length > 0) {
        self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
    }else{
        self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
    }
    self.third_view.hidden = NO;
    NeighborsSimpleCuteHomeVoiceModel *svoicemodel2 = self.homeAllListArr[2];
    [self.third_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel2.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
    if (svoicemodel2.audioUrl.length > 0) {
        self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
    }else{
        self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
    }
    self.four_view.hidden = NO;
    NeighborsSimpleCuteHomeVoiceModel *svoicemodel3 = self.homeAllListArr[3];
    [self.four_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel3.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
    if (svoicemodel3.audioUrl.length > 0) {
        self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
    }else{
        self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
    }
    self.five_view.hidden = NO;
    NeighborsSimpleCuteHomeVoiceModel *svoicemodel4 = self.homeAllListArr[4];
    [self.five_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel4.userInfo.imgUrl]]];
    if (svoicemodel4.audioUrl.length > 0) {
        self.five_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
    }else{
        self.five_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
    }
    self.six_view.hidden = NO;
    NeighborsSimpleCuteHomeVoiceModel *svoicemodel5 = self.homeAllListArr[5];
    [self.six_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel5.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
    if (svoicemodel5.audioUrl.length > 0) {
        self.six_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
    }else{
        self.six_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
    }
    self.seven_view.hidden = NO;
    NeighborsSimpleCuteHomeVoiceModel *svoicemodel6 = self.homeAllListArr[6];
    [self.seven_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel6.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
    if (svoicemodel6.audioUrl.length > 0) {
        self.seven_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
    }else{
        self.seven_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
    }
}else{
     if(self.homeAllListArr.count == 1){
         self.first_view.hidden = NO;
         NeighborsSimpleCuteHomeVoiceModel *svoicemodel1 = self.homeAllListArr[0];
         [self.first_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel1.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
         if (svoicemodel1.audioUrl.length > 0) {
             self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
         }else{
             self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
         }
    }else if(self.homeAllListArr.count == 2){
        self.first_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel0 = self.homeAllListArr[0];
        [self.first_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel0.userInfo.imgUrl]]];
        if (svoicemodel0.audioUrl.length > 0) {
            self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
        self.second_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel1 = self.homeAllListArr[1];
        [self.second_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel1.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel1.audioUrl.length > 0) {
            self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
    }else if(self.homeAllListArr.count == 3){
        self.first_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel0 = self.homeAllListArr[0];
        [self.first_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel0.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel0.audioUrl.length > 0) {
            self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
        self.second_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel1 = self.homeAllListArr[1];
        [self.second_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel1.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel1.audioUrl.length > 0) {
            self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
        self.third_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel2 = self.homeAllListArr[2];
        [self.third_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel2.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel2.audioUrl.length > 0) {
            self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
    }else if(self.homeAllListArr.count == 4){
        self.first_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel0 = self.homeAllListArr[0];
        [self.first_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel0.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel0.audioUrl.length > 0) {
            self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
        self.second_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel1 = self.homeAllListArr[1];
        [self.second_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel1.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel1.audioUrl.length > 0) {
            self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
        self.third_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel2 = self.homeAllListArr[2];
        [self.third_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel2.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel2.audioUrl.length > 0) {
            self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
        self.four_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel3 = self.homeAllListArr[3];
        [self.four_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel3.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel3.audioUrl.length > 0) {
            self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
    }else if(self.homeAllListArr.count == 5){
        self.first_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel0 = self.homeAllListArr[0];
        [self.first_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel0.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel0.audioUrl.length > 0) {
            self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
        self.second_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel1 = self.homeAllListArr[1];
        [self.second_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel1.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel1.audioUrl.length > 0) {
            self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
        self.third_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel2 = self.homeAllListArr[2];
        [self.third_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel2.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel2.audioUrl.length > 0) {
            self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
        self.four_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel3 = self.homeAllListArr[3];
        [self.four_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel3.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel3.audioUrl.length > 0) {
            self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }

        self.five_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel4 = self.homeAllListArr[4];
        [self.five_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel4.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel4.audioUrl.length > 0) {
            self.five_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.five_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }

    }else if(self.homeAllListArr.count == 6){
        self.first_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel0 = self.homeAllListArr[0];
        [self.first_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel0.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel0.audioUrl.length > 0) {
            self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.first_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
        self.second_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel1 = self.homeAllListArr[1];
        [self.second_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel1.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel1.audioUrl.length > 0) {
            self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.second_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
        self.third_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel2 = self.homeAllListArr[2];
        [self.third_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel2.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel2.audioUrl.length > 0) {
            self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.third_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
        self.four_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel3 = self.homeAllListArr[3];
        [self.four_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel3.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel3.audioUrl.length > 0) {
            self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.four_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }

        self.five_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel4 = self.homeAllListArr[4];
        [self.five_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel4.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel4.audioUrl.length > 0) {
            self.five_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.five_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
        }
        self.six_view.hidden = NO;
        NeighborsSimpleCuteHomeVoiceModel *svoicemodel5 = self.homeAllListArr[5];
        [self.six_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",imageBaseUrl,svoicemodel5.userInfo.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        if (svoicemodel5.audioUrl.length > 0) {
            self.six_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg")];
        }else{
            self.six_bg_img.image = [UIImage imageNamed:TUIKitResource(@"n_cityuserback_bg2")];
          }
        }
    }
}

-(void)setupUI
{
    [self.view addSubview:self.contentBgView];
    [self.contentBgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.centerY.mas_equalTo(self.view).offset(-50);
        make.left.right.offset(0);
        make.height.offset(460);
    }];
    [self.contentBgView addSubview:self.contentBgImagView];
    [self.contentBgImagView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.bottom.offset(0);
        make.top.offset(50);
    }];
    [self.contentBgView addSubview:self.second_view];
    [self.second_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view).offset(-3);
        make.top.offset(5);
        make.width.offset(135);
        make.height.offset(50);
    }];
    [self.second_view addSubview:self.second_bg_img];
    [self.second_bg_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.bottom.top.offset(0);
    }];
    [self.second_view addSubview:self.second_img];
    [self.second_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.centerY.mas_equalTo(self.second_view).offset(-5);
        make.width.height.offset(30);
    }];
    [self.second_view addSubview:self.second_btn];
    [self.second_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.bottom.top.offset(0);
    }];
 
    [self.contentBgView addSubview:self.first_view];
    [self.first_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentBgView).offset(-115);
        make.top.mas_equalTo(self.second_view.mas_bottom).offset(-8);
        make.width.offset(135);
        make.height.offset(50);
    }];
    [self.first_view addSubview:self.first_bg_img];
    [self.first_bg_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self.first_view addSubview:self.first_img];
    [self.first_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.centerY.mas_equalTo(self.first_view).offset(-5);
        make.width.height.offset(30);
    }];
    [self.first_view addSubview:self.first_btn];
    [self.first_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    
    [self.contentBgView addSubview:self.third_view];
    [self.third_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentBgView).offset(95);
        make.top.mas_equalTo(self.second_view.mas_bottom).offset(15);
        make.width.offset(135);
        make.height.offset(50);
    }];
    
    [self.third_view addSubview:self.third_bg_img];
    [self.third_bg_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self.third_view addSubview:self.third_img];
    [self.third_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.centerY.mas_equalTo(self.third_view).offset(-5);
        make.width.height.offset(30);
    }];
    [self.third_view addSubview:self.third_btn];
    [self.third_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    
    [self.contentBgView addSubview:self.four_view];
    [self.four_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentBgView).offset(40);
        make.top.mas_equalTo(self.third_view.mas_bottom).offset(60);
        make.width.offset(135);
        make.height.offset(50);
    }];
    
    [self.four_view addSubview:self.four_bg_img];
    [self.four_bg_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self.four_view addSubview:self.four_img];
    [self.four_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.centerY.mas_equalTo(self.four_view).offset(-5);
        make.width.height.offset(30);
    }];
    [self.four_view addSubview:self.four_btn];
    [self.four_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    
    
    [self.contentBgView addSubview:self.five_view];
    [self.five_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentBgView).offset(-115);
        make.top.mas_equalTo(self.four_view.mas_bottom).offset(70);
        make.width.offset(135);
        make.height.offset(50);
    }];
    
    [self.five_view addSubview:self.five_bg_img];
    [self.five_bg_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self.five_view addSubview:self.five_img];
    [self.five_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.centerY.mas_equalTo(self.five_view).offset(-5);
        make.width.height.offset(30);
    }];
    [self.five_view addSubview:self.five_btn];
    [self.five_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    

    [self.contentBgView addSubview:self.six_view];
    [self.six_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentBgView).offset(95);
        make.top.mas_equalTo(self.four_view.mas_bottom).offset(60);
        make.width.offset(135);
        make.height.offset(50);
    }];
    
    [self.six_view addSubview:self.six_bg_img];
    [self.six_bg_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self.six_view addSubview:self.six_img];
    [self.six_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.centerY.mas_equalTo(self.six_view).offset(-5);
        make.width.height.offset(30);
    }];
    [self.six_view addSubview:self.six_btn];
    [self.six_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    
    
    [self.contentBgView addSubview:self.seven_view];
    [self.seven_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentBgView);
        make.bottom.mas_equalTo(self.contentBgView.mas_bottom).offset(-30);
        make.width.offset(135);
        make.height.offset(50);
    }];
    
    
    [self.seven_view addSubview:self.seven_bg_img];
    [self.seven_bg_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self.seven_view addSubview:self.seven_img];
    [self.seven_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.centerY.mas_equalTo(self.seven_view).offset(-5);
        make.width.height.offset(30);
    }];
    [self.seven_view addSubview:self.seven_btn];
    [self.seven_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    
    [self.view addSubview:self.bottomBgView];
    [self.bottomBgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.bottom.offset(-Height_X - 30);
        make.width.offset(240);
        make.height.offset(50);
    }];
        
    
    
    [self.bottomBgView addSubview:self.refreshBtn];
    [self.refreshBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.bottomBgView);
        make.left.offset(20);
    }];
    [self.bottomBgView addSubview:self.sortBtn];
    [self.sortBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.bottomBgView);
        make.right.offset(-20);
    }];
    [self.view addSubview:self.sendBtn];
    [self.sendBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.bottomBgView);
        make.width.height.offset(60);
    }];
}

-(void)actionactionPlayVoiceBtnBtn:(UIButton *)sender
{
    int tag = (int)sender.tag;
    NSLog(@"tag:%d",tag);
    NeighborsSimpleCuteHomeVoiceModel *voicemodel = nil;
    voicemodel = self.homeAllListArr[tag];
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"bottleId"] = @(voicemodel.id);
    NSString *baseUrl = [NSString stringWithFormat:@"%@api/bottle/open/%@",NSC_Base_Url,@(voicemodel.id)];
    NSLog(@"param:%@",param);
    NSLog(@"baseurl:%@",baseUrl);
    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel *response) {
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            [self actionHomeHiddenWithTag:tag];
            NeighborsSimpleCuteVoicePlayView *playView = [[NeighborsSimpleCuteVoicePlayView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
            playView.voiceModel = voicemodel;
            UIWindow *window = [UIApplication sharedApplication].keyWindow;
            NSCParameterAssert(window);
            [window addSubview:playView];
            [playView setNeighborsSimpleCuteVoicePlayViewDelBlock:^{
                if (tag == 0) {
                    self.first_view.hidden = YES;
                }else if(tag == 1){
                    self.second_view.hidden = YES;
                }else if(tag == 2){
                    self.third_view.hidden = YES;
                }else if(tag == 3){
                    self.four_view.hidden = YES;
                }else if(tag == 4){
                    self.five_view.hidden = YES;
                }else if(tag == 5){
                    self.six_view.hidden = YES;
                    }
            }];
            [playView setNeighborsSimpleCuteVoicePlayViewReportBlock:^{
                NeighborsSimpleCuteSettingFeedBackController *reportShowVc = [[NeighborsSimpleCuteSettingFeedBackController alloc]init];
                reportShowVc.hidesBottomBarWhenPushed = YES;
                [reportShowVc setNeighborsSimpleCuteSettingFeedBackControllerBackBlock:^{
                    playView.hidden = NO;
                }];
                [self.navigationController pushViewController:reportShowVc animated:YES];
            }];
            [playView setNeighborsSimpleCuteVoicePlayViewCallBlock:^{
                [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) {
                            if (granted) {
                                dispatch_async(dispatch_get_main_queue(), ^{
                                    NeighborsSimpleCuteVideoCallView *callView = [[NeighborsSimpleCuteVideoCallView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
                                    callView.voiceModel = voicemodel;
                                    UIWindow *window = [UIApplication sharedApplication].keyWindow;
                                    NSCParameterAssert(window);
                                    [window addSubview:callView];
                                });
                
                            } else {
                                // [self showPhoto];
                                // Microphone disabled code
                            }
                        }];
            }];
            
            [playView setNeighborsSimpleCuteVoicePlayViewChatBlock:^{
            //聊天界面功能
//            NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
//            NSLog(@"userModel.data.userInfo.memberLevel:%ld",(long)userModel.userInfo.memberLevel);
//            if (userModel.userInfo.memberLevel == 1) {
//                    //是会员
//                    ChatViewController *chat = [[ChatViewController alloc] init];
//                    chat.userId              = [NSString stringWithFormat:@"%ld",(long)voicemodel.userId];
//                    TUIConversationCellData *conversationData = [[TUIConversationCellData alloc] init];
//                    conversationData.userID = voicemodel.userInfo.tempStr20th;
//                    conversationData.title = voicemodel.userInfo.nickName;
//                    chat.conversationData = conversationData;
//                    [self.navigationController pushViewController:chat animated:YES];
//            }else{
//                    //不是会员
//                    MJWeakSelf
//                    IMUpdateGrdateView *alertShowView = [[IMUpdateGrdateView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
//                           UIWindow *window = [UIApplication sharedApplication].keyWindow;
//                           [alertShowView setIMUpdateGrdateViewUpgradeBlock:^{
//                               NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
//                               BOOL isVPN = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_VPN];
//                               BOOL isCountry = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_COUNTRY];
//                                      if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th isEqualToString:@"1"] || [userModel.appClient.spare13th isEqualToString:@"1"] || isVPN == YES  || isCountry == YES) {                                    ZFMemberUpgrdeOtherController *zfothermembervc = [[ZFMemberUpgrdeOtherController alloc]init];
//                                          zfothermembervc.hidesBottomBarWhenPushed = YES;
//                                          [self.navigationController pushViewController:zfothermembervc animated:YES];
//                                      }else{
//                                          //H5支付功能
//                                          NSString *spare12th = userModel.appClient.spare12th;
//                                          NSLog(@"spare12th:%@",spare12th);
//                                          NSString *ipContent = userModel.userInfo.ipContent;
//                                          NSLog(@"ipContent:%@",ipContent);
//                                          NSDictionary *dics = [ipContent getCxshareldstaretlToDictionary];
//                                          NSLog(@"ip:%@",dics[@"ip"]);
//                                          NSString *RealUrl = [NSString stringWithFormat:@"%@ip=%@?userid=%ld?token=%@",spare12th,dics[@"ip"],(long)userModel.userInfo.userId,userModel.tokenDto.token];
//                                          NSLog(@"RealUrl:%@",RealUrl);
//
//                                          NeighborsSimpleCuteBaseWebController *vc = [[NeighborsSimpleCuteBaseWebController alloc]init];
//                                          vc.webTitle = @"Upgrade";
//                                          vc.loadType = WKWebLoadTypeWebURLString;
//                                          vc.URLString = RealUrl;
//                                          [weakSelf.navigationController pushViewController:vc animated:YES];
//                               }
//                           }];
//                           [alertShowView setIMUpdateGrdateViewUpgradeDissmissBlock:^{
//
//                           }];
//                           NSCParameterAssert(window);
//                           [window addSubview:alertShowView];
//
//
//            }
                NeighborsSimpleCuteMessageChatMainController *messageChatvc =  [[NeighborsSimpleCuteMessageChatMainController alloc]init];
                messageChatvc.hidesBottomBarWhenPushed = YES;
                NSString *imageBaseUrl = [NSString stringWithFormat:@"%@/",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th];
                messageChatvc.IconStr = [NSString stringWithFormat:@"%@%@",imageBaseUrl,voicemodel.userInfo.imgUrl];
                NSLog(@"IconStrIconStrIconStrIconStrIconStrIconStr:%@",messageChatvc.IconStr);
                messageChatvc.NameStr = voicemodel.userInfo.nickName;
                [self.navigationController pushViewController:messageChatvc animated:YES];
    
            }];
        }
    }failure:^(NSError *error) {
            
    }];
}

-(void)actionHomeHiddenWithTag:(int )tag
{
    if (tag == 0) {
        self.first_view.hidden = YES;
    }else if(tag == 1){
        self.second_view.hidden = YES;
    }else if(tag == 2){
        self.third_view.hidden = YES;
    }else if(tag == 3){
        self.four_view.hidden = YES;
    }else if(tag == 4){
        self.five_view.hidden = YES;
    }else if(tag == 5){
        self.six_view.hidden = YES;
    }else if(tag == 6){
        self.seven_view.hidden = YES;
    }
}

- (void)onNeighborsSimpleCuteLeftBackBtn:(UIButton *)btn
{
    NeighborsSimpleCuteSettingMainController *settingvc = [[NeighborsSimpleCuteSettingMainController alloc]init];
    settingvc.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:settingvc animated:YES];
}
- (void)onNeighborsSimpleCuteRightBackBtn:(UIButton *)btn
{
    NeighborsSimpleCuteMessageMainController *messagevc = [[NeighborsSimpleCuteMessageMainController alloc]init];
    messagevc.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:messagevc animated:YES];
}
@end

@interface NeighborsSimpleCuteVoiceContentViewCell()

@end

@implementation NeighborsSimpleCuteVoiceContentViewCell


- (UIImageView *)bgImg
{
    if (!_bgImg) {
        _bgImg = [[UIImageView alloc]init];
        _bgImg.image = [UIImage imageNamed:TUIKitResource(@"test")];
        _bgImg.contentMode = UIViewContentModeScaleAspectFill;
        _bgImg.layer.cornerRadius = 10.0f;
        _bgImg.layer.masksToBounds = YES;
    }
    return _bgImg;
}
- (UIView *)showView
{
    if (!_showView) {
        _showView = [[UIView alloc]init];
        _showView.backgroundColor = [[UIColor blackColor]colorWithAlphaComponent:0.4];
        _showView.layer.cornerRadius = 10.0f;
        _showView.layer.masksToBounds = YES;
    }
    return _showView;
}

- (UIImageView *)showImg
{
    if (!_showImg) {
        _showImg = [[UIImageView alloc]init];
        _showImg.image = [UIImage imageNamed:TUIKitResource(@"wokovoicelisticontwose")];
    }
    return _showImg;
}

- (UIView *)bgView
{
    if (!_bgView) {
        _bgView = [[UIView alloc]init];
        _bgView.backgroundColor = [UIColor clearColor];
    }
    return _bgView;
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self addSubview:self.bgImg];
    [self.bgImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.top.right.offset(0);
        make.bottom.offset(0);
    }];
    
    [self addSubview:self.showView];
    [self.showView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.top.right.offset(0);
        make.bottom.offset(0);
    }];
    [self addSubview:self.showImg];
    [self.showImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.bgImg);
    }];
}
@end

@interface NeighborsSimpleCuteExploreContentViewCell ()

/*
 @property (nonatomic,strong)UIView *bgView;

 @property (nonatomic,strong)UIButton *callBtn;

 @property (nonatomic,strong)UIImageView *bgImg;

 @property (nonatomic,strong)UIImageView *apperaView;

 @property (nonatomic,strong)UIImageView *showImg;

 */
@end

@implementation NeighborsSimpleCuteExploreContentViewCell


- (UIImageView *)bgImg
{
    if (!_bgImg) {
        _bgImg = [[UIImageView alloc]init];
        _bgImg.image = [UIImage imageNamed:TUIKitResource(@"test")];
        _bgImg.contentMode = UIViewContentModeScaleAspectFill;
        _bgImg.layer.cornerRadius = 10.0f;
        _bgImg.layer.masksToBounds = YES;
        _bgImg.layer.borderColor = RGB(255, 181, 0).CGColor;
        _bgImg.layer.borderWidth = 1.0;
    }
    return _bgImg;
}
- (UIView *)showView
{
    if (!_showView) {
        _showView = [[UIView alloc]init];
        _showView.backgroundColor = [[UIColor blackColor]colorWithAlphaComponent:0.4];
        _showView.layer.cornerRadius = 10.0f;
        _showView.layer.masksToBounds = YES;
    }
    return _showView;
}

- (UIImageView *)showImg
{
    if (!_showImg) {
        _showImg = [[UIImageView alloc]init];
        _showImg.image = [UIImage imageNamed:TUIKitResource(@"n_explore_alter")];
    }
    return _showImg;
}

- (UIView *)bgView
{
    if (!_bgView) {
        _bgView = [[UIView alloc]init];
        _bgView.backgroundColor = [UIColor clearColor];
    }
    return _bgView;
}
- (UIButton *)callBtn
{
    if (!_callBtn) {
        _callBtn = [[UIButton alloc]init];
        _callBtn.backgroundColor = RGB(255, 181, 0);
        [_callBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_explore_call")] forState:UIControlStateNormal];
        [_callBtn addTarget:self action:@selector(actionCallBtn:) forControlEvents:UIControlEventTouchUpInside];
        [_callBtn setTitle:@" Call" forState:UIControlStateNormal];
        _callBtn.titleLabel.font = [UIFont systemFontOfSize:15];
        _callBtn.layer.cornerRadius = 20.0f;
        _callBtn.layer.masksToBounds = YES;
    }
    return _callBtn;
}

-(void)actionCallBtn:(UIButton *)btn
{
    NSLog(@"actionCallBtnactionCallBtnactionCallBtnactionCallBtn");
    if (self.NeighborsSimpleCuteExploreContentViewCellCallBlock) {
        self.NeighborsSimpleCuteExploreContentViewCellCallBlock();
    }
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self addSubview:self.bgImg];
    [self.bgImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.top.right.offset(0);
        make.bottom.offset(-30);
    }];
    
    [self addSubview:self.showView];
    [self.showView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.top.right.offset(0);
        make.bottom.offset(-30);
    }];
    [self addSubview:self.showImg];
    [self.showImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.bgImg);
    }];
    [self addSubview:self.callBtn];
    [self.callBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.bottom.offset(-10);
        make.width.offset(95);
        make.height.offset(40);
    }];
}
@end

@interface NeighborsSimpleCuteReportController ()

@end

@implementation NeighborsSimpleCuteReportController

- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"Feedback";
}

@end

@interface NeighborsSimpleCuteSendMessageController ()
@property (strong,nonatomic)IQTextView *send_detail_view;
@property (nonatomic,strong)UIButton *sendBtn;
@end

@implementation NeighborsSimpleCuteSendMessageController
- (UIButton *)sendBtn
{
    if (!_sendBtn) {
        _sendBtn = [[UIButton alloc]initWithFrame:CGRectMake(0, 0, 60, 30)];
        [_sendBtn setTitle:@"Send" forState:UIControlStateNormal];
        [_sendBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _sendBtn.titleLabel.font = [UIFont systemFontOfSize:15];
        [_sendBtn addTarget:self action:@selector(actionSendBtn:) forControlEvents:UIControlEventTouchUpInside];
        _sendBtn.layer.cornerRadius = 15.0f;
        _sendBtn.layer.masksToBounds = YES;
        [_sendBtn gradientButtonWithSize:CGSizeMake(60, 30) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 6)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        [_sendBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    }
    return _sendBtn;
}

-(void)actionSendBtn:(UIButton *)btn
{
    NSLog(@"actionSendBtn btn");
    [self.view endEditing:YES];
    if (IS_EMPTY(self.send_detail_view.text)) {
        [SVProgressHUD showInfoWithStatus:@"Enter what you want to say"];
        return;
    }
    [SVProgressHUD show];
    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
            dispatch_async(dispatch_get_main_queue(), ^{
                [SVProgressHUD dismiss];
                [SVProgressHUD showInfoWithStatus:@"Send successful"];
                [self.navigationController popViewControllerAnimated:YES];
        });
    });
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"Message";
    [self NeighborsSimpleCuteSetLeftButton:[UIImage imageNamed:TUIKitResource(@"n_back")]];
    self.send_detail_view = [[IQTextView alloc]init];
    self.send_detail_view.backgroundColor = RGB(60, 60, 60);
    self.send_detail_view.placeholder = @"Say hi.....";
    self.send_detail_view.placeholderTextColor = RGB(153, 153, 153);
    self.send_detail_view.textColor = [UIColor whiteColor];
    self.send_detail_view.font = [UIFont systemFontOfSize:15];
    self.send_detail_view.textAlignment = NSTextAlignmentLeft;
    self.send_detail_view.layer.cornerRadius  = 10.0f;
    self.send_detail_view.layer.masksToBounds = YES;
    [self.view addSubview:self.send_detail_view];
    [self.send_detail_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.right.offset(-20);
        make.top.offset(20);
        make.height.offset(260);
    }];
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:self.sendBtn];
}
- (void)onNeighborsSimpleCuteLeftBackBtn:(UIButton *)btn
{
    if (self.NeighborsSimpleCuteReportControllerMessageBlock) {
        self.NeighborsSimpleCuteReportControllerMessageBlock();
    }
    [self.navigationController popViewControllerAnimated:YES];
}

@end

@interface NeighborsSimpleCuteVoiceListController ()<UICollectionViewDelegate,UICollectionViewDataSource>
@property (nonatomic,strong)UICollectionView *exploreCollectionView;
@property (nonatomic,strong)NSMutableArray *exploreListArr;
@property (nonatomic,assign)BOOL isDefault;
@property (nonatomic,assign)NSInteger page; //页码
@property (nonatomic,assign)BOOL isMore;

@end

@implementation NeighborsSimpleCuteVoiceListController

- (NSMutableArray *)exploreListArr
{
    if (!_exploreListArr) {
        _exploreListArr = [NSMutableArray array];
    }
    return _exploreListArr;
}
- (UICollectionView *)exploreCollectionView
{
    if (!_exploreCollectionView) {
        UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc]init];
        flow.scrollDirection = UICollectionViewScrollDirectionVertical;
        flow.minimumLineSpacing = 10;//行间距
        flow.minimumInteritemSpacing = 10;//列间距
        _exploreCollectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flow];
        _exploreCollectionView.backgroundColor = [UIColor clearColor];
        _exploreCollectionView.showsVerticalScrollIndicator = NO;
        _exploreCollectionView.showsHorizontalScrollIndicator = NO;
        _exploreCollectionView.delegate = self;
        _exploreCollectionView.dataSource = self;
        [_exploreCollectionView registerClass:[NeighborsSimpleCuteExploreContentViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteExploreContentViewCell"];
    }
    return _exploreCollectionView;
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"Meet Voice";
    [self.view addSubview:self.exploreCollectionView];
    [self.exploreCollectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self actionNewExploreList];
    self.exploreCollectionView.mj_header = [MJRefreshNormalHeader headerWithRefreshingTarget:self refreshingAction:@selector(actionNewExploreList)];
    self.exploreCollectionView.mj_footer = [MJRefreshBackNormalFooter footerWithRefreshingTarget:self refreshingAction:@selector(actionMoreExploreList)];
}
/// 更多数据
-(void)actionMoreExploreList
{
    if (self.isMore == YES) {
        [self.exploreCollectionView.mj_footer endRefreshing];
        return;
    }
    self.page++;
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"appType"] = @"1";
    param[@"pageNum"] = @(self.page);
    param[@"pageSize"] = @"20";
    NSString *baseurl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/bottle/openedList"];
    NSLog(@"param:%@",param);
    NSLog(@"baseurl:%@",baseurl);
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseurl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"response.data:%@",response.data);
        [self.exploreCollectionView.mj_header endRefreshing];
        [self.exploreCollectionView.mj_footer  endRefreshing];
        if (response.code == 0) {
            NSMutableArray *array  = [NeighborsSimpleCuteExploreListModel mj_objectArrayWithKeyValuesArray:response.data];
            if (array.count == 0) {
                [self.exploreCollectionView.mj_footer endRefreshing];
                [self.exploreCollectionView reloadData];
                return;
            }else{
                [self.exploreListArr addObjectsFromArray:array];
                [self.exploreCollectionView.mj_footer endRefreshing];
                [self.exploreCollectionView reloadData];
            }
        }else{
            [self.exploreCollectionView.mj_footer endRefreshing];
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [self.exploreCollectionView.mj_footer endRefreshing];
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}
/// 最新数据
-(void)actionNewExploreList
{
    self.isMore = NO;
    [self.exploreCollectionView.mj_footer resetNoMoreData];
    self.page = 1;
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"appType"] = @"1";
    param[@"pageNum"] = @(self.page);
    param[@"pageSize"] = @"20";
    NSString *baseurl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/bottle/openedList"];
    NSLog(@"param:%@",param);
    NSLog(@"baseurl:%@",baseurl);
    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseurl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"response.data:%@",response.data);
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            [self.exploreListArr removeAllObjects];
            self.exploreListArr = [NeighborsSimpleCuteExploreListModel mj_objectArrayWithKeyValuesArray:response.data];
            [self.exploreCollectionView.mj_header endRefreshing];
            [self.exploreCollectionView.mj_header endRefreshing];
            [self.exploreCollectionView reloadData];
        }else{
            [self.exploreCollectionView.mj_header endRefreshing];
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD dismiss];
        [self.exploreCollectionView.mj_header endRefreshing];
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
    
}

-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 1;
}
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return self.exploreListArr.count;
}
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    return UIEdgeInsetsMake(10, 10, 10, 10);
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    return CGSizeMake((IPHONE_WIDTH - 40)/2, 240);
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    NeighborsSimpleCuteExploreContentViewCell *contentCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteExploreContentViewCell" forIndexPath:indexPath];
    NeighborsSimpleCuteExploreListModel *model = self.exploreListArr[indexPath.row];
    [contentCell.bgImg sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@/%@",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th,model.userInfo.imgUrl]]];
    [contentCell setNeighborsSimpleCuteExploreContentViewCellCallBlock:^{
        [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) {
            if (granted) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    //需要执行的方法
                    NeighborsSimpleCuteVideoCallView *callView = [[NeighborsSimpleCuteVideoCallView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
                    callView.voiceModel = model;
                    UIWindow *window = [UIApplication sharedApplication].keyWindow;
                    NSCParameterAssert(window);
                    [window addSubview:callView];
                });
            } else {
                // [self showPhoto];
                // Microphone disabled code
            }
        }];
    }];
    return contentCell;
}
-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
    NeighborsSimpleCuteExploreListModel *model = self.exploreListArr[indexPath.row];
    NeighborsSimpleCuteVoicePlayView *playView= [[NeighborsSimpleCuteVoicePlayView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
    playView.exporeModel = model;
    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    NSCParameterAssert(window);
    [window addSubview:playView];
    [playView setNeighborsSimpleCuteVoicePlayViewCallBlock:^{
        [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) {
            if (granted) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    // Microphone enabled code‘
                    NeighborsSimpleCuteVideoCallView *callView = [[NeighborsSimpleCuteVideoCallView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
                    callView.voiceModel = model;
                    UIWindow *window = [UIApplication sharedApplication].keyWindow;
                    NSCParameterAssert(window);
                    [window addSubview:callView];
                });

            } else {
            }
        }];
       
    }];
    [playView setNeighborsSimpleCuteVoicePlayViewReportBlock:^{
        NeighborsSimpleCuteSettingFeedBackController *reportShowVc = [[NeighborsSimpleCuteSettingFeedBackController alloc]init];
        reportShowVc.hidesBottomBarWhenPushed = YES;
        [reportShowVc setNeighborsSimpleCuteSettingFeedBackControllerBackBlock:^{
            playView.hidden = NO;
        }];
        [self.navigationController pushViewController:reportShowVc animated:YES];
    }];
    [playView setNeighborsSimpleCuteVoicePlayViewChatBlock:^{
        //聊天界面
        NeighborsSimpleCuteMessageChatMainController *messageChatVc = [[NeighborsSimpleCuteMessageChatMainController alloc]init];
        messageChatVc.hidesBottomBarWhenPushed = YES;
        NSString *imageBaseUrl = [NSString stringWithFormat:@"%@/",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th];
        messageChatVc.IconStr = [NSString stringWithFormat:@"%@%@",imageBaseUrl,model.userInfo.imgUrl];
        messageChatVc.NameStr = model.userInfo.nickName;
        [self.navigationController pushViewController:messageChatVc animated:YES];
//        NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
//            NSLog(@"userModel.data.userInfo.memberLevel:%ld",(long)userModel.userInfo.memberLevel);
//                if (userModel.userInfo.memberLevel == 1) {
//                    //是会员
//                    ChatViewController *chat = [[ChatViewController alloc] init];
//                    chat.userId              = [NSString stringWithFormat:@"%ld",(long)model.userId];
//                    TUIConversationCellData *conversationData = [[TUIConversationCellData alloc] init];
//                    conversationData.userID = model.userInfo.tempStr20th;
//                    conversationData.title = model.userInfo.nickName;
//                    chat.conversationData = conversationData;
//                    [self.navigationController pushViewController:chat animated:YES];
//                }else{
//                    //不是会员
//                    MJWeakSelf
//                    IMUpdateGrdateView *alertShowView = [[IMUpdateGrdateView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
//                    UIWindow *window = [UIApplication sharedApplication].keyWindow;
//                    [alertShowView setIMUpdateGrdateViewUpgradeBlock:^{
//                        NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
//                        BOOL isVPN = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_VPN];
//                        BOOL isCountry = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_COUNTRY];
//                               if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th isEqualToString:@"1"] || [userModel.appClient.spare13th isEqualToString:@"1"] || isVPN == YES  || isCountry == YES) {
//                                   ZFMemberUpgrdeOtherController *zfothermembervc = [[ZFMemberUpgrdeOtherController alloc]init];
//                                    zfothermembervc.hidesBottomBarWhenPushed = YES;
//                                    [self.navigationController pushViewController:zfothermembervc animated:YES];
//                               }else{
//                                   //H5支付功能
//                                   NSString *spare12th = userModel.appClient.spare12th;
//                                   NSLog(@"spare12th:%@",spare12th);
//                                   NSString *ipContent = userModel.userInfo.ipContent;
//                                   NSLog(@"ipContent:%@",ipContent);
//                                   NSDictionary *dics = [ipContent getCxshareldstaretlToDictionary];
//                                   NSLog(@"ip:%@",dics[@"ip"]);
//                                   NSString *RealUrl = [NSString stringWithFormat:@"%@ip=%@?userid=%ld?token=%@",spare12th,dics[@"ip"],(long)userModel.userInfo.userId,userModel.tokenDto.token];
//                                   NSLog(@"RealUrl:%@",RealUrl);
//
//                                   NeighborsSimpleCuteBaseWebController *vc = [[NeighborsSimpleCuteBaseWebController alloc]init];
//                                   vc.webTitle = @"Upgrade";
//                                   vc.loadType = WKWebLoadTypeWebURLString;
//                                   vc.URLString = RealUrl;
//                                   [weakSelf.navigationController pushViewController:vc animated:YES];
//                        }
//                    }];
//                    [alertShowView setIMUpdateGrdateViewUpgradeDissmissBlock:^{
//
//                    }];
//                    NSCParameterAssert(window);
//                    [window addSubview:alertShowView];
//            }
    }];
    [playView setNeighborsSimpleCuteVoicePlayViewDelBlock:^{
        [self.exploreListArr removeObject:model];
        [self.exploreCollectionView reloadData];
    }];
    [playView setNeighborsSimpleCuteVoicePlayViewCloseBlock:^{
        //[self.exploreListArr removeObject:model];
        //[self.exploreCollectionView reloadData];
    }];
}
@end
#define kRecordAudioFile @"myRecord.caf"
@interface NeighborsSimpleCuteVoiceShowView ()<AVAudioRecorderDelegate>
@property (nonatomic,strong)UIView *bg_view;
@property (nonatomic,strong)UIButton *topBtn;
@property (nonatomic,strong)UILabel *contentLab;
@property (nonatomic,strong)UIButton *okBtn;
@property (nonatomic,strong)UIButton *cancelBtn;
@property (nonatomic,strong)UIButton *voiceBtn;
@property (nonatomic,strong)UILabel *timeLab;
@property (nonatomic,strong)UIButton *closeBtn;
@property (nonatomic,strong) AVAudioRecorder *audioRecorder;//音频录音机
@property (nonatomic,strong) NSTimer *timer;//录音声波监控（注意这里暂时不对播放进行监控）
@property (nonatomic,assign)NSInteger cutDown;
@property (nonatomic,assign)BOOL isRecorder;
@end

@implementation NeighborsSimpleCuteVoiceShowView
-(NSTimer *)timer{
    if (!_timer) {
        _timer=[NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(updateProgress) userInfo:nil repeats:true];
    }
    return _timer;
}
-(void)updateProgress
{
    self.cutDown++;
    self.timeLab.hidden = NO;
    self.timeLab.text = [NSString stringWithFormat:@"%ldS",(long)self.cutDown];
}
-(AVAudioRecorder *)audioRecorder{
    if (!_audioRecorder) {
        //创建录音文件保存路径
        NSURL *url=[self getSavePath];
        //创建录音格式设置
        NSDictionary *setting=[self getAudioSetting];
        //创建录音机
        NSError *error=nil;
        _audioRecorder=[[AVAudioRecorder alloc]initWithURL:url settings:setting error:&error];
        _audioRecorder.delegate=self;
        _audioRecorder.meteringEnabled=YES;//如果要监控声波则必须设置为YES
        if (error) {
            NSLog(@"创建录音机对象时发生错误，错误信息：%@",error.localizedDescription);
            return nil;
        }
    }
    return _audioRecorder;
}
/**
 *  取得录音文件设置
 *
 *  @return 录音设置
 */
-(NSDictionary *)getAudioSetting{
    NSMutableDictionary *dicM=[NSMutableDictionary dictionary];
    //设置录音格式
    [dicM setObject:@(kAudioFormatLinearPCM) forKey:AVFormatIDKey];
    //设置录音采样率，8000是电话采样率，对于一般录音已经够了
    [dicM setObject:@(8000) forKey:AVSampleRateKey];
    //设置通道,这里采用单声道
    [dicM setObject:@(1) forKey:AVNumberOfChannelsKey];
    //每个采样点位数,分为8、16、24、32
    [dicM setObject:@(8) forKey:AVLinearPCMBitDepthKey];
    //是否使用浮点数采样
    [dicM setObject:@(YES) forKey:AVLinearPCMIsFloatKey];
    //....其他设置等
    return dicM;
}
/**
 *  取得录音文件保存路径
 *
 *  @return 录音文件路径
 */
-(NSURL *)getSavePath{
    NSString *urlStr=[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];
    urlStr=[urlStr stringByAppendingPathComponent:kRecordAudioFile];
    NSLog(@"file path:%@",urlStr);
    NSURL *url=[NSURL fileURLWithPath:urlStr];
    return url;
}

- (UIButton *)okBtn
{
    if (!_okBtn) {
        
        _okBtn = [[UIButton alloc]init];
        [_okBtn setTitle:@"Send" forState:UIControlStateNormal];
        [_okBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _okBtn.layer.cornerRadius = 8.0f;
        _okBtn.layer.masksToBounds = YES;
        [_okBtn addTarget:self action:@selector(actionOkBtn:) forControlEvents:UIControlEventTouchUpInside];
        [_okBtn gradientButtonWithSize:CGSizeMake(60, 60) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _okBtn;
}
-(void)actionOkBtn:(UIButton *)btn
{
    NSLog(@"actionOkBtnactionOkBtnactionOkBtn btn");
    if (self.cutDown <= 0) {
        [SVProgressHUD showInfoWithStatus:@"Please record audio first"];
        return;
    }
    if (!self.isRecorder) {
        [SVProgressHUD showInfoWithStatus:@"Save the recording before you can send it"];
    }
    [SVProgressHUD show];
    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
            dispatch_async(dispatch_get_main_queue(), ^{
                [SVProgressHUD dismiss];
                [SVProgressHUD showInfoWithStatus:@"Send Successfully"];
                [UIView animateWithDuration:0.3 animations:^{
                    self.alpha = 0;
                } completion:^(BOOL finished) {
                    self.hidden = YES;
                    [self removeFromSuperview];
                }];
        });
    });
}
- (UIButton *)cancelBtn
{
    if (!_cancelBtn) {
        _cancelBtn = [[UIButton alloc]init];
        [_cancelBtn setTitle:@"Cancel" forState:UIControlStateNormal];
        [_cancelBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _cancelBtn.layer.cornerRadius = 8.0f;
        _cancelBtn.layer.masksToBounds = YES;
        [_cancelBtn addTarget:self action:@selector(actionCancelBtn:) forControlEvents:UIControlEventTouchUpInside];
        [_cancelBtn gradientButtonWithSize:CGSizeMake(60, 60) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _cancelBtn;
}

-(void)actionCancelBtn:(UIButton *)btn
{
    [UIView animateWithDuration:0.3 animations:^{
        self.alpha = 0;
    } completion:^(BOOL finished) {
        self.hidden = YES;
        [self removeFromSuperview];
    }];
}

- (UIButton *)closeBtn
{
    if (!_closeBtn) {
        _closeBtn = [[UIButton alloc]init];
        [_closeBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_vocie_del")] forState:UIControlStateNormal];
        [_closeBtn addTarget:self action:@selector(actionCloseBtn:) forControlEvents:UIControlEventTouchUpInside];
        _closeBtn.hidden = YES;
    }
    return _closeBtn;
}

-(void)actionCloseBtn:(UIButton *)btn
{
    self.timeLab.hidden = YES;
    self.closeBtn.hidden = YES;
    self.timer.fireDate=[NSDate distantFuture];
    [self.voiceBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_send_voice")] forState:UIControlStateNormal];
    [self.audioRecorder pause];
}

- (UILabel *)timeLab
{
    if (!_timeLab) {
        _timeLab = [[UILabel alloc]init];
        _timeLab.text = @"1s";
        _timeLab.textColor = [UIColor whiteColor];
        _timeLab.textAlignment = NSTextAlignmentCenter;
        _timeLab.font = [UIFont systemFontOfSize:16];
        _timeLab.hidden = YES;
    }
    return _timeLab;
}

- (UIButton *)voiceBtn
{
    if (!_voiceBtn) {
        _voiceBtn = [[UIButton alloc]init];
        [_voiceBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_send_voice")] forState:UIControlStateNormal];
        _voiceBtn.layer.cornerRadius = 127/2;
        _voiceBtn.layer.masksToBounds = YES;
        [_voiceBtn addTarget:self action:@selector(actionSendVoice:) forControlEvents:UIControlEventTouchUpInside];
        [_voiceBtn gradientButtonWithSize:CGSizeMake(60, 60) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _voiceBtn;
}

-(void)actionSendVoice:(UIButton *)sender
{
    NSLog(@"actionSendVoiceactionSendVoice btn");
    sender.selected = !sender.selected;
    if (sender.selected) {
        [self.voiceBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_stop")] forState:UIControlStateNormal];
        [self.audioRecorder record];//首次使用应用时如果调用record方法会询问用户是否允许使用麦克风
        self.timer.fireDate=[NSDate distantPast];
        self.closeBtn.hidden = YES;
    }else{
        [self.voiceBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play")] forState:UIControlStateNormal];
        [self.audioRecorder pause];
        self.timer.fireDate=[NSDate distantFuture];
        self.closeBtn.hidden = NO;
        self.isRecorder = YES;
    }
}
- (UIView *)bg_view
{
    if (!_bg_view) {
        _bg_view = [[UIView alloc]init];
        _bg_view.backgroundColor = [UIColor whiteColor];
        _bg_view.layer.cornerRadius = 5.0f;
        _bg_view.layer.masksToBounds = YES;
    }
    return _bg_view;
}

- (UIButton *)topBtn
{
    if (!_topBtn) {
        _topBtn = [[UIButton alloc]init];
        [_topBtn setTitle:@"Send Voice" forState:UIControlStateNormal];
        [_topBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_topBtn gradientButtonWithSize:CGSizeMake(60, 60) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _topBtn;
}
- (UILabel *)contentLab
{
    if (!_contentLab) {
        _contentLab = [[UILabel alloc]init];
        _contentLab.text = @"Say something interesting or sing a song. If someone is interested in your voice, you can video chat.";
        _contentLab.numberOfLines = 0;
        _contentLab.textColor = RGB(146, 119, 88);
        _contentLab.textAlignment = NSTextAlignmentCenter;
    }
    return _contentLab;
}


- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.8];
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self addSubview:self.bg_view];
    [self.bg_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.right.offset(-20);
        make.centerX.mas_equalTo(self);
        make.centerY.mas_equalTo(self).offset(-20);
        make.height.offset(450);
        
    }];
    [self.bg_view addSubview:self.topBtn];
    [self.topBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.offset(0);
        make.height.offset(60);
    }];
    [self.bg_view addSubview:self.voiceBtn];
    [self.voiceBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bg_view);
        make.centerY.mas_equalTo(self.bg_view).offset(-20);
        make.width.height.offset(127);
    }];
    [self.bg_view addSubview:self.timeLab];
    [self.timeLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bg_view);
        make.bottom.mas_equalTo(self.voiceBtn.mas_bottom).offset(-10);
    }];
    [self.bg_view addSubview:self.closeBtn];
    [self.closeBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.mas_equalTo(self.voiceBtn.mas_top).offset(0);
        make.left.mas_equalTo(self.voiceBtn.mas_right).offset(-20);
        make.width.height.offset(30);
    }];
    [self.bg_view addSubview:self.contentLab];
    [self.contentLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.right.offset(-20);
        make.top.mas_equalTo(self.voiceBtn.mas_bottom).offset(25);
    }];
    CGFloat bottomW = (IPHONE_WIDTH -60)/2;
    [self addSubview:self.cancelBtn];
    [self.cancelBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.top.mas_equalTo(self.bg_view.mas_bottom).offset(20);
        make.width.offset(bottomW);
        make.height.offset(50);
    }];
    [self addSubview:self.okBtn];
    [self.okBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.cancelBtn);
        make.right.offset(-20);
        make.width.offset(bottomW);
        make.height.offset(50);
    }];
    
}

@end

@interface NeighborsSimpleCuteVoicePlayView ()

@property (nonatomic,strong)UIView *bgView;

@property (nonatomic,strong)UIButton *closeBtn;

@property (nonatomic,strong)UIButton *reportBtn;

@property (nonatomic,strong)UIButton *callBtn;

@property (nonatomic,strong)UIButton *messageBtn;

@property (nonatomic,strong)UIView *centerView;

@property (nonatomic,strong)UILabel *contentLab;

@property (nonatomic,strong)UIImageView *iconImg;

@property (nonatomic,strong)UIImageView *playImg;

@property (nonatomic,strong)UIButton *playBtn;

@property (nonatomic,strong)UIView *effectView;

@property (nonatomic,copy)NSString *urlStr;

@property (nonatomic,strong)NSTimer     *timer;

@property (nonatomic,strong)UIView *alterView;

@property (nonatomic,strong)UIView  *subBgView;

@property (nonatomic,strong)UIButton *firstBtn;

@property (nonatomic,strong)UIButton *secondBtn;

@property (nonatomic,strong)UIButton *thirdBtn;

@property (nonatomic,strong)UIButton *fourBtn;


@end

@implementation NeighborsSimpleCuteVoicePlayView

- (void)setExporeModel:(NeighborsSimpleCuteExploreListModel *)exporeModel
{
    _exporeModel = exporeModel;
    NSString *imageUrl = [NSString stringWithFormat:@"%@/%@",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th,exporeModel.userInfo.imgUrl];
    NSLog(@"imageurl:%@",imageUrl);
    self.urlStr = [NSString stringWithFormat:@"%@/%@",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th,exporeModel.bottle.audioUrl];
    NSLog(@"self.urlStr:%@",self.urlStr);
    if ([self.urlStr containsString:@";"]) {
        NSArray *array =  [self.urlStr componentsSeparatedByString:@";"];
        self.urlStr = array[0];
    }
    self.contentLab.text = [NSString stringWithFormat:@"Click listen %@’s voice",exporeModel.userInfo.nickName];
    [self.iconImg sd_setImageWithURL:[NSURL URLWithString:imageUrl]];
}

- (void)setVoiceModel:(NeighborsSimpleCuteHomeVoiceModel *)voiceModel
{
    _voiceModel = voiceModel;
    NSString *imageUrl = [NSString stringWithFormat:@"%@/%@",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th,voiceModel.userInfo.imgUrl];
    NSLog(@"imageurl:%@",imageUrl);
    self.urlStr = [NSString stringWithFormat:@"%@/%@",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th,voiceModel.audioUrl];
    NSLog(@"self.urlStr:%@",self.urlStr);
    if ([self.urlStr containsString:@";"]) {
        NSArray *array =  [self.urlStr componentsSeparatedByString:@";"];
        self.urlStr = array[0];
    }
    self.contentLab.text = [NSString stringWithFormat:@"Click listen %@’s voice",voiceModel.userInfo.nickName];
    [self.iconImg sd_setImageWithURL:[NSURL URLWithString:imageUrl]];
}
- (NSTimer *)timer
{
    if (!_timer) {
        _timer =[NSTimer timerWithTimeInterval:0.1 target:self selector:@selector(timerAct) userInfo:nil repeats:YES];
        [[NSRunLoop currentRunLoop] addTimer:_timer forMode:NSRunLoopCommonModes];
    }
    return _timer;
}
-(void)timerAct
{
    if ([LZPlayerManager lzPlayerManager].player.currentTime.timescale == 0 || [LZPlayerManager lzPlayerManager].player.currentItem.duration.timescale == 0 ) {
        return;
    }
    // 获得当前时间
    long long int currentTime = [LZPlayerManager lzPlayerManager].player.currentTime.value / [LZPlayerManager lzPlayerManager].player.currentTime.timescale;
    
    // 获得音乐总时长
    long long int totalTime = [LZPlayerManager lzPlayerManager].player.currentItem.duration.value / [LZPlayerManager lzPlayerManager].player.currentItem.duration.timescale;
    NSString *str = [NSString stringWithFormat:@"%lld",totalTime];
    if (currentTime == totalTime) {
        [[LZPlayerManager lzPlayerManager]playAndPause];
        self.playImg.hidden = YES;
        [self.playImg stopAnimating];
        [self.playBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play")] forState:UIControlStateNormal];
        return;
    }
    if ([LZPlayerManager lzPlayerManager].isPlay) {//正在播放歌曲时头像转动
        [UIView beginAnimations:@"rzoration" context:nil];
        [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
        self.iconImg.transform = CGAffineTransformRotate(self.iconImg.transform, 0.1);
        [UIView commitAnimations];
    }
}

- (UIView *)alterView
{
    if (!_alterView) {
        _alterView = [[UIView alloc]init];
        _alterView.backgroundColor = [[UIColor blackColor]colorWithAlphaComponent:0.4];
        _alterView.hidden = YES;
    }
    return _alterView;
}

- (UIButton *)firstBtn
{
    if (!_firstBtn) {
        _firstBtn = [[UIButton alloc]init];
        [_firstBtn setImage:[UIImage imageNamed:TUIKitResource(@"spoiledSupriseReport")] forState:UIControlStateNormal];
        [_firstBtn setTitle:@" Report" forState:UIControlStateNormal];
        _firstBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_firstBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        [_firstBtn addTarget:self action:@selector(actionFirstBtn:) forControlEvents:UIControlEventTouchUpInside];
        _firstBtn.tag = 0;
    }
    return _firstBtn;
}

-(void)actionFirstBtn:(UIButton *)btn
{
    NSLog(@"actionFirstBtnactionFirstBtn");
    if (self.NeighborsSimpleCuteVoicePlayViewReportBlock) {
        self.NeighborsSimpleCuteVoicePlayViewReportBlock();
    }
    self.hidden = YES;
    if ([LZPlayerManager lzPlayerManager].isPlay) {
        [[LZPlayerManager lzPlayerManager]playAndPause];
        self.playImg.hidden = YES;
        [self.playImg stopAnimating];
        [self.playBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play")] forState:UIControlStateNormal];
    }
}
- (UIButton *)secondBtn
{
    if (!_secondBtn) {
        _secondBtn = [[UIButton alloc]init];
        [_secondBtn setImage:[UIImage imageNamed:TUIKitResource(@"spoiledSupriseBlock")] forState:UIControlStateNormal];
        [_secondBtn setTitle:@" Block" forState:UIControlStateNormal];
        _thirdBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_secondBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        [_secondBtn addTarget:self action:@selector(actionSecondBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _secondBtn;
}

-(void)actionSecondBtn:(UIButton *)btn
{
    NSLog(@"actionSecondBtn");
//    [SVProgressHUD show];
//    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
//        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
//            dispatch_async(dispatch_get_main_queue(), ^{
//                [SVProgressHUD dismiss];
//                [SVProgressHUD showInfoWithStatus:@"Block successfully"];
//                self.alterView.hidden = YES;
//                self.subBgView.hidden = YES;
//        });
//    });
    [SVProgressHUD show];
    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
            dispatch_async(dispatch_get_main_queue(), ^{
                [SVProgressHUD dismiss];
                [SVProgressHUD showInfoWithStatus:@"Blocked successfully"];
                self.alterView.hidden = YES;
                self.subBgView.hidden = YES;
                if (self.NeighborsSimpleCuteVoicePlayViewDelBlock) {
                    self.NeighborsSimpleCuteVoicePlayViewDelBlock();
                }
                if ([LZPlayerManager lzPlayerManager].isPlay) {
                    [[LZPlayerManager lzPlayerManager]playAndPause];
                    self.playImg.hidden = YES;
                    [self.playImg stopAnimating];
                    [self.playBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play")] forState:UIControlStateNormal];
                }
                [self removeFromSuperview];
        });
    });
}
- (UIButton *)thirdBtn
{
    if (!_thirdBtn) {
        _thirdBtn = [[UIButton alloc]init];
        [_thirdBtn setImage:[UIImage imageNamed:TUIKitResource(@"spoiledSupriseDelete")] forState:UIControlStateNormal];
        [_thirdBtn setTitle:@" Delete" forState:UIControlStateNormal];
        _thirdBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_thirdBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        [_thirdBtn addTarget:self action:@selector(actionThirdBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _thirdBtn;
}

-(void)actionThirdBtn:(UIButton *)btn
{
    NSLog(@"actionThirdBtn");
    [SVProgressHUD show];
    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
            dispatch_async(dispatch_get_main_queue(), ^{
                [SVProgressHUD dismiss];
                [SVProgressHUD showInfoWithStatus:@"Delete successfully"];
                self.alterView.hidden = YES;
                self.subBgView.hidden = YES;
                if (self.NeighborsSimpleCuteVoicePlayViewDelBlock) {
                    self.NeighborsSimpleCuteVoicePlayViewDelBlock();
                }
                if ([LZPlayerManager lzPlayerManager].isPlay) {
                    [[LZPlayerManager lzPlayerManager]playAndPause];
                    self.playImg.hidden = YES;
                    [self.playImg stopAnimating];
                    [self.playBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play")] forState:UIControlStateNormal];
                }
                [self removeFromSuperview];
        });
    });
}
- (UIButton *)fourBtn
{
    if (!_fourBtn) {
        _fourBtn = [[UIButton alloc]init];
        [_fourBtn setImage:[UIImage imageNamed:TUIKitResource(@"spoiledSupriseCancel")] forState:UIControlStateNormal];
        [_fourBtn setTitle:@" Cancel" forState:UIControlStateNormal];
        _fourBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_fourBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        [_fourBtn addTarget:self action:@selector(actionFourBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _fourBtn;
}

-(void)actionFourBtn:(UIButton *)btn
{
    self.alterView.hidden = YES;
    self.subBgView.hidden = YES;
    if ([LZPlayerManager lzPlayerManager].isPlay) {
        [[LZPlayerManager lzPlayerManager]playAndPause];
        [self.playImg stopAnimating];
        [self.playBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play")] forState:UIControlStateNormal];
    }
}
- (UIView *)subBgView
{
    if (!_subBgView) {
        _subBgView = [[UIView alloc]init];
        _subBgView.backgroundColor = [UIColor whiteColor];
        _subBgView.layer.cornerRadius = 5.0f;
        _subBgView.layer.masksToBounds = YES;
        _subBgView.hidden = YES;
    }
    return _subBgView;
}

- (UIView *)effectView
{
    if (!_effectView) {
        _effectView = [[UIView alloc]init];
        _effectView.backgroundColor = [[UIColor blackColor]colorWithAlphaComponent:0.4];
    }
    return _effectView;
}

- (UIImageView *)playImg
{
    if (!_playImg) {
        _playImg = [[UIImageView alloc]init];
        //_playImg.image = [UIImage imageNamed:TUIKitResource(@"test")];
        _playImg.contentMode = UIViewContentModeScaleAspectFill;
        _playImg.hidden  = YES;
    }
    return _playImg;
}

- (UIButton *)playBtn
{
    if (!_playBtn) {
        _playBtn = [[UIButton alloc]init];
        [_playBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play")] forState:UIControlStateNormal];
        [_playBtn addTarget:self action:@selector(actionPlayBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _playBtn;
}
-(void)actionPlayBtn:(UIButton *)sender
{
    NSLog(@"actionPlayBtnactionPlayBtn");
    sender.selected = !sender.selected;
    if (sender.selected) {
        self.playImg.hidden = NO;
        [[LZPlayerManager lzPlayerManager]replaceItemWithUrlString:self.urlStr];
        [self.playBtn setImage:[UIImage imageNamed:@""] forState:UIControlStateNormal];
        NSMutableArray *images = [NSMutableArray array];
        for (int i = 1; i <= 60; i++) {
            NSString *imageName = [NSString stringWithFormat:TUIKitResource(@"zhendonghua6yuemoapp (%d)"),i];
            NSLog(@"imageName:%@",imageName);
            [images addObject:[UIImage imageNamed:imageName]];
        }
        [self.playImg setAnimationImages:images];
        [self.playImg setAnimationRepeatCount:100000000];
        [self.playImg startAnimating];
        self.timer.fireDate=[NSDate distantPast];
    }else{
        self.playImg.hidden = YES;
        [[LZPlayerManager lzPlayerManager]playAndPause];
        [self.playImg stopAnimating];
        [self.playBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play")] forState:UIControlStateNormal];
        self.timer.fireDate=[NSDate distantFuture];
    }
}

- (UIImageView *)iconImg
{
    if (!_iconImg) {
        _iconImg = [[UIImageView alloc]init];
        _iconImg.contentMode = UIViewContentModeScaleAspectFill;
        _iconImg.layer.cornerRadius = 96.0f;
        _iconImg.layer.borderColor = [UIColor grayColor].CGColor;
        _iconImg.layer.borderWidth = .0f;
        _iconImg.layer.masksToBounds = YES;
    }
    return _iconImg;
}

-(void)stopTimer{
    self.timer.fireDate=[NSDate distantFuture];
    [self.timer invalidate];
    if (self.timer) {
        self.timer = nil;
    }
}

- (UILabel *)contentLab
{
    if (!_contentLab) {
        _contentLab = [[UILabel alloc]init];
        _contentLab.text = @"Click listen Tom’s voice";
        _contentLab.numberOfLines = 0;
        _contentLab.textColor = RGB(146, 119, 88);
        _contentLab.textAlignment = NSTextAlignmentCenter;
    }
    return _contentLab;
}
- (UIView *)bgView
{
    if (!_bgView) {
        _bgView = [[UIView alloc]init];
        _bgView.backgroundColor = [UIColor whiteColor];
        _bgView.layer.cornerRadius = 5.0f;
        _bgView.layer.masksToBounds  = YES;
    }
    return _bgView;
}
- (UIView *)centerView
{
    if (!_centerView) {
        _centerView = [[UIView alloc]init];
        _centerView.backgroundColor = [UIColor clearColor];
        _centerView.layer.cornerRadius = 100;
        _centerView.layer.masksToBounds = YES;
    }
    return _centerView  ;
}

- (UIButton *)closeBtn
{
    if (!_closeBtn) {
        _closeBtn = [[UIButton alloc]init];
        [_closeBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play_close")] forState:UIControlStateNormal];
        [_closeBtn addTarget:self action:@selector(actionCloseBtn:) forControlEvents:UIControlEventTouchUpInside];

    }
    return _closeBtn;
}
-(void)actionCloseBtn:(UIButton *)btn
{
    if ([LZPlayerManager lzPlayerManager].isPlay) {
        [[LZPlayerManager lzPlayerManager]playAndPause];
        self.playImg.hidden = YES;
        [self.playImg stopAnimating];
        [self.playBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play")] forState:UIControlStateNormal];
    }
    if (self.NeighborsSimpleCuteVoicePlayViewCloseBlock) {
        self.NeighborsSimpleCuteVoicePlayViewCloseBlock();
    }
    [UIView animateWithDuration:0.3 animations:^{
        self.alpha = 0;
    } completion:^(BOOL finished) {
        self.hidden = YES;
        [self removeFromSuperview];
    }];
}
- (UIButton *)reportBtn
{
    if (!_reportBtn) {
        _reportBtn = [[UIButton alloc]init];
        [_reportBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play_jubao")] forState:UIControlStateNormal];
        [_reportBtn addTarget:self action:@selector(actionReortBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _reportBtn;
}

-(void)actionReortBtn:(UIButton *)btn
{
    NSLog(@"actionReortBtnactionReortBtnactionReortBtn");
    self.alterView.hidden = NO;
    self.subBgView.hidden = NO;
    [self addSubview:self.alterView];
    [self.alterView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self addSubview:self.subBgView];
    
    CGFloat height = (IPHONE_HEIGHT- 450)/2 + 50;
    [self addSubview:self.subBgView];
    [self.subBgView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.offset(height);
            make.right.offset(-60);
            make.width.offset(120);
            make.height.offset(220);
    }];
    CGFloat height2 = 220 / 4;
    [self.subBgView addSubview:self.firstBtn];
    [self.firstBtn mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.top.right.offset(0);
            make.height.offset(height2);
    }];
    [self.subBgView addSubview:self.secondBtn];
    [self.secondBtn mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.right.offset(0);
            make.top.mas_equalTo(self.firstBtn.mas_bottom).offset(0);
            make.height.offset(height2);
    }];
    [self.subBgView addSubview:self.thirdBtn];
    [self.thirdBtn mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.right.offset(0);
            make.top.mas_equalTo(self.secondBtn.mas_bottom).offset(0);
            make.height.offset(height2);
    }];
    [self.subBgView addSubview:self.fourBtn];
    [self.fourBtn mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.bottom.right.offset(0);
            make.height.offset(height2);
    }];
    

}

- (UIButton *)callBtn
{
    if (!_callBtn) {
        _callBtn = [[UIButton alloc]init];
        [_callBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play_video")] forState:UIControlStateNormal];
        [_callBtn addTarget:self action:@selector(actionCallBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _callBtn;
}

-(void)actionCallBtn:(UIButton *)btn
{
    NSLog(@"actionCallBtnactionCallBtnactionCallBtn");
    if (self.NeighborsSimpleCuteVoicePlayViewCallBlock) {
        self.NeighborsSimpleCuteVoicePlayViewCallBlock();
    }
    if ([LZPlayerManager lzPlayerManager].isPlay) {
        [[LZPlayerManager lzPlayerManager]playAndPause];
        self.playImg.hidden = YES;
        [self.playImg stopAnimating];
        [self.playBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play")] forState:UIControlStateNormal];
    }
}

- (UIButton *)messageBtn
{
    if (!_messageBtn) {
        _messageBtn = [[UIButton alloc]init];
        [_messageBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play_chat")] forState:UIControlStateNormal];
        [_messageBtn addTarget:self action:@selector(actionMessageBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _messageBtn;
}

-(void)actionMessageBtn:(UIButton *)btn
{
    NSLog(@"actionMessageBtnactionMessageBtnactionMessageBtn");
    if (self.NeighborsSimpleCuteVoicePlayViewChatBlock) {
        self.NeighborsSimpleCuteVoicePlayViewChatBlock();
    }
    self.hidden = YES;
    if ([LZPlayerManager lzPlayerManager].isPlay) {
        self.playImg.hidden = YES;
        [[LZPlayerManager lzPlayerManager]playAndPause];
        [self.playImg stopAnimating];
        [self.playBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play")] forState:UIControlStateNormal];
    }
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.8];
        [self setpUI];
    }
    return self;
}

-(void)setpUI
{
    [self addSubview:self.bgView];
    [self.bgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.centerX.centerY.mas_equalTo(self);
        make.height.offset(450);
    }];
    [self.bgView addSubview:self.centerView];
    [self.centerView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bgView);
        make.centerY.mas_equalTo(self.bgView).offset(-30);
        make.width.height.offset(200);
    }];
    [self.centerView addSubview:self.iconImg];
    [self.iconImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(4);
        make.right.offset(-4);
        make.top.offset(4);
        make.bottom.offset(-4);
    }];
    [self.centerView addSubview:self.effectView];
    [self.effectView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self.centerView addSubview:self.playBtn];
    [self.playBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.centerView);
        make.left.right.top.bottom.offset(0);
    }];
    [self.centerView addSubview:self.playImg];
    [self.playImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.centerView);
        make.left.right.offset(0);
        make.height.offset(40);
    }];
    [self.bgView addSubview:self.contentLab];
    [self.contentLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bgView);
        make.top.mas_equalTo(self.centerView.mas_bottom).offset(25);
        make.left.offset(10);
        make.right.offset(-10);
    }];
    [self.bgView addSubview:self.closeBtn];
    [self.closeBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(10);
        make.top.offset(10);
        make.width.height.offset(40);
    }];
    [self.bgView addSubview:self.reportBtn];
    [self.reportBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-10);
        make.top.offset(10);
        make.width.height.offset(40);
    }];
    [self.bgView addSubview:self.callBtn];
    [self.callBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.bottom.offset(-20);
        make.centerX.mas_equalTo(self.bgView).offset(-60);
        make.width.height.offset(50);
    }];
    [self.bgView addSubview:self.messageBtn];
    [self.messageBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.bottom.offset(-20);
        make.centerX.mas_equalTo(self.bgView).offset(60);
        make.width.height.offset(50);
    }];
}

@end


@interface NeighborsSimpleCuteVideoCallView()
@property (nonatomic,strong)UIView *bg_view;
@property (nonatomic,strong)UIButton *topBtn;
@property (nonatomic,strong)UILabel *contentLab;
@property (nonatomic,strong)UIButton *okBtn;

@end

@implementation NeighborsSimpleCuteVideoCallView

- (void)setVoiceModel:(NeighborsSimpleCuteHomeVoiceModel *)voiceModel
{
    _voiceModel = voiceModel;
    //self.contentLab.text = [NSString stringWithFormat:@"Sorry, %@ is not online and can't start a video chat.",voiceModel.nameStr];
}

- (UIView *)bg_view
{
    if (!_bg_view) {
        _bg_view = [[UIView alloc]init];
        _bg_view.backgroundColor = [UIColor whiteColor];
        _bg_view.layer.cornerRadius = 5.0f;
        _bg_view.layer.masksToBounds = YES;
    }
    return _bg_view;
}
- (UIButton *)topBtn
{
    if (!_topBtn) {
        _topBtn = [[UIButton alloc]init];
        [_topBtn setTitle:@"Tips" forState:UIControlStateNormal];
        [_topBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_topBtn gradientButtonWithSize:CGSizeMake(60, 60) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _topBtn;
}

- (UILabel *)contentLab
{
    if (!_contentLab) {
        _contentLab = [[UILabel alloc]init];
        _contentLab.text = @"Sorry, this member does not have permission to open video chat for you.";
        _contentLab.numberOfLines = 0;
        _contentLab.textColor = RGB(146, 119, 88);
        _contentLab.textAlignment = NSTextAlignmentCenter;
    }
    return _contentLab;
}
- (UIButton *)okBtn
{
    if (!_okBtn) {
        _okBtn = [[UIButton alloc]init];
        [_okBtn setTitle:@"OK" forState:UIControlStateNormal];
        [_okBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _okBtn.layer.cornerRadius = 8.0f;
        _okBtn.layer.masksToBounds = YES;
        [_okBtn addTarget:self action:@selector(actionOkBtn:) forControlEvents:UIControlEventTouchUpInside];
        [_okBtn gradientButtonWithSize:CGSizeMake(60, 60) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _okBtn;
}

-(void)actionOkBtn:(UIButton *)btn
{
    [UIView animateWithDuration:0.3 animations:^{
        self.alpha = 0;
    } completion:^(BOOL finished) {
        self.hidden = YES;
        [self removeFromSuperview];
    }];
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.8];
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    [self addSubview:self.bg_view];
    [self.bg_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self);
        make.left.offset(30);
        make.right.offset(-30);
        make.height.offset(360);
    }];

    [self.bg_view addSubview:self.topBtn];
    [self.topBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.offset(0);
        make.height.offset(50);
    }];
    [self.bg_view addSubview:self.contentLab];
    [self.contentLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.bg_view);
        make.left.offset(20);
        make.right.offset(-20);
    }];
    [self.bg_view addSubview:self.okBtn];
    [self.okBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bg_view);
        make.bottom.offset(-30);
        make.width.offset(240);
        make.height.offset(50);
    }];
}
@end

//@interface NeighborsSimpleCuteSubPlayVideoView ()
//
//@property (nonatomic,strong)UIView  *bgView;
//
//@property (nonatomic,strong)UIButton *firstBtn;
//
//@property (nonatomic,strong)UIButton *secondBtn;
//
//@property (nonatomic,strong)UIButton *thirdBtn;
//
//@property (nonatomic,strong)UIButton *fourBtn;
//
//@end
//
//@implementation NeighborsSimpleCuteSubPlayVideoView
//
//- (UIButton *)firstBtn
//{
//    if (!_firstBtn) {
//        _firstBtn = [[UIButton alloc]init];
//        [_firstBtn setImage:[UIImage imageNamed:TUIKitResource(@"spoiledSupriseReport")] forState:UIControlStateNormal];
//        [_firstBtn setTitle:@" Report" forState:UIControlStateNormal];
//        _firstBtn.titleLabel.font = [UIFont systemFontOfSize:16];
//        [_firstBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
//        [_firstBtn addTarget:self action:@selector(actionFirstBtn:) forControlEvents:UIControlEventTouchUpInside];
//        _firstBtn.tag = 0;
//    }
//    return _firstBtn;
//}
//
//-(void)actionFirstBtn:(UIButton *)btn
//{
//    NSLog(@"actionFirstBtnactionFirstBtn");
//    if (self.NeighborsSimpleCuteVoicePlayViewReportBlock) {
//        self.NeighborsSimpleCuteVoicePlayViewReportBlock();
//    }
//}
//- (UIButton *)secondBtn
//{
//    if (!_secondBtn) {
//        _secondBtn = [[UIButton alloc]init];
//        [_secondBtn setImage:[UIImage imageNamed:TUIKitResource(@"spoiledSupriseBlock")] forState:UIControlStateNormal];
//        [_secondBtn setTitle:@" Block" forState:UIControlStateNormal];
//        _thirdBtn.titleLabel.font = [UIFont systemFontOfSize:16];
//        [_secondBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
//        [_secondBtn addTarget:self action:@selector(actionSecondBtn:) forControlEvents:UIControlEventTouchUpInside];
//    }
//    return _secondBtn;
//}
//
//-(void)actionSecondBtn:(UIButton *)btn
//{
//    NSLog(@"actionSecondBtn");
//    [SVProgressHUD show];
//    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
//        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
//            dispatch_async(dispatch_get_main_queue(), ^{
//                [SVProgressHUD dismiss];
//                [SVProgressHUD showInfoWithStatus:@"Block successfully"];
//                [self removeFromSuperview];
//        });
//    });
//}
//- (UIButton *)thirdBtn
//{
//    if (!_thirdBtn) {
//        _thirdBtn = [[UIButton alloc]init];
//        [_thirdBtn setImage:[UIImage imageNamed:TUIKitResource(@"spoiledSupriseDelete")] forState:UIControlStateNormal];
//        [_thirdBtn setTitle:@" Delete" forState:UIControlStateNormal];
//        _thirdBtn.titleLabel.font = [UIFont systemFontOfSize:16];
//        [_thirdBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
//        [_thirdBtn addTarget:self action:@selector(actionThirdBtn:) forControlEvents:UIControlEventTouchUpInside];
//    }
//    return _thirdBtn;
//}
//
//-(void)actionThirdBtn:(UIButton *)btn
//{
//    NSLog(@"actionThirdBtn");
//    if (self.NeighborsSimpleCuteVoicePlayViewDelBlock) {
//        self.NeighborsSimpleCuteVoicePlayViewDelBlock();
//    }
//}
//- (UIButton *)fourBtn
//{
//    if (!_fourBtn) {
//        _fourBtn = [[UIButton alloc]init];
//        [_fourBtn setImage:[UIImage imageNamed:TUIKitResource(@"spoiledSupriseCancel")] forState:UIControlStateNormal];
//        [_fourBtn setTitle:@" Cancel" forState:UIControlStateNormal];
//        _fourBtn.titleLabel.font = [UIFont systemFontOfSize:16];
//        [_fourBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
//        [_fourBtn addTarget:self action:@selector(actionFourBtn:) forControlEvents:UIControlEventTouchUpInside];
//    }
//    return _fourBtn;
//}
//
//-(void)actionFourBtn:(UIButton *)btn
//{
////    NSLog(@"actionFourBtnactionFourBtn");
////    [UIView animateWithDuration:0.3 animations:^{
////        self.alpha = 0;
////    } completion:^(BOOL finished) {
////        self.hidden = YES;
////        [self removeFromSuperview];
////    }];
//}
//- (UIView *)bgView
//{
//    if (!_bgView) {
//        _bgView = [[UIView alloc]init];
//        _bgView.backgroundColor = [UIColor whiteColor];
//        _bgView.layer.cornerRadius = 5.0f;
//        _bgView.layer.masksToBounds = YES;
//    }
//
//    return _bgView;
//}
//- (instancetype)initWithFrame:(CGRect)frame
//{
//    self = [super initWithFrame:frame];
//    if (self) {
//        self.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.2];
//        [self setupUI];
//    }
//    return self;
//}
//-(void)setupUI
//{
//    CGFloat height = (IPHONE_HEIGHT- 450)/2 + 50;
//    [self addSubview:self.bgView];
//    [self.bgView mas_makeConstraints:^(MASConstraintMaker *make) {
//        make.top.offset(height);
//        make.right.offset(-60);
//        make.width.offset(120);
//        make.height.offset(220);
//    }];
//    CGFloat height2 = 220 / 4;
//    [self.bgView addSubview:self.firstBtn];
//    [self.firstBtn mas_makeConstraints:^(MASConstraintMaker *make) {
//        make.left.top.right.offset(0);
//        make.height.offset(height2);
//    }];
//    [self.bgView addSubview:self.secondBtn];
//    [self.secondBtn mas_makeConstraints:^(MASConstraintMaker *make) {
//        make.left.right.offset(0);
//        make.top.mas_equalTo(self.firstBtn.mas_bottom).offset(0);
//        make.height.offset(height2);
//    }];
//    [self.bgView addSubview:self.thirdBtn];
//    [self.thirdBtn mas_makeConstraints:^(MASConstraintMaker *make) {
//        make.left.right.offset(0);
//        make.top.mas_equalTo(self.secondBtn.mas_bottom).offset(0);
//        make.height.offset(height2);
//    }];
//    [self.bgView addSubview:self.fourBtn];
//    [self.fourBtn mas_makeConstraints:^(MASConstraintMaker *make) {
//        make.left.bottom.right.offset(0);
//        make.height.offset(height2);
//    }];
//}
//
//@end
@interface NeighborsSimpleCuteHomeVoiceUserInfoModel ()

@end

@implementation NeighborsSimpleCuteHomeVoiceUserInfoModel


@end

@implementation NeighborsSimpleCuteExploreListBottleModel

@end

@implementation NeighborsSimpleCuteExploreListUserModel

@end

@implementation NeighborsSimpleCuteExploreListModel

@end


@interface NeighborsSimpleCuteHomeVoiceModel ()

@end


@implementation NeighborsSimpleCuteHomeVoiceModel
@end

//聊天界面的model
@interface SocializeIntercourseMessageModel()

@end

@implementation SocializeIntercourseMessageModel

@end

//聊天界面的model
@interface SocializeIntercourseMessageOtherModel()

@end

@implementation SocializeIntercourseMessageOtherModel

@end

static NeighborsSimpleCuteDBTool *instance = nil;

@interface NeighborsSimpleCuteDBTool ()

@property (strong,nonatomic)FMDatabase *NSCDB;

@end




@implementation NeighborsSimpleCuteDBTool

+ (instancetype)NeighborsSimpleCuteProjectSharaDBTool
{
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        instance = [[NeighborsSimpleCuteDBTool alloc]init];
    });
    return  instance;
}
- (void)NeighborsSimpleCuteProjectCreateDataBase
{
    NSString *doc = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];
    NSString *filename = [doc stringByAppendingPathComponent:@"NeighborsSimpleCuteProject.sqlite"];
    FMDatabase *db = [FMDatabase databaseWithPath:filename];
    if ([db open]) {
        BOOL result = [db executeUpdate:@"CREATE TABLE IF NOT EXISTS n_voice (id integer PRIMARY KEY AUTOINCREMENT,n_name_str text NOT NULL, n_avtor_str text NOT NULL,n_url_str text NOT NULL);"];
        if (result) {
            NSLog(@"create n_voice success");
        }else{
            NSLog(@"create n_voice failure");
        }
        BOOL result2 = [db executeUpdate:@"CREATE TABLE IF NOT EXISTS s_message (id integer PRIMARY KEY AUTOINCREMENT,storeNameStr text NOT NULL, sendIconStr text NOT NULL,sendTimeStr text NOT NULL,sendContentStr text NOT NULL,sendType text NOT NULL,sendPicture bool);"];
        if (result2) {
            NSLog(@"创建s_message成功");
        }else{
            NSLog(@"创建s_message失败");
        }
        BOOL result3 = [db executeUpdate:@"CREATE TABLE IF NOT EXISTS s_messageStore (id integer PRIMARY KEY AUTOINCREMENT,storeNameStr text NOT NULL,storeTimeStr text NOT NULL,storeIconStr text NOT NULL,storeLastStr text NOT NULL);"];
        if (result3) {
            NSLog(@"创建s_messageStore成功");
        }else{
            NSLog(@"创建s_messageStore失败");
        }
    }
    self.NSCDB = db;
}

-(void)insertNeighborsSimpleCuteProjectPlanModel:(NeighborsSimpleCuteHomeVoiceModel *)voicemodel
{
    if ([self isEixistWithVoiceModel:voicemodel] == NO) {
       // [self.NSCDB executeUpdate:@"INSERT INTO n_voice (n_name_str,n_avtor_str,n_url_str) VALUES (?,?,?);",voicemodel.nameStr,voicemodel.avtorStr,voicemodel.urlStr];
    }
}
- (NSMutableArray *)queryAllNeighborsSimpleCuteProjectVoice
{
    NSMutableArray *arry = [NSMutableArray array];
    FMResultSet *resultset = [self.NSCDB executeQuery:@"SELECT * FROM n_voice"];
          while ([resultset next]) {
              NeighborsSimpleCuteHomeVoiceModel *model = [[NeighborsSimpleCuteHomeVoiceModel alloc]init];
//              model.index = [resultset intForColumn:@"id"];
//              model.nameStr = [resultset stringForColumn:@"n_name_str"];
//              model.avtorStr = [resultset stringForColumn:@"n_avtor_str"];
//              model.urlStr      = [resultset stringForColumn:@"n_url_str"];
              [arry addObject:model];
        }
    [resultset close];
    return arry;
}
-(BOOL)isEixistWithVoiceModel:(NeighborsSimpleCuteHomeVoiceModel *)model
{
    BOOL isHave = NO;
    NSMutableArray *arry = [NSMutableArray array];
    arry = [self queryAllNeighborsSimpleCuteProjectVoice];
    for (NeighborsSimpleCuteHomeVoiceModel *voicemodel in arry) {
//        if ([voicemodel.nameStr isEqualToString:model.nameStr]) {
//            isHave = YES;
//            break;
//        }
    }
    return isHave;
}


-(void)deleteNeighborsSimpleCuteProjectVoiceModel:(NeighborsSimpleCuteHomeVoiceModel *)voicemodel
{
    
  //  [self.NSCDB executeUpdate:@"DELETE FROM n_voice WHERE id = ?;",@(voicemodel.index)];
}

// 聊天界面需要的功能
-(void)insertMessageModel:(SocializeIntercourseMessageModel *)messageModel
{
    [self.NSCDB executeUpdate:@"INSERT INTO s_message (storeNameStr,sendIconStr,sendTimeStr,sendContentStr,sendType,sendPicture) VALUES (?,?,?,?,?,?);",messageModel.storeNameStr,messageModel.sendIconStr,messageModel.sendTimeStr,messageModel.sendContentStr,messageModel.sendType,messageModel.sendPicture];
}
-(void)deleteMessageModel:(SocializeIntercourseMessageModel *)messageModel
{
    [self.NSCDB executeUpdate:@"DELETE FROM s_message WHERE id = ?;",@(messageModel.index)];
}
- (NSMutableArray *)queryAllMessageModel
{
    NSMutableArray *arry = [NSMutableArray array];
    FMResultSet *resultset = [self.NSCDB executeQuery:@"SELECT * FROM s_message"];
          while ([resultset next]) {
              SocializeIntercourseMessageModel *model = [[SocializeIntercourseMessageModel alloc]init];
              model.index  = [resultset intForColumn:@"id"];
              model.storeNameStr = [resultset stringForColumn:@"storeNameStr"];
              model.sendIconStr  = [resultset stringForColumn:@"sendIconStr"];
              model.sendTimeStr  = [resultset stringForColumn:@"sendTimeStr"];
              model.sendContentStr  = [resultset stringForColumn:@"sendContentStr"];
              model.sendType  = [resultset stringForColumn:@"sendType"];
              model.sendPicture = [resultset dataForColumn:@"sendPicture"];
              [arry addObject:model];
          }
    [resultset close];
    return arry;
}
//插入数据的功能
-(void)insertMessageStoreModel:(SocializeIntercourseMessageOtherModel *)messageStoreModel
{
    [self.NSCDB executeUpdate:@"INSERT INTO s_messageStore (storeNameStr,storeTimeStr,storeIconStr,storeLastStr) VALUES (?,?,?,?);",messageStoreModel.storeNameStr,messageStoreModel.storeTimeStr,messageStoreModel.storeIconStr,messageStoreModel.storeLastStr];
}
-(void)updateMessageStoreModel:(SocializeIntercourseMessageOtherModel *)messageStoreModel
{
    [self.NSCDB executeUpdate:@"UPDATE s_messageStore  set storeNameStr = ?,storeTimeStr = ?,storeIconStr = ?, storeLastStr = ?  where id = ?",messageStoreModel.storeNameStr,messageStoreModel.storeTimeStr,messageStoreModel.storeIconStr,messageStoreModel.storeLastStr,@(messageStoreModel.index)];
}
-(void)deleteMessageStoreModel:(SocializeIntercourseMessageOtherModel *)messageStoreModel
{
    [self.NSCDB executeUpdate:@"DELETE FROM s_messageStore WHERE id = ?;",@(messageStoreModel.index)];
}

-(BOOL)isExistMessageStoreModel:(NSString *)storeNameStr
{
    BOOL isExist = NO;
    NSMutableArray *array = [self queryAllMessageStoreModel];
    for (SocializeIntercourseMessageOtherModel *model in array) {
        if ([model.storeNameStr isEqualToString:storeNameStr]) {
            isExist = YES;
            break;
        }
    }
    return isExist;
}

- (NSMutableArray *)queryAllMessageStoreModel
{
    NSMutableArray *arry = [NSMutableArray array];
    FMResultSet *resultset = [self.NSCDB executeQuery:@"SELECT * FROM s_messageStore"];
          while ([resultset next]) {
              SocializeIntercourseMessageOtherModel *model = [[SocializeIntercourseMessageOtherModel alloc]init];
              model.index  = [resultset intForColumn:@"id"];
              model.storeNameStr = [resultset stringForColumn:@"storeNameStr"];
              model.storeTimeStr  = [resultset stringForColumn:@"storeTimeStr"];
              model.storeIconStr  = [resultset stringForColumn:@"storeIconStr"];
              model.storeLastStr  = [resultset stringForColumn:@"storeLastStr"];
              [arry addObject:model];
          }
    [resultset close];
    return arry;
}

@end


@interface LZPlayerManager ()

@end

static LZPlayerManager *_lzPlayerManager = nil;


@implementation LZPlayerManager

+(instancetype)lzPlayerManager{
    
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _lzPlayerManager = [[LZPlayerManager alloc]init];
        
    });
    return _lzPlayerManager;
}
/*初始化播放器*/
- (instancetype)init
{
    if (self = [super init]) {
        _player = [[AVPlayer alloc] init];
        AVAudioSession *session = [AVAudioSession sharedInstance];
        [session  setCategory:AVAudioSessionCategoryPlayback error:nil];
        [session setActive:YES error:nil];
    }
    return self;
}

// 播放
- (void)playerPlay
{
    [_player play];
    _isPlay = YES;
    
}
//暂停
- (void)playerPause
{
    [_player pause];
    _isPlay = NO;
  
}
//播放和暂停
- (void)playAndPause
{
    if (self.isPlay) {
        [self playerPause];
        if (self.isStartPlayer) {
            self.isStartPlayer(1);
        }
    }else{
        [self playerPlay];
        if (self.isStartPlayer) {
            self.isStartPlayer(0);
        }
    }
}
//前一首
- (void)playPrevious
{
    if (self.index == 0) {
        self.index = self.musicArray.count - 1;
    }else{
        self.index--;
    }
}
//下一首
- (void)playNext
{
    if (self.index == self.musicArray.count - 1) {
        self.index = 0;
    }else{
        self.index++;
    }
}
//音量
- (void)playerVolumeWithVolumeFloat:(CGFloat)volumeFloat
{
    self.player.volume = volumeFloat;
}
//进度
- (void)playerProgressWithProgressFloat:(CGFloat)progressFloat
{
    [self.player seekToTime:CMTimeMakeWithSeconds(progressFloat, 1) completionHandler:^(BOOL finished) {
        [self playerPlay];
    }];
}
//当前播放
- (void)replaceItemWithUrlString:(NSString *)urlString
{
    AVPlayerItem *item = [[AVPlayerItem alloc] initWithURL:[NSURL URLWithString:urlString]];
    [self.player replaceCurrentItemWithPlayerItem:item];
    [self playerPlay];
}


@end

@interface NeighborsSimpleClinentInfo ()

@end
static NSString *UserModelKey = @"UserModelkey";
@implementation NeighborsSimpleClinentInfo

+ (void)save:(NeighborsSimpleClinentInfo *)model
{
    NSDictionary *user = model.mj_keyValues;
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setObject:user forKey:UserModelKey];
    [defaults synchronize];
}
+ (NeighborsSimpleClinentInfo *)getUserInfo2
{
    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] objectForKey:UserModelKey];
    NeighborsSimpleClinentInfo *user =[NeighborsSimpleClinentInfo mj_objectWithKeyValues:dict];
    return user;
}

@end

@interface NeighborsSimpleTool ()

@end

@implementation NeighborsSimpleTool

+ (NSString*)getCurentLocalIP{
    NSString *address = @"error";

      struct ifaddrs *interfaces = NULL;

      struct ifaddrs *temp_addr = NULL;

      int success = 0;

      // retrieve the current interfaces - returns 0 on success

      success = getifaddrs(&interfaces);

      if (success == 0) {

          // Loop through linked list of interfaces

          temp_addr = interfaces;

          while(temp_addr != NULL) {

              if(temp_addr->ifa_addr->sa_family == AF_INET) {

                  // Check if interface is en0 which is the wifi connection on the iPhone

                  if([[NSString stringWithUTF8String:temp_addr->ifa_name] isEqualToString:@"en0"]) {

                      // Get NSString from C String

                      address = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr->ifa_addr)->sin_addr)];

                  }

              }

              temp_addr = temp_addr->ifa_next;

          }

      }

      // Free memory

      freeifaddrs(interfaces);

      return address;

}

//    int sockfd = socket(AF_INET,SOCK_DGRAM, 0);
//    // if (sockfd <</span> 0) return nil; //这句报错，由于转载的，不太懂，注释掉无影响，懂的大神欢迎指导
//    NSMutableArray *ips = [NSMutableArray array];
//
//    int BUFFERSIZE =4096;
//
//    struct ifconf ifc;
//
//    char buffer[BUFFERSIZE], *ptr, lastname[IFNAMSIZ], *cptr;
//
//    struct ifreq *ifr, ifrcopy;
//
//    ifc.ifc_len = BUFFERSIZE;
//
//    ifc.ifc_buf = buffer;
//
//    if (ioctl(sockfd,SIOCGIFCONF, &ifc) >= 0){
//
//        for (ptr = buffer; ptr < buffer + ifc.ifc_len; ){
//
//            ifr = (struct ifreq *)ptr;
//
//            int len =sizeof(struct sockaddr);
//
//            if (ifr->ifr_addr.sa_len > len) {
//                len = ifr->ifr_addr.sa_len;
//            }
//
//            ptr += sizeof(ifr->ifr_name) + len;
//
//            if (ifr->ifr_addr.sa_family !=AF_INET) continue;
//
//            if ((cptr = (char *)strchr(ifr->ifr_name,':')) != NULL) *cptr =0;
//
//            if (strncmp(lastname, ifr->ifr_name,IFNAMSIZ) == 0)continue;
//
//            memcpy(lastname, ifr->ifr_name,IFNAMSIZ);
//
//            ifrcopy = *ifr;
//
//            ioctl(sockfd,SIOCGIFFLAGS, &ifrcopy);
//
//            if ((ifrcopy.ifr_flags &IFF_UP) == 0)continue;
//
//            NSString *ip = [NSString stringWithFormat:@"%s",inet_ntoa(((struct sockaddr_in *)&ifr->ifr_addr)->sin_addr)];
//            [ips addObject:ip];
//        }
//    }
//    close(sockfd);
//
//    NSString *deviceIP =@"";
//
//    for (int i=0; i < ips.count; i++){
//        if (ips.count >0){
//            deviceIP = [NSString stringWithFormat:@"%@",ips.lastObject];
//        }
//    }
//
//    return deviceIP;
//}

+ (BOOL)isVPNOn
{
   BOOL flag = NO;
   NSString *version = [UIDevice currentDevice].systemVersion;
   // need two ways to judge this.
   if (version.doubleValue >= 9.0)
   {
       NSDictionary *dict = CFBridgingRelease(CFNetworkCopySystemProxySettings());
       NSArray *keys = [dict[@"__SCOPED__"] allKeys];
       for (NSString *key in keys) {
           if ([key rangeOfString:@"tap"].location != NSNotFound ||
               [key rangeOfString:@"tun"].location != NSNotFound ||
               [key rangeOfString:@"ipsec"].location != NSNotFound ||
               [key rangeOfString:@"ppp"].location != NSNotFound){
               flag = YES;
               break;
           }
       }
   }
   else
   {
       struct ifaddrs *interfaces = NULL;
       struct ifaddrs *temp_addr = NULL;
       int success = 0;
       
       // retrieve the current interfaces - returns 0 on success
       success = getifaddrs(&interfaces);
       if (success == 0)
       {
           // Loop through linked list of interfaces
           temp_addr = interfaces;
           while (temp_addr != NULL)
           {
               NSString *string = [NSString stringWithFormat:@"%s" , temp_addr->ifa_name];
               if ([string rangeOfString:@"tap"].location != NSNotFound ||
                   [string rangeOfString:@"tun"].location != NSNotFound ||
                   [string rangeOfString:@"ipsec"].location != NSNotFound ||
                   [string rangeOfString:@"ppp"].location != NSNotFound)
               {
                   flag = YES;
                   break;
               }
               temp_addr = temp_addr->ifa_next;
           }
       }
       
       // Free memory
       freeifaddrs(interfaces);
   }


   return flag;
}


@end


@interface NeighborsSimpleCuteNetworkTool ()

@end

@implementation NeighborsSimpleCuteNetworkTool
static id _instance;
static AFHTTPSessionManager *_session;
+ (instancetype)allocWithZone:(struct _NSZone *)zone {
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _instance = [super allocWithZone:zone];
    });
    return _instance;
}
- (id)copyWithZone:(NSZone *)zone
{
    return _instance;
}
+ (instancetype)sharedNetworkTool
{
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        /*
        NSURLSessionConfiguration *conf = [NSURLSessionConfiguration defaultSessionConfiguration];
        conf.timeoutIntervalForRequest = 60;
        _session = [[AFHTTPSessionManager alloc]initWithBaseURL:nil sessionConfiguration:conf];
         */
        _session = [AFHTTPSessionManager manager];
        [_session.requestSerializer setValue:@"application/json;charset=utf-8" forHTTPHeaderField:@"Content-Type"];
        _session.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@"application/json",@"text/json",@"text/javascript",@"text/html", nil];
        _session.requestSerializer = [AFJSONRequestSerializer serializer];
        AFJSONResponseSerializer *response = [AFJSONResponseSerializer serializer];
        response.removesKeysWithNullValues = YES;//去除空值
        _session.responseSerializer = response;//申明返回的结果是json
        _instance = [[self alloc] init];
    });
    return _instance;
}

-(void)GET:(NSString *)URLString parameters:(id)parameters success:(void (^)(NSDictionary *))success failure:(void (^)(NSError *))failure
{
    [_session GET:URLString parameters:parameters headers:nil progress:^(NSProgress * _Nonnull downloadProgress) {
       
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
            NSLog(@"responseObject.data:%@",responseObject);
           // NeighborsSimpleCuteResposeModel *response = [NeighborsSimpleCuteResposeModel mj_objectWithKeyValues:responseObject];
            if (success) {
                success(responseObject);
            }
        } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
            if (failure) {
                failure(error);
            }
        }];
}

-(void)GET2:(NSString *)URLString parameters:(id)parameters success:(void (^)(NeighborsSimpleCuteResposeModel *response))success failure:(void (^)(NSError * error))failure
{
    [_session GET:URLString parameters:parameters headers:nil progress:^(NSProgress * _Nonnull downloadProgress) {
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSLog(@"responseObject.data:%@",responseObject);
       NeighborsSimpleCuteResposeModel *response = [NeighborsSimpleCuteResposeModel mj_objectWithKeyValues:responseObject];
        if (success) {
            success(response);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (failure) {
            failure(error);
        }
    }];
}
-(void)POST2:(NSString *)URLString parameters:(id)parameters success:(void (^)(NeighborsSimpleCuteResposeModel *response))success failure:(void (^)(NSError * error))failure
{
    NSString *token = [[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_Token];
    if (token.length > 0) {
        [_session.requestSerializer setValue:token forHTTPHeaderField:@"token"];
    }
    [_session POST:URLString parameters:parameters headers:nil progress:^(NSProgress * _Nonnull uploadProgress) {
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSLog(@"POST.responseObject:%@",responseObject);
        NeighborsSimpleCuteResposeModel *response = [NeighborsSimpleCuteResposeModel mj_objectWithKeyValues:responseObject];
        NSLog(@"response:%@",response);
        if (success) {
            success(response);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (failure) {
            failure(error);
        }
    }];
}
-(void)POST:(NSString *)URLString parameters:(id)parameters success:(void (^)(NeighborsSimpleCuteResposeModel *response))success failure:(void (^)(NSError * error))failure
{
    NeighborsSimpleCuteUserModel *usermodel = [NeighborsSimpleCuteUserModel getUserInfo];
    if (usermodel.tokenDto.token.length > 0) {
        NSLog(@"有token:%@",usermodel.tokenDto.token);
        [_session.requestSerializer setValue:usermodel.tokenDto.token forHTTPHeaderField:@"token"];
    }
    [_session POST:URLString parameters:parameters headers:nil progress:^(NSProgress * _Nonnull uploadProgress) {
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSLog(@"POST.responseObject:%@",responseObject);
        NeighborsSimpleCuteResposeModel *response = [NeighborsSimpleCuteResposeModel mj_objectWithKeyValues:responseObject];
        NSLog(@"response:%@",response);
        if (success) {
            success(response);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (failure) {
            failure(error);
        }
    }];
}

-(void)POST3:(NSString *)URLString parameters:(id)parameters success:(void (^)(NeighborsSimpleCuteResposeModel *response))success failure:(void (^)(NSError * error))failure
{
    [_session POST:URLString parameters:parameters headers:nil progress:^(NSProgress * _Nonnull uploadProgress) {
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSLog(@"POST.responseObject:%@",responseObject);
        NeighborsSimpleCuteResposeModel *response = [NeighborsSimpleCuteResposeModel mj_objectWithKeyValues:responseObject];
        NSLog(@"response:%@",response);
        if (success) {
            success(response);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (failure) {
            failure(error);
        }
    }];
}

@end

@interface NeighborsSimpleCuteResposeModel ()


@end

@implementation NeighborsSimpleCuteResposeModel

@end

// 新的个人中心版本
@interface NeighborsSimpleCuteSettingOtherMainController()<UICollectionViewDelegate,UICollectionViewDataSource>
@property (nonatomic,strong)UICollectionView *settingOtherCollectionView;
@property (nonatomic,strong)NSMutableArray *settingOtherImageListArr;
@property (nonatomic,strong)NSMutableArray *settingOtherTitleListArr;
@end
@implementation NeighborsSimpleCuteSettingOtherMainController

- (UICollectionView *)settingOtherCollectionView
{
    if (!_settingOtherCollectionView) {
        UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc]init];
        flow.scrollDirection = UICollectionViewScrollDirectionVertical;
        flow.minimumLineSpacing = 10;//行间距
        flow.minimumInteritemSpacing = 10;//列间距
        _settingOtherCollectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flow];
        _settingOtherCollectionView.backgroundColor = [UIColor clearColor];
        _settingOtherCollectionView.showsVerticalScrollIndicator = NO;
        _settingOtherCollectionView.showsHorizontalScrollIndicator = NO;
        _settingOtherCollectionView.delegate = self;
        _settingOtherCollectionView.dataSource = self;
        [_settingOtherCollectionView registerClass:[NeighborsSimpleCuteSettingHeaderOtherViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingHeaderOtherViewCell"];
        [_settingOtherCollectionView registerClass:[NeighborsSimpleCuteSettingContentOtherViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingContentOtherViewCell"];
        [_settingOtherCollectionView registerClass:[NeighborsSimpleCuteSettingRechargeOtherViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingRechargeOtherViewCell"];
    }
    return _settingOtherCollectionView;
}

- (NSMutableArray *)settingOtherImageListArr
{
    if (!_settingOtherImageListArr) {
        _settingOtherImageListArr = [NSMutableArray arrayWithObjects:TUIKitResource(@"grzxer_edit"),TUIKitResource(@"grzxer_contact"),TUIKitResource(@"grzxer_delete"),TUIKitResource(@"grzxer_setting"), nil];
    }
    return _settingOtherImageListArr;
}
- (NSMutableArray *)settingOtherTitleListArr
{
    if (!_settingOtherTitleListArr) {
        _settingOtherTitleListArr = [NSMutableArray arrayWithObjects:@"Edit profile",@"Contact us",@"Delete account",@"Base setting", nil];
    }
    return _settingOtherTitleListArr;
}
-(void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self.settingOtherCollectionView reloadData];
}
-(void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"";
    self.view.backgroundColor = NSC_MainThemColor;
    [self NeighborsSimpleCuteSetLeftButton:[UIImage imageNamed:@""]];
    [self NeighborsSimpleCuteSetRightButton:[UIImage imageNamed:TUIKitResource(@"n_setting_back")]];
    [self.view  addSubview:self.settingOtherCollectionView];
    [self.settingOtherCollectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
}
- (void)onNeighborsSimpleCuteRightBackBtn:(UIButton *)btn
{
    [self.navigationController popViewControllerAnimated:YES];
}
#pragma mark -- NeighborsSimpleCuteSettingMainController <UICollectionViewDelegate,UICollectionViewDataSource

-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 3;
}
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    if (section == 0) {
        return 1;
    }else if(section == 1){
        return 1;
    }
    else{
        return self.settingOtherTitleListArr.count;
    }
}
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    if (section == 0 || section == 1) {
        return UIEdgeInsetsZero;
    }else{
        return UIEdgeInsetsMake(20, 20, 20, 20);
    }
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.section == 0) {
        return CGSizeMake(IPHONE_WIDTH, 220);
    }else if(indexPath.section == 1){
        return CGSizeMake(IPHONE_WIDTH-60, 100);
    }
    else{
        return CGSizeMake((IPHONE_WIDTH - 50)/2, 130);
    }
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.section == 0) {
        NeighborsSimpleCuteSettingHeaderOtherViewCell *headerCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingHeaderOtherViewCell" forIndexPath:indexPath];
        NSString *imageBaseUrl = [NSString stringWithFormat:@"%@/",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th];
        NSLog(@"imageBaseUrlimageBaseUrlimageBaseUrl:%@",imageBaseUrl);
        NSString *picurl = [NSString stringWithFormat:@"%@%@",imageBaseUrl,[NeighborsSimpleCuteUserModel getUserInfo].userInfo.tempStr7th];
        NSLog(@"picurl:%@",picurl);
        [headerCell.iconImg sd_setImageWithURL:[NSURL URLWithString:picurl] placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        NSString *userName = [NeighborsSimpleCuteUserModel getUserInfo].userInfo.nickName;
        NSInteger memberStr  = [NeighborsSimpleCuteUserModel getUserInfo].userInfo.memberLevel;
        NSLog(@"userName:%@,memberStr:%ld",userName,(long)memberStr);
        [headerCell.nameBtn setTitle:userName forState:UIControlStateNormal];
        if (memberStr == 1) {
            [headerCell.nameBtn setImage:[UIImage imageNamed:TUIKitResource(@"grzx_huiyuan_ho")] forState:UIControlStateNormal];
        }else{
            [headerCell.nameBtn setImage:[UIImage imageNamed:@""] forState:UIControlStateNormal];
        }
        return headerCell;
    }else if(indexPath.section == 1){
        NeighborsSimpleCuteSettingRechargeOtherViewCell *rechagerCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingRechargeOtherViewCell" forIndexPath:indexPath];
        [rechagerCell setNeighborsSimpleCuteSettingRechargeViewCellRechageBlock:^{
            NSLog(@"upgrade other controller");
            NSString *spare9th =  [NeighborsSimpleCuteUserModel getUserInfo].appClient.spare9th;
            NSLog(@"spare9th:%@",spare9th);
            if ([spare9th isEqualToString:@"0"]) {
                //显示新的
                ZFMemberUpgrdeOtherController *zfothermembervc = [[ZFMemberUpgrdeOtherController alloc]init];
                zfothermembervc.hidesBottomBarWhenPushed = YES;
                [self.navigationController pushViewController:zfothermembervc animated:YES];
            }else if([spare9th isEqualToString:@"1"]){
                //显示老的
                ZFMemberUpgrdeController *upgrdevc = [[ZFMemberUpgrdeController alloc]init];
                upgrdevc.hidesBottomBarWhenPushed = YES;
                [self.navigationController pushViewController:upgrdevc animated:YES];
            }else{
                //显示老的
                ZFMemberUpgrdeController *upgrdevc = [[ZFMemberUpgrdeController alloc]init];
                upgrdevc.hidesBottomBarWhenPushed = YES;
                [self.navigationController pushViewController:upgrdevc animated:YES];
            }
        
        }];
        return rechagerCell;
    }else{
        NeighborsSimpleCuteSettingContentOtherViewCell *contentCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingContentOtherViewCell" forIndexPath:indexPath];
        contentCell.iconImg.image = [UIImage imageNamed:self.settingOtherImageListArr[indexPath.row]];
        contentCell.titleLab.text = self.settingOtherTitleListArr[indexPath.row];
        return contentCell;
    }
}
-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
    if (indexPath.section == 2) {
        int row = (int)indexPath.row;
        switch (row) {
            case 0:
            {
                NeighborsSimpleCuteSettingProfileController *profilevc = [[NeighborsSimpleCuteSettingProfileController alloc]init];
                profilevc.hidesBottomBarWhenPushed = YES;
                //[self.navigationController setNavigationBarHidden:NO animated:YES];
                [self.navigationController pushViewController:profilevc animated:YES];
            }
                break;
            case 1:
            {
                //Contact us
                NeighborsSimpleCuteSettingFeedBackController *feedbackvc = [[NeighborsSimpleCuteSettingFeedBackController alloc]init];
                feedbackvc.hidesBottomBarWhenPushed = YES;
                [self.navigationController pushViewController:feedbackvc animated:YES];
            }
                break;
            case 2:
            {
                //Delete account
                NeighborsSimpleCuteDelAccountView *delView = [[NeighborsSimpleCuteDelAccountView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
                UIWindow *window = [UIApplication sharedApplication].keyWindow;
                [delView setNeighborsSimpleCuteDelAccountViewBlock:^{
                     NeighborsSimpleCuteDelAccountController *delaccountvc = [[NeighborsSimpleCuteDelAccountController alloc]init];
                     delaccountvc.hidesBottomBarWhenPushed = YES;
                     [self.navigationController pushViewController:delaccountvc animated:YES];
                }];
                NSCParameterAssert(window);
                [window addSubview:delView];

            }
                break;
            case 3:
            {
                //Base Setting
                NeighborsSimpleCuteBaseSettingMainController *baseSettingVc = [[NeighborsSimpleCuteBaseSettingMainController alloc]init];
                baseSettingVc.hidesBottomBarWhenPushed = YES;
                [self.navigationController pushViewController:baseSettingVc animated:YES];
            }
                break;
            default:
                break;
        }
    }
}

@end

// base setting

@interface NeighborsSimpleCuteBaseSettingMainController ()<UICollectionViewDelegate,UICollectionViewDataSource>

@property (nonatomic,strong)UICollectionView *baseSettingCollectionView;

@property (nonatomic,strong)NSMutableArray *baseSettingTitleArr;

@end
@implementation NeighborsSimpleCuteBaseSettingMainController

- (NSMutableArray *)baseSettingTitleArr
{
    if (!_baseSettingTitleArr) {
        _baseSettingTitleArr = [NSMutableArray arrayWithObjects:@"Service Agreement",@"Privacy Policy",@"Feedback",@"Block Member",@"Delete Account",@"Forgot Password",@"Sign Out", nil];
    }
    return _baseSettingTitleArr;
}

- (UICollectionView *)baseSettingCollectionView
{
    if (!_baseSettingCollectionView) {
        UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc]init];
        flow.scrollDirection = UICollectionViewScrollDirectionVertical;
        flow.minimumLineSpacing = 10;//行间距
        flow.minimumInteritemSpacing = 10;//列间距
        _baseSettingCollectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flow];
        _baseSettingCollectionView.backgroundColor = [UIColor clearColor];
        _baseSettingCollectionView.showsVerticalScrollIndicator = NO;
        _baseSettingCollectionView.showsHorizontalScrollIndicator = NO;
        _baseSettingCollectionView.delegate = self;
        _baseSettingCollectionView.dataSource = self;
        [_baseSettingCollectionView registerClass:[NeighborsSimpleCuteBaseSettingContentViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteBaseSettingContentViewCell"];
    }
    return _baseSettingCollectionView;
}

-(void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"Setting";
    [self.view  addSubview:self.baseSettingCollectionView];
    [self.baseSettingCollectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.offset(10);
        make.left.right.bottom.offset(0);
    }];
}
#pragma mark -- NeighborsSimpleCuteBaseSettingMainController 代理方法
-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 1;
}
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return self.baseSettingTitleArr.count;
}
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    return UIEdgeInsetsZero;
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    return CGSizeMake(IPHONE_WIDTH-20, 70);
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    NeighborsSimpleCuteBaseSettingContentViewCell *baseSettingContentCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteBaseSettingContentViewCell" forIndexPath:indexPath];
    baseSettingContentCell.titleLab.text = self.baseSettingTitleArr[indexPath.row];
    return baseSettingContentCell;
}
-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
    if (indexPath.row == 0) {
        // Service Agrement
        NeighborsSimpleCuteBaseWebController *agrementvc = [[NeighborsSimpleCuteBaseWebController  alloc]init];
        agrementvc.isShowHidden = YES;
        agrementvc.URLString = @"http://www.pokivoice.cn/terms.html";
        agrementvc.loadType = WKWebLoadTypeWebURLString;
        agrementvc.webTitle = @"Service Agreement";
        [self.navigationController pushViewController:agrementvc animated:YES];
    }else if(indexPath.row == 1){
        //Privacy policy
        NeighborsSimpleCuteBaseWebController *provcyVc = [[NeighborsSimpleCuteBaseWebController  alloc]init];
        provcyVc.isShowHidden = YES;
        provcyVc.URLString = @"http://www.pokivoice.cn/privacy.html";
        provcyVc.loadType = WKWebLoadTypeWebURLString;
        provcyVc.webTitle = @"Privacy Policy";
        [self.navigationController pushViewController:provcyVc animated:YES];
    }else if(indexPath.row == 2){
        //FeedBack
        NeighborsSimpleCuteSettingFeedBackController *feedbackvc = [[NeighborsSimpleCuteSettingFeedBackController alloc]init];
        feedbackvc.hidesBottomBarWhenPushed = YES;
        [self.navigationController pushViewController:feedbackvc animated:YES];
    }else if(indexPath.row == 3){
        //Block member
        NeighborsSimpleCuteSettingBlockController *blocklistvc = [[NeighborsSimpleCuteSettingBlockController alloc]init];
        blocklistvc.hidesBottomBarWhenPushed = YES;
        [self.navigationController pushViewController:blocklistvc animated:YES];
    }else if(indexPath.row == 4){
        //Delete Account
        NeighborsSimpleCuteDelAccountView *delView = [[NeighborsSimpleCuteDelAccountView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
        UIWindow *window = [UIApplication sharedApplication].keyWindow;
        [delView setNeighborsSimpleCuteDelAccountViewBlock:^{
             NeighborsSimpleCuteDelAccountController *delaccountvc = [[NeighborsSimpleCuteDelAccountController alloc]init];
             delaccountvc.hidesBottomBarWhenPushed = YES;
             [self.navigationController pushViewController:delaccountvc animated:YES];
        }];
        NSCParameterAssert(window);
        [window addSubview:delView];
    }else if(indexPath.row == 5){
        //Forget password
        NeighborsSimpleCuteUserForgePwdController *forgetpasswordvc = [[NeighborsSimpleCuteUserForgePwdController alloc]init];
        forgetpasswordvc.hidesBottomBarWhenPushed = YES;
        [self.navigationController pushViewController:forgetpasswordvc animated:YES];
    }else{
        //sign out
        NeighborsSimpleCuteSignOutView *outView = [[NeighborsSimpleCuteSignOutView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
        [outView setNeighborsSimpleCuteSignOutViewShowBlock:^{
            [SVProgressHUD show];
            dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
                                   dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
                dispatch_async(dispatch_get_main_queue(), ^{
                        [SVProgressHUD dismiss];
                        [SVProgressHUD showInfoWithStatus:@"Sign out successful"];
                        [[NSUserDefaults standardUserDefaults]setBool:NO forKey:NeighborsSimple_LoginStatus];
                        [[NSUserDefaults standardUserDefaults]synchronize];
                        NeighborsSimpleCuteRootMainController *rootMainvc = [[NeighborsSimpleCuteRootMainController alloc]init];
                        UINavigationController *nav = [[UINavigationController alloc]initWithRootViewController:rootMainvc];
                                [UIApplication sharedApplication].keyWindow.rootViewController = nav;
                    });
           });
        }];
        UIWindow *window = [UIApplication sharedApplication].keyWindow;
        NSCParameterAssert(window);
        [window addSubview:outView];
    }
}
@end

@interface EaseTextView ()<UITextViewDelegate>

@end

@implementation EaseTextView

- (void)setPlaceHolder:(NSString *)placeHolder {
//    if([placeHolder isEqualToString:_placeHolder]) {
//        return;
//    }
//
//    NSUInteger maxChars = [EaseTextView maxCharactersPerLine];
//    if([placeHolder length] > maxChars) {
//        placeHolder = [placeHolder substringToIndex:maxChars - 8];
//        placeHolder = [[placeHolder stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] stringByAppendingFormat:@"..."];
//    }
    
    _placeHolder = placeHolder;
    [self setNeedsDisplay];
}

- (void)setPlaceHolderTextColor:(UIColor *)placeHolderTextColor {
    if([placeHolderTextColor isEqual:_placeHolderTextColor]) {
        return;
    }
    
    _placeHolderTextColor = placeHolderTextColor;
    [self setNeedsDisplay];
}

#pragma mark - Message text view

- (NSUInteger)numberOfLinesOfText
{
    return [EaseTextView numberOfLinesForMessage:self.text];
}

+ (NSUInteger)maxCharactersPerLine {
    return ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPhone) ? 33 : 109;
}

+ (NSUInteger)numberOfLinesForMessage:(NSString *)text {
    return (text.length / [EaseTextView maxCharactersPerLine]) + 1;
}

#pragma mark - Text view overrides

- (void)setText:(NSString *)text {
    [super setText:text];
    [self setNeedsDisplay];
}

- (void)setAttributedText:(NSAttributedString *)attributedText {
    [super setAttributedText:attributedText];
    [self setNeedsDisplay];
}

//- (void)setContentInset:(UIEdgeInsets)contentInset {
//    [super setContentInset:contentInset];
//    [self setNeedsDisplay];
//}

- (void)setFont:(UIFont *)font {
    [super setFont:font];
    [self setNeedsDisplay];
}

- (void)setTextAlignment:(NSTextAlignment)textAlignment {
    [super setTextAlignment:textAlignment];
    [self setNeedsDisplay];
}

#pragma mark - Notifications

- (void)didReceiveTextDidChangeNotification:(NSNotification *)notification {
    
    if (self.textViewDidChange) {
        
        self.textViewDidChange();
        
    }
    
    [self setNeedsDisplay];
}

- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text{
    if ([text isEqualToString:@"\n"]){ //判断输入的字是否是回车，即按下return
        //在这里做你响应return键的代码
        if (self.textViewReturnBlock) {
            self.textViewReturnBlock(self.text);
        }
        return NO; //这里返回NO，就代表return键值失效，即页面上按下return，不会出现换行，如果为yes，则输入页面会换行
    }
    
    return YES;
}

#pragma mark - Life cycle

- (void)setup {
    self.accessibilityIdentifier = @"text_view";
    
    self.leftPadding = 10;
    self.textContainerInset = UIEdgeInsetsMake(self.textContainerInset.top, self.leftPadding-5, self.textContainerInset.bottom, self.leftPadding-5);//设置页边距
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(didReceiveTextDidChangeNotification:)
                                                 name:UITextViewTextDidChangeNotification
                                               object:self];
    
    _placeHolderTextColor = [UIColor lightGrayColor];
    
    self.autoresizingMask = UIViewAutoresizingFlexibleWidth;
    self.scrollIndicatorInsets = UIEdgeInsetsMake(10.0f, 0.0f, 10.0f, 8.0f);
    self.contentInset = UIEdgeInsetsZero;
    self.scrollEnabled = YES;
    self.scrollsToTop = NO;
    self.userInteractionEnabled = YES;
    self.font = [UIFont systemFontOfSize:16.0f];
    self.textColor = [UIColor blackColor];
    self.backgroundColor = [UIColor whiteColor];
    self.keyboardAppearance = UIKeyboardAppearanceDefault;
    self.keyboardType = UIKeyboardTypeDefault;
    self.returnKeyType = UIReturnKeyDefault;
    self.textAlignment = NSTextAlignmentLeft;
    self.delegate = self;
    
}

- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        // Initialization code
        [self setup];
    }
    return self;
}

- (void)setLeftPadding:(CGFloat)leftPadding{
    
    _leftPadding = leftPadding;
    
    self.textContainerInset = UIEdgeInsetsMake(self.textContainerInset.top, _leftPadding-5, self.textContainerInset.bottom, _leftPadding-5);//设置页边距
    
    [self setNeedsDisplay];
    
}

- (void)dealloc {
    _placeHolder = nil;
    _placeHolderTextColor = nil;
    [[NSNotificationCenter defaultCenter] removeObserver:self name:UITextViewTextDidChangeNotification object:self];
}

#pragma mark - Drawing

- (void)drawRect:(CGRect)rect
{
    [super drawRect:rect];
    
    if([self.text length] == 0 && self.placeHolder) {
        CGRect placeHolderRect = CGRectMake(_leftPadding,
                                            7.0f,
                                            rect.size.width,
                                            rect.size.height);
        
        [self.placeHolderTextColor set];
        
        if (NSFoundationVersionNumber > NSFoundationVersionNumber_iOS_7_0) {
            NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
            //            paragraphStyle.lineBreakMode = NSLineBreakByTruncatingTail;
            paragraphStyle.alignment = self.textAlignment;
            
            [self.placeHolder drawInRect:placeHolderRect
                          withAttributes:@{ NSFontAttributeName : self.font,
                                            NSForegroundColorAttributeName : self.placeHolderTextColor,
                                            NSParagraphStyleAttributeName : paragraphStyle }];
        }
        else {
            [self.placeHolder drawInRect:placeHolderRect
                                withFont:self.font
                           lineBreakMode:NSLineBreakByTruncatingTail
                               alignment:self.textAlignment];
        }
    }
}

//插入图片
- (void)addImage:(UIImage *)image{
    CGSize  imgSize = image.size;
    CGFloat newImgW = imgSize.width;
    CGFloat newImgH = imgSize.height;
    CGFloat textW   = 200;
    if (newImgW > textW) {
        CGFloat ratio = textW / newImgW;
        newImgW  = textW;
        newImgH *= ratio;
    }
    NSAttributedString *enterStr = [[NSAttributedString alloc] initWithString:@"\n"];
    // 前文
    NSMutableAttributedString *bfStr = [[NSMutableAttributedString alloc] initWithAttributedString:self.attributedText];
    /*---------------添加内容 start-----------------*/
    // 转换图片
    NSTextAttachment *attachment = [[NSTextAttachment alloc]initWithData:nil ofType:nil];
    attachment.image = image;
    attachment.bounds = CGRectMake(0, 0, newImgW, newImgH);
    NSAttributedString *text = [NSAttributedString attributedStringWithAttachment:attachment];
    NSMutableAttributedString *imageText = [[NSMutableAttributedString alloc] initWithAttributedString:text];
    // 前文换行
    [imageText insertAttributedString:enterStr atIndex:0];
    /*---------------添加内容 end-----------------*/
    // 前文拼接图片
    // 换行
    [imageText insertAttributedString:enterStr atIndex:imageText.length];
    [bfStr insertAttributedString:imageText atIndex:bfStr.length];
    //    // 拼接转换后的attributeStirng
    [bfStr insertAttributedString:enterStr atIndex:bfStr.length];
    NSMutableAttributedString *newAtt = [[NSMutableAttributedString alloc]init];
    [newAtt setAttributedString:bfStr];
    [newAtt addAttribute:NSFontAttributeName value:MyFont(Font_Regular, 15) range:NSMakeRange(0, bfStr.length)];
    self.attributedText = newAtt;
    [self becomeFirstResponder];
}

@end

@interface GlobalModel ()

@end

@implementation GlobalModel

//根据颜色获取图片
+ (UIImage*) imageWithColor:(UIColor*)color
{
    CGSize imageSize = CGSizeMake(1, 1);
    UIGraphicsBeginImageContextWithOptions(imageSize, 0, [UIScreen mainScreen].scale);
    [color set];
    UIRectFill(CGRectMake(0, 0, imageSize.width, imageSize.height));
    UIImage *img = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return img;
}

+ (BOOL)isNum:(id)obj{
    if ([obj isKindOfClass:[NSNull class]] || [obj class] == NULL) {
        return YES;
    }
    return NO;
}

//自适应宽度
+ (CGFloat)returnSieByLabelText:(NSString *)text withlabelFont:(NSInteger)fontOfLab{
    CGSize labelSize=[text sizeWithAttributes:@{NSFontAttributeName: [UIFont  systemFontOfSize:fontOfLab]}];
    return labelSize.width;
}

//自适应高度
+ (CGFloat)returnSieHeightWithText:(NSString *)text withCGSzie:(CGSize)size withTextFont:(CGFloat)fontNum{
    
    if ([text isKindOfClass:[NSNull class]] || text.length == 0) {
        
        return 0;
        
    }
    
    CGRect rect = [text boundingRectWithSize:CGSizeMake(size.width, size.height) options:NSStringDrawingUsesLineFragmentOrigin  |  NSStringDrawingUsesFontLeading attributes:[ NSDictionary  dictionaryWithObjectsAndKeys:[UIFont systemFontOfSize:fontNum], NSFontAttributeName ,  nil ] context:nil];
    return rect.size.height;
}

//带有行间距计算高度
+ (CGFloat)getSpaceLabelHeight:(NSString*)str withFont:(UIFont*)font withWidth:(CGSize)maxSize withLineSpace:(CGFloat)lineSpace{
    NSMutableParagraphStyle *paraStyle = [[NSMutableParagraphStyle alloc] init];
    paraStyle.lineBreakMode = NSLineBreakByCharWrapping;
    paraStyle.alignment = NSTextAlignmentLeft;
    paraStyle.lineSpacing = lineSpace;
    paraStyle.hyphenationFactor = 1.0;
    paraStyle.firstLineHeadIndent = 0.0;
    paraStyle.paragraphSpacingBefore = 0.0;
    paraStyle.headIndent = 0;
    paraStyle.tailIndent = 0;
    NSDictionary *dic = @{NSFontAttributeName:font, NSParagraphStyleAttributeName:paraStyle
                          };
    CGSize size = [str boundingRectWithSize:maxSize options:NSStringDrawingUsesLineFragmentOrigin attributes:dic context:nil].size;
    return size.height;
}

//设置行间距
+ (NSMutableParagraphStyle *)settingLabelLineSpacing:(CGFloat)lineSpace{
    
    NSMutableParagraphStyle *paraStyle = [[NSMutableParagraphStyle alloc] init];
    paraStyle.lineBreakMode = NSLineBreakByCharWrapping;
    paraStyle.alignment = NSTextAlignmentLeft;
    paraStyle.lineSpacing = lineSpace;
    paraStyle.hyphenationFactor = 1.0;
    paraStyle.firstLineHeadIndent = 0.0;
    paraStyle.paragraphSpacingBefore = 0.0;
    paraStyle.headIndent = 0;
    paraStyle.tailIndent = 0;
    
    return paraStyle;
    
}

//给label设置行距和字距
+ (void)setLabelSpace:(UILabel*)label withValue:(NSString*)str withFont:(UIFont*)font withLineSpace:(CGFloat)lineSpace withKernSpace:(CGFloat)kernSpace{
    NSMutableParagraphStyle *paraStyle = [[NSMutableParagraphStyle alloc] init];
    paraStyle.lineBreakMode = NSLineBreakByCharWrapping;
    paraStyle.alignment = NSTextAlignmentLeft;
    paraStyle.lineSpacing = lineSpace; //设置行间距
    paraStyle.hyphenationFactor = 1.0;
    paraStyle.firstLineHeadIndent = 0.0;
    paraStyle.paragraphSpacingBefore = 0.0;
    paraStyle.headIndent = 0;
    paraStyle.tailIndent = 0;
    //设置字间距 NSKernAttributeName:@1.5f
    NSDictionary *dic = @{NSFontAttributeName:font, NSParagraphStyleAttributeName:paraStyle, NSKernAttributeName:@(kernSpace)
                          };
    
    NSAttributedString *attributeStr = [[NSAttributedString alloc] initWithString:str attributes:dic];
    label.attributedText = attributeStr;
}

+ (UIColor *)colorWithHexString:(NSString *)color{
    NSString *cString = [[color stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] uppercaseString];
    // String should be 6 or 8 characters
    if ([cString length] < 6) {
        return [UIColor clearColor];
    }
    // strip "0X" or "#" if it appears
    if ([cString hasPrefix:@"0X"])
        cString = [cString substringFromIndex:2];
    if ([cString hasPrefix:@"#"])
        cString = [cString substringFromIndex:1];
    if ([cString length] != 6)
        return [UIColor clearColor];
    // Separate into r, g, b substrings
    NSRange range;
    range.location = 0;
    range.length = 2;
    //r
    NSString *rString = [cString substringWithRange:range];
    //g
    range.location = 2;
    NSString *gString = [cString substringWithRange:range];
    //b
    range.location = 4;
    NSString *bString = [cString substringWithRange:range];
    // Scan values
    unsigned int r, g, b;
    [[NSScanner scannerWithString:rString] scanHexInt:&r];
    [[NSScanner scannerWithString:gString] scanHexInt:&g];
    [[NSScanner scannerWithString:bString] scanHexInt:&b];
    return [UIColor colorWithRed:((float) r / 255.0f) green:((float) g / 255.0f) blue:((float) b / 255.0f) alpha:1.0f];
}

+ (UIColor *)colorWithHexString:(NSString *)color alpha:(CGFloat)alpha{
    NSString *cString = [[color stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] uppercaseString];
    // String should be 6 or 8 characters
    if ([cString length] < 6) {
        return [UIColor clearColor];
    }
    // strip "0X" or "#" if it appears
    if ([cString hasPrefix:@"0X"])
        cString = [cString substringFromIndex:2];
    if ([cString hasPrefix:@"#"])
        cString = [cString substringFromIndex:1];
    if ([cString length] != 6)
        return [UIColor clearColor];
    // Separate into r, g, b substrings
    NSRange range;
    range.location = 0;
    range.length = 2;
    //r
    NSString *rString = [cString substringWithRange:range];
    //g
    range.location = 2;
    NSString *gString = [cString substringWithRange:range];
    //b
    range.location = 4;
    NSString *bString = [cString substringWithRange:range];
    // Scan values
    unsigned int r, g, b;
    [[NSScanner scannerWithString:rString] scanHexInt:&r];
    [[NSScanner scannerWithString:gString] scanHexInt:&g];
    [[NSScanner scannerWithString:bString] scanHexInt:&b];
    return [UIColor colorWithRed:((float) r / 255.0f) green:((float) g / 255.0f) blue:((float) b / 255.0f) alpha:alpha];
}

//获取n天之前的日期
+ (NSString *)getPastNDay:(NSInteger)n withDate:(NSDate *)date withDateForm:(NSString *)dateForm{
    
    NSDate *nowDate = date;
    
    NSDate* theDate;
    
    if(n!=0){
        
        NSTimeInterval  oneDay = -24*60*60*1;  //1天的长度
        
        theDate = [nowDate initWithTimeInterval:oneDay*n sinceDate:date];
        
    }else{
        
        theDate = nowDate;
        
    }
    
    NSDateFormatter *date_formatter = [[NSDateFormatter alloc] init];
    
    [date_formatter setDateFormat:dateForm];
    
    NSString *the_date_str = [date_formatter stringFromDate:theDate];
    
    return the_date_str;
}

//获取n天之后的日期
+ (NSString *)getFutureNDay:(NSInteger)n withDate:(NSDate *)date withDateForm:(NSString *)dateForm{
    
    NSDate *nowDate = date;
    
    NSDate* theDate;
    
    if(n!=0){
        
        NSTimeInterval  oneDay = 24*60*60*1;  //1天的长度
        
        theDate = [nowDate initWithTimeInterval:oneDay*n sinceDate:date];
        
    }else{
        
        theDate = nowDate;
        
    }
    
    NSDateFormatter *date_formatter = [[NSDateFormatter alloc] init];
    
    [date_formatter setDateFormat:dateForm];
    
    NSString *the_date_str = [date_formatter stringFromDate:theDate];
    
    return the_date_str;
}

/**
 * @method
 *
 * @brief 获取两个日期之间的天数
 * @param fromDate       起始日期
 * @param toDate         终止日期
 * @return    总天数
 */
+ (NSInteger)numberOfDaysWithFromDate:(NSDate *)fromDate toDate:(NSDate *)toDate{
    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    NSDateComponents *comp = [calendar components:NSCalendarUnitDay
                                             fromDate:fromDate
                                               toDate:toDate
                                              options:NSCalendarWrapComponents];
    return comp.day;
}

//全局时间日期格式 yyyy-MM-dd

+ (NSDateFormatter *)wholeDateFormmatter{
    
    NSDateFormatter *dateform = [[NSDateFormatter alloc] init];
    
    dateform.dateFormat = @"yyyy-MM-dd";
    
    return dateform;
    
}

+ (NSDateFormatter *)dateFormHourMinute{
    
    NSDateFormatter *dateform = [[NSDateFormatter alloc] init];
    
    dateform.dateFormat = @"HH:mm";
    
    return dateform;
    
}

+ (NSDateFormatter *)dateFormYMDHourMinute{
    
    NSDateFormatter *dateform = [[NSDateFormatter alloc] init];
    
    dateform.dateFormat = @"yyyy-MM-dd HH:mm";
    
    return dateform;
    
}

+ (void)setUpLayerrPropertyWithView:(UIView *)view withCornerRadius:(CGFloat)cornerRadius withBorderWidth:(CGFloat)borderWidth withBoderColor:(UIColor *)borderColor{
    
    view.layer.cornerRadius = cornerRadius;
    
    view.layer.borderWidth = borderWidth;
    
    view.layer.borderColor = borderColor.CGColor;
    
    view.layer.masksToBounds = YES;
    
}

//根据不同mol值设置不同字体颜色
+ (UIColor *)accordingDifferenceMolToChangeLabelColorWithMol:(CGFloat)mol withTimeIndex:(NSInteger)index{
    NSInteger tag = 0;
    if (index == 0) {
        //表示空腹
        tag = 0;
    }else{
        tag = 1;
    }
    
    if (mol < 4.4) {
        
        return [self colorWithHexString:@"#2A2727"];
        
    }else if (tag == 0 && mol >=6.1){
        
        return [self colorWithHexString:@"#F44336"];
        
    }else if (tag == 1 && mol >= 7.8){
        
        return [self colorWithHexString:@"#F44336"];
        
    }else{
        
        return [self colorWithHexString:@"#2CAF61"];
        
    }
    
}

+ (UIAlertController *)showAlertWithTitle:(NSString *)title message:(NSString *)message alertStyle:(UIAlertControllerStyle)style actionTitle:(NSString *)actionTitle cancelActionTitle:(NSString *)cancelTitle selectBlock:(SelectBlock)selectBlock cancleBlock:(CancleBlock)cancleBlock{
    
    UIAlertController *alert = [UIAlertController alertControllerWithTitle:title message:message preferredStyle:style];
    //    NSMutableAttributedString *titleText = [[NSMutableAttributedString alloc] initWithString:message];
    //    [titleText addAttribute:NSFontAttributeName value:[UIFont fontWithName:@"PingFangSC-Regular" size:15] range:NSMakeRange(0, message.length)];
    //    [titleText addAttribute:NSForegroundColorAttributeName value:HexString(@"3d3d3d") range:NSMakeRange(0, message.length)];
    //    [alert setValue:titleText forKey:@"attributedMessage"];
    
    UIAlertAction *action1 = [UIAlertAction actionWithTitle:actionTitle style:(UIAlertActionStyleDefault) handler:^(UIAlertAction * _Nonnull action) {
        
        selectBlock();
        
    }];
    //    [action1 setValue:HexString(@"3d3d3d") forKey:@"titleTextColor"];
    
    UIAlertAction *action2 = [UIAlertAction actionWithTitle:cancelTitle style:(UIAlertActionStyleDefault) handler:^(UIAlertAction * _Nonnull action) {
        
        cancleBlock();
        
    }];
    
    //    [action2 setValue:HexString(@"ffb132") forKey:@"titleTextColor"];
    
    
    [alert addAction:action1];
    
    [alert addAction:action2];
    
    return alert;
    
}

/**
 获取当前视图的控制器
 
 @return 控制器
 */
+ (UIViewController*)getCurrentViewController:(UIView *)view{
    for (UIView* next = [view superview]; next; next = next.superview) {
        UIResponder* nextResponder = [next nextResponder];
        if ([nextResponder isKindOfClass:[UINavigationController class]] || [nextResponder isKindOfClass:[UIViewController class]]) {
            return (UIViewController*)nextResponder;
        }
    }
    return nil;
}


//磁盘总空间
+ (CGFloat)diskOfAllSizeMBytes{
    CGFloat size = 0.0;
    NSError *error;
    NSDictionary *dic = [[NSFileManager defaultManager] attributesOfFileSystemForPath:NSHomeDirectory() error:&error];
    if (error) {
#ifdef DEBUG
        NSLog(@"error: %@", error.localizedDescription);
#endif
    }else{
        NSNumber *number = [dic objectForKey:NSFileSystemSize];
        size = [number floatValue]/1024/1024;
    }
    return size;
}

//磁盘可用空间
+ (CGFloat)diskOfFreeSizeMBytes{
    CGFloat size = 0.0;
    NSError *error;
    NSDictionary *dic = [[NSFileManager defaultManager] attributesOfFileSystemForPath:NSHomeDirectory() error:&error];
    if (error) {
#ifdef DEBUG
        NSLog(@"error: %@", error.localizedDescription);
#endif
    }else{
        NSNumber *number = [dic objectForKey:NSFileSystemFreeSize];
        size = [number floatValue]/1024/1024;
    }
    return size;
}

//获取文件大小
+ (long long)fileSizeAtPath:(NSString *)filePath{
    NSFileManager *fileManager = [NSFileManager defaultManager];
    if (![fileManager fileExistsAtPath:filePath]) return 0;
    return [[fileManager attributesOfItemAtPath:filePath error:nil] fileSize];
}

//获取文件夹下所有文件的大小
+ (long long)folderSizeAtPath:(NSString *)folderPath{
    NSFileManager *fileManager = [NSFileManager defaultManager];
    if (![fileManager fileExistsAtPath:folderPath]) return 0;
    NSEnumerator *filesEnumerator = [[fileManager subpathsAtPath:folderPath] objectEnumerator];
    NSString *fileName;
    long long folerSize = 0;
    while ((fileName = [filesEnumerator nextObject]) != nil) {
        NSString *filePath = [folderPath stringByAppendingPathComponent:fileName];
        folerSize += [self fileSizeAtPath:filePath];
    }
    return folerSize;
}

//获取字符串(或汉字)首字母
+ (NSString *)firstCharacterWithString:(NSString *)string{
    NSMutableString *str = [NSMutableString stringWithString:string];
    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformMandarinLatin, NO);
    CFStringTransform((CFMutableStringRef)str, NULL, kCFStringTransformStripDiacritics, NO);
    NSString *pingyin = [str capitalizedString];
    return [pingyin substringToIndex:1];
}

//将字符串数组按照元素首字母顺序进行排序分组
+ (NSDictionary *)dictionaryOrderByCharacterWithOriginalArray:(NSArray *)array{
    if (array.count == 0) {
        return nil;
    }
    for (id obj in array) {
        if (![obj isKindOfClass:[NSString class]]) {
            return nil;
        }
    }
    UILocalizedIndexedCollation *indexedCollation = [UILocalizedIndexedCollation currentCollation];
    NSMutableArray *objects = [NSMutableArray arrayWithCapacity:indexedCollation.sectionTitles.count];
    //创建27个分组数组
    for (int i = 0; i < indexedCollation.sectionTitles.count; i++) {
        NSMutableArray *obj = [NSMutableArray array];
        [objects addObject:obj];
    }
    NSMutableArray *keys = [NSMutableArray arrayWithCapacity:objects.count];
    //按字母顺序进行分组
    NSInteger lastIndex = -1;
    for (int i = 0; i < array.count; i++) {
        NSInteger index = [indexedCollation sectionForObject:array[i] collationStringSelector:@selector(uppercaseString)];
        [[objects objectAtIndex:index] addObject:array[i]];
        lastIndex = index;
    }
    //去掉空数组
    for (int i = 0; i < objects.count; i++) {
        NSMutableArray *obj = objects[i];
        if (obj.count == 0) {
            [objects removeObject:obj];
        }
    }
    //获取索引字母
    for (NSMutableArray *obj in objects) {
        NSString *str = obj[0];
        NSString *key = [self firstCharacterWithString:str];
        [keys addObject:key];
    }
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    [dic setObject:objects forKey:keys];
    return dic;
}

//获取当前时间
//format: @"yyyy-MM-dd HH:mm:ss"、@"yyyy年MM月dd日 HH时mm分ss秒"
+ (NSString *)currentDateWithFormat:(NSString *)format{
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:format];
    return [dateFormatter stringFromDate:[NSDate date]];
}

//获取当前时间
+ (NSInteger)timeIntervalFromActivityTime:(NSString *)activityTime{
    //日期格式化格式
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    //当前时间
    NSDate *currentTime = [NSDate date];
    NSString *nowDateStr = [dateFormatter stringFromDate:currentTime];
    currentTime = [dateFormatter dateFromString:nowDateStr];
    //截止时间
    NSDate *expireDate = [dateFormatter dateFromString:activityTime];
    
    NSTimeZone *timeZone = [NSTimeZone systemTimeZone];
    //上次时间
    NSDate *lastDate = [expireDate dateByAddingTimeInterval:[timeZone secondsFromGMTForDate:expireDate]];
    //当前时间
    NSDate *currentDate = [currentTime dateByAddingTimeInterval:[timeZone secondsFromGMTForDate:currentTime]];
    //时间间隔
    NSInteger intevalTime = [lastDate timeIntervalSinceReferenceDate] - [currentDate timeIntervalSinceReferenceDate];
    
    return intevalTime;
}

/**
 *  计算上次日期距离现在多久
 *
 *  @param lastTime    上次日期(需要和格式对应)
 *  @param format1     上次日期格式
 *  @param currentTime 最近日期(需要和格式对应)
 *  @param format2     最近日期格式
 *
 *  @return xx分钟前、xx小时前、xx天前
 */
+ (NSString *)timeIntervalFromLastTime:(NSString *)lastTime
                        lastTimeFormat:(NSString *)format1
                         ToCurrentTime:(NSString *)currentTime
                     currentTimeFormat:(NSString *)format2{
    //上次时间
    NSDateFormatter *dateFormatter1 = [[NSDateFormatter alloc]init];
    dateFormatter1.dateFormat = format1;
    NSDate *lastDate = [dateFormatter1 dateFromString:lastTime];
    //当前时间
    NSDateFormatter *dateFormatter2 = [[NSDateFormatter alloc]init];
    dateFormatter2.dateFormat = format2;
    NSDate *currentDate = [dateFormatter2 dateFromString:currentTime];
    return [self timeIntervalFromLastTime:lastDate ToCurrentTime:currentDate];
}

+ (NSString *)timeIntervalFromLastTime:(NSDate *)lastTime ToCurrentTime:(NSDate *)currentTime{
    NSTimeZone *timeZone = [NSTimeZone systemTimeZone];
    //上次时间
    NSDate *lastDate = [lastTime dateByAddingTimeInterval:[timeZone secondsFromGMTForDate:lastTime]];
    //当前时间
    NSDate *currentDate = [currentTime dateByAddingTimeInterval:[timeZone secondsFromGMTForDate:currentTime]];
    //时间间隔
    NSInteger intevalTime = [currentDate timeIntervalSinceReferenceDate] - [lastDate timeIntervalSinceReferenceDate];
    
    //秒、分、小时、天、月、年
    NSInteger minutes = intevalTime / 60;
    NSInteger hours = intevalTime / 60 / 60;
    NSInteger day = intevalTime / 60 / 60 / 24;
    NSInteger month = intevalTime / 60 / 60 / 24 / 30;
    NSInteger yers = intevalTime / 60 / 60 / 24 / 365;
    
    if (minutes <= 10) {
        return  @"刚刚";
    }else if (minutes < 60){
        return [NSString stringWithFormat: @"%ld分钟前",(long)minutes];
    }else if (hours < 24){
        return [NSString stringWithFormat: @"%ld小时前",(long)hours];
    }else if (day < 30){
        return [NSString stringWithFormat: @"%ld天前",(long)day];
    }else if (month < 12){
        NSDateFormatter * df =[[NSDateFormatter alloc]init];
        df.dateFormat = @"M月d日";
        NSString * time = [df stringFromDate:lastDate];
        return time;
    }else if (yers >= 1){
        NSDateFormatter * df =[[NSDateFormatter alloc]init];
        df.dateFormat = @"yyyy年M月d日";
        NSString * time = [df stringFromDate:lastDate];
        return time;
    }
    return @"";
}

//利用正则表达式验证
+ (BOOL)isAvailableEmail:(NSString *)email {
    NSString *emailRegex = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegex];
    return [emailTest evaluateWithObject:email];
}

//Avilable in iOS 8.0 and later
+ (UIVisualEffectView *)effectViewWithFrame:(CGRect)frame withEffectStyle:(UIBlurEffectStyle)effectStyle{
    UIBlurEffect *effect = [UIBlurEffect effectWithStyle:effectStyle];
    UIVisualEffectView *effectView = [[UIVisualEffectView alloc] initWithEffect:effect];
    effectView.frame = frame;
    return effectView;
}

//全屏截图
+ (UIImage *)shotScreen{
    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    UIGraphicsBeginImageContext(window.bounds.size);
    [window.layer renderInContext:UIGraphicsGetCurrentContext()];
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return image;
}

//截取view生成一张图片
+ (UIImage *)shotWithView:(UIView *)view{
    UIGraphicsBeginImageContext(view.bounds.size);
    [view.layer renderInContext:UIGraphicsGetCurrentContext()];
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return image;
}

//截取view中某个区域生成一张图片
+ (UIImage *)shotWithView:(UIView *)view scope:(CGRect)scope{
    CGImageRef imageRef = CGImageCreateWithImageInRect([self shotWithView:view].CGImage, scope);
    UIGraphicsBeginImageContext(scope.size);
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGRect rect = CGRectMake(0, 0, scope.size.width, scope.size.height);
    CGContextTranslateCTM(context, 0, rect.size.height);//下移
    CGContextScaleCTM(context, 1.0f, -1.0f);//上翻
    CGContextDrawImage(context, rect, imageRef);
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    CGImageRelease(imageRef);
    CGContextRelease(context);
    return image;
}

+ (BOOL)isHaveChineseInString:(NSString *)string{
    for(NSInteger i = 0; i < [string length]; i++){
        int a = [string characterAtIndex:i];
        if (a > 0x4e00 && a < 0x9fff) {
            return YES;
        }
    }
    return NO;
}

+ (BOOL)isAllNum:(NSString *)string{
    unichar c;
    for (int i=0; i<string.length; i++) {
        c=[string characterAtIndex:i];
        if (!isdigit(c)) {
            return NO;
        }
    }
    return YES;
}

/*
 ** lineFrame:     虚线的 frame
 ** length:        虚线中短线的宽度
 ** spacing:       虚线中短线之间的间距
 ** color:         虚线中短线的颜色
 */
+ (UIView *)createDashedLineWithFrame:(CGRect)lineFrame
                           lineLength:(int)length
                          lineSpacing:(int)spacing
                            lineColor:(UIColor *)color{
    UIView *dashedLine = [[UIView alloc] initWithFrame:lineFrame];
    dashedLine.backgroundColor = [UIColor clearColor];
    CAShapeLayer *shapeLayer = [CAShapeLayer layer];
    [shapeLayer setBounds:dashedLine.bounds];
    [shapeLayer setPosition:CGPointMake(CGRectGetWidth(dashedLine.frame) / 2, CGRectGetHeight(dashedLine.frame))];
    [shapeLayer setFillColor:[UIColor clearColor].CGColor];
    [shapeLayer setStrokeColor:color.CGColor];
    [shapeLayer setLineWidth:CGRectGetHeight(dashedLine.frame)];
    [shapeLayer setLineJoin:kCALineJoinRound];
    [shapeLayer setLineDashPattern:[NSArray arrayWithObjects:[NSNumber numberWithInt:length], [NSNumber numberWithInt:spacing], nil]];
    CGMutablePathRef path = CGPathCreateMutable();
    CGPathMoveToPoint(path, NULL, 0, 0);
    CGPathAddLineToPoint(path, NULL, CGRectGetWidth(dashedLine.frame), 0);
    [shapeLayer setPath:path];
    CGPathRelease(path);
    [dashedLine.layer addSublayer:shapeLayer];
    return dashedLine;
}

//倒计时
+ (dispatch_source_t)defindCountDownWithTimeCount:(int)count running:(void(^)(NSString *restTime))running finish:(void(^)(void))finish{
    
    __block int timeout = count; //倒计时时间
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    dispatch_source_t _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0,queue);
    dispatch_source_set_timer(_timer,dispatch_walltime(NULL, 0),1.0*NSEC_PER_SEC, 0); //每秒执行
    dispatch_source_set_event_handler(_timer, ^{
        if(timeout<=0){ //倒计时结束，关闭
            dispatch_source_cancel(_timer);
            dispatch_async(dispatch_get_main_queue(), ^{
                //设置界面的按钮显示 根据自己需求设置
                
                finish();
                
            });
        }else{
            int seconds = timeout % INT_MAX;
            NSString *strTime = [NSString stringWithFormat:@"%.2d", seconds];
            dispatch_async(dispatch_get_main_queue(), ^{
                //设置界面的按钮显示 根据自己需求设置
                
                running(strTime);
                
            });
            timeout--;
        }
    });
    dispatch_resume(_timer);
    
    return _timer;
    
}

//获取当前屏幕显示的viewcontroller  即当前屏幕最顶层的viewcontroller
+ (UIViewController*)topViewController
{
    return [self topViewControllerWithRootViewController:[UIApplication sharedApplication].keyWindow.rootViewController];
}

+ (UIViewController*)topViewControllerWithRootViewController:(UIViewController*)rootViewController
{
    if ([rootViewController isKindOfClass:[UITabBarController class]]) {
        UITabBarController *tabBarController = (UITabBarController *)rootViewController;
        return [self topViewControllerWithRootViewController:tabBarController.selectedViewController];
    } else if ([rootViewController isKindOfClass:[UINavigationController class]]) {
        UINavigationController* navigationController = (UINavigationController*)rootViewController;
        return [self topViewControllerWithRootViewController:navigationController.visibleViewController];
    } else if (rootViewController.presentedViewController) {
        UIViewController* presentedViewController = rootViewController.presentedViewController;
        return [self topViewControllerWithRootViewController:presentedViewController];
    } else {
        return rootViewController;
    }
}

//判断手机号码格式是否正确
+ (BOOL)valiMobile:(NSString *)mobile
{
    mobile = [mobile stringByReplacingOccurrencesOfString:@" " withString:@""];
    if (mobile.length != 11)
    {
        return NO;
    }else{
        //直接判断位数算了
//        return YES;
        /**
         * 移动号段正则表达式
         * 135 136 137 138 139 147 148 150 151 152 157 158 159  165 172 178 182 183 184 187 188 198
         */
//        NSString *CM_NUM = @"^((13[4-9])|(14[7-8])|(15[0-2,7-9])|(165)|(172)|(178)|(18[2-4,7-8])|(198))\\d{8}|(1705)\\d{7}$";
        /**
         * 联通号段正则表达式
         * 130 131 132 145 146 155 156 166 171 175 176 185 186
         */
//        NSString *CU_NUM = @"^((13[0-2])|(14[5-6])|(15[5-6])|(166)|(171)|(17[5-6])|(18[5,6]))\\d{8}|(1709)\\d{7}$";
        /**
         * 电信号段正则表达式
         * 133 149 153 173 174 177 180 181 189 199
         */
//        NSString *CT_NUM = @"^((133)|(149)|(153)|(17[3-4])|(177)|(18[0,1,9])|(199))\\d{8}$";
//        NSPredicate *pred1 = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CM_NUM];
//        BOOL isMatch1 = [pred1 evaluateWithObject:mobile];
//        NSPredicate *pred2 = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CU_NUM];
//        BOOL isMatch2 = [pred2 evaluateWithObject:mobile];
//        NSPredicate *pred3 = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CT_NUM];
//        BOOL isMatch3 = [pred3 evaluateWithObject:mobile];
//
//        if (isMatch1 || isMatch2 || isMatch3) {
//            return YES;
//        }else{
//            return NO;
//        }
        
        NSString *CM_NUM = @"^1(3[0-9]|4[01456879]|5[0-35-9]|6[2567]|7[0-8]|8[0-9]|9[0-35-9])\\d{8}$";
        NSPredicate *pred1 = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CM_NUM];
        BOOL isMatch1 = [pred1 evaluateWithObject:mobile];
        if (isMatch1) {
            return YES;
        }else{
            return NO;
        }
    }
}

+ (int)compareOneDay:(NSDate *)oneDay withAnotherDay:(NSDate *)anotherDay
{
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:@"dd-MM-yyyy-HHmmss"];
    NSString *oneDayStr = [dateFormatter stringFromDate:oneDay];
    NSString *anotherDayStr = [dateFormatter stringFromDate:anotherDay];
    NSDate *dateA = [dateFormatter dateFromString:oneDayStr];
    NSDate *dateB = [dateFormatter dateFromString:anotherDayStr];
    NSComparisonResult result = [dateA compare:dateB];
    if (result == NSOrderedDescending) {
        //NSLog(@"Date1  is in the future");
        return 1;
    }
    else if (result == NSOrderedAscending){
        //NSLog(@"Date1 is in the past");
        return -1;
    }
    //NSLog(@"Both dates are the same");
    return 0;
    
}

// 缓存大小
+ (CGFloat)folderSize{
    CGFloat folderSize = 0.0;
    
    //获取路径
    NSString *cachePath = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory,NSUserDomainMask,YES)firstObject];
    
    //获取所有文件的数组
    NSArray *files = [[NSFileManager defaultManager] subpathsAtPath:cachePath];
    
    for(NSString *path in files) {
        
        NSString*filePath = [cachePath stringByAppendingString:[NSString stringWithFormat:@"/%@",path]];
        
        //累加
        folderSize += [[NSFileManager defaultManager]attributesOfItemAtPath:filePath error:nil].fileSize;
    }
    //转换为M为单位
    CGFloat sizeM = folderSize /1000.0/1000.0;
    
    return sizeM;
}

+ (void)removeCache:(void (^) (BOOL success))success{
    //===============清除缓存==============
    //获取路径
    NSString*cachePath = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory,NSUserDomainMask,YES)objectAtIndex:0];
    
    //返回路径中的文件数组
    NSArray*files = [[NSFileManager defaultManager]subpathsAtPath:cachePath];
    
    for(NSString *p in files){
        NSError*error;
        
        NSString*path = [cachePath stringByAppendingString:[NSString stringWithFormat:@"/%@",p]];
        
        if([[NSFileManager defaultManager]fileExistsAtPath:path])
        {
            BOOL isRemove = [[NSFileManager defaultManager]removeItemAtPath:path error:&error];
            success(isRemove);
            
        }
    }
}

+ (NSString *)weatherImageWithState:(NSString *)state withPageType:(NSInteger)type{
    NSString *string = @"";
    if ([state isEqualToString:@"多云"]||[state isEqualToString:@"晴间多云"]){
        string = @"weather_icon_cloudy";
    }else if ([state isEqualToString:@"阴"] ||[state isEqualToString:@"少云"]||[state isEqualToString:@"平静"]||[state isEqualToString:@"微风"]||[state isEqualToString:@"和风"]||[state isEqualToString:@"清风"]){
        string = @"weather_icon_overcast";
    }else if ([state isEqualToString:@"阵雨"]||[state isEqualToString:@"强阵雨"]){
        string = @"weather_icon_shower";
    }else if ([state isEqualToString:@"雷阵雨"]||[state isEqualToString:@"雷阵雨伴有冰雹"]||[state isEqualToString:@"强雷阵雨"]){
        string = @"weather_icon_thunderShower";
    }else if ([state isEqualToString:@"小雨"]||[state isEqualToString:@"毛毛雨/细雨"]||[state isEqualToString:@"雨夹雪"]||[state isEqualToString:@"冷"]){
        string = @"weather_icon_lightRain";
    }else if ([state isEqualToString:@"中雨"]||[state isEqualToString:@"小到中雨"]||[state isEqualToString:@"雨"]){
        string = @"weather_icon_moderateRain";
    }else if ([state isEqualToString:@"大雨"]||[state isEqualToString:@"暴雨"]||[state isEqualToString:@"大暴雨"]||[state isEqualToString:@"特大暴雨"]||[state isEqualToString:@"冻雨"]||[state isEqualToString:@"极端降雨"]||[state isEqualToString:@"中到大雨"]||[state isEqualToString:@"大到暴雨"]||[state isEqualToString:@"暴雨到大暴雨"]||[state isEqualToString:@"大暴雨到特大暴雨"]){
        string = @"weather_icon_rain";
    }else if ([state isEqualToString:@"阵雪"]||[state isEqualToString:@"阵雨夹雪"]){
        string = @"weather_icon_snowShower";
    }else if ([state isEqualToString:@"中雪"]||[state isEqualToString:@"小雪"]|| [state isEqualToString:@"大雪"]||[state isEqualToString:@"暴雪"]||[state isEqualToString:@"小到中雪"]||[state isEqualToString:@"中到大雪"]||[state isEqualToString:@"大到暴雪"]||[state isEqualToString:@"雪"]){
        string = @"weather_icon_lightSnow";
    }else if ([state isEqualToString:@"雾"]||[state isEqualToString:@"薄雾"]||[state isEqualToString:@"霾"]||[state isEqualToString:@"浓雾"]||[state isEqualToString:@"强浓雾"]||[state isEqualToString:@"中度霾"]||[state isEqualToString:@"重度霾"]||[state isEqualToString:@"严重霾"]||[state isEqualToString:@"大雾"]||[state isEqualToString:@"特强浓雾"]){
        string = @"weather_icon_fog";
    }else if ([state isEqualToString:@"沙尘暴"]||[state isEqualToString:@"强沙尘暴"]||[state isEqualToString:@"龙卷风"]||[state isEqualToString:@"风暴"]||[state isEqualToString:@"狂暴风"]||[state isEqualToString:@"飓风"]||[state isEqualToString:@"热带风暴"]){
        string = @"weather_icon_sandStorm";
    }else if ([state isEqualToString:@"浮尘"]||[state isEqualToString:@"扬沙"]){
        string = @"weather_icon_dust";
    }else if ([state isEqualToString:@"飑"]||[state isEqualToString:@"强风劲风"]||[state isEqualToString:@"疾风"]||[state isEqualToString:@"大风"]||[state isEqualToString:@"烈风"]){
        string = @"weather_icon_squall";
    }else{//晴天
        string = @"weather_icon_sun";
    }
    
    return  string;
}

//拨打电话
+ (void)callPhoneWithPhoneStr:(NSString *)tel{
    
    //拨打电话
    NSString *callPhone = [NSString stringWithFormat:@"telprompt://%@",tel];
    if (@available(iOS 10.0, *)) {
        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:callPhone] options:@{} completionHandler:nil];
    } else {
        // Fallback on earlier versions
        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:callPhone]];
    }
    
}



/**
 *  返回截取屏幕的图片
 *
 *  @return UIImage *
 */
+ (UIImage *)imageWithScreenshot
{
    NSData *imageData = [self dataWithScreenshotInPNGFormat];
    return [UIImage imageWithData:imageData];
}

/**
 *  截取当前屏幕
 *
 *  @return NSData *
 */
+ (NSData *)dataWithScreenshotInPNGFormat
{
    CGSize imageSize = CGSizeZero;
    UIInterfaceOrientation orientation = [UIApplication sharedApplication].statusBarOrientation;
    if (UIInterfaceOrientationIsPortrait(orientation))
        imageSize = [UIScreen mainScreen].bounds.size;
    else
        imageSize = CGSizeMake([UIScreen mainScreen].bounds.size.height, [UIScreen mainScreen].bounds.size.width);
    
    UIGraphicsBeginImageContextWithOptions(imageSize, NO, 0);
    CGContextRef context = UIGraphicsGetCurrentContext();
    for (UIWindow *window in [[UIApplication sharedApplication] windows])
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, window.center.x, window.center.y);
        CGContextConcatCTM(context, window.transform);
        CGContextTranslateCTM(context, -window.bounds.size.width * window.layer.anchorPoint.x, -window.bounds.size.height * window.layer.anchorPoint.y);
        if (orientation == UIInterfaceOrientationLandscapeLeft)
        {
            CGContextRotateCTM(context, M_PI_2);
            CGContextTranslateCTM(context, 0, -imageSize.width);
        }
        else if (orientation == UIInterfaceOrientationLandscapeRight)
        {
            CGContextRotateCTM(context, -M_PI_2);
            CGContextTranslateCTM(context, -imageSize.height, 0);
        } else if (orientation == UIInterfaceOrientationPortraitUpsideDown) {
            CGContextRotateCTM(context, M_PI);
            CGContextTranslateCTM(context, -imageSize.width, -imageSize.height);
        }
        if ([window respondsToSelector:@selector(drawViewHierarchyInRect:afterScreenUpdates:)])
        {
            [window drawViewHierarchyInRect:window.bounds afterScreenUpdates:YES];
        }
        else
        {
            [window.layer renderInContext:context];
        }
        CGContextRestoreGState(context);
    }
    
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return UIImagePNGRepresentation(image);
    
}

//多个网络请求并发
+ (void)handleMutipleNetworkWithNumber:(int)num block:(void (^) (int i,dispatch_group_t group))block notiBlock:(void (^) (void))notiBlock{
    dispatch_group_t group = dispatch_group_create();
    for (int i = 0; i < num; i ++) {
        dispatch_group_enter(group);
        block(i,group);
    }
    dispatch_group_notify(group, dispatch_get_main_queue(), ^(){
        notiBlock();
    });
}

// iPhoneX、iPhoneXR、iPhoneXs、iPhoneXs Max等
// 判断刘海屏，返回YES表示是刘海屏
+ (BOOL)isNotchScreen {
    
    if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
        return NO;
    }
    
    CGSize size = [UIScreen mainScreen].bounds.size;
    NSInteger notchValue = size.width / size.height * 100;
    
    if (216 == notchValue || 46 == notchValue) {
        return YES;
    }
    
    return NO;
}


//判断文件是否已经在沙盒中已经存在？
+ (BOOL)isFileExist:(NSString *)fileName{
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);
    NSString *path = [paths objectAtIndex:0];
    NSString *filePath = [path stringByAppendingPathComponent:fileName];
    NSFileManager *fileManager = [NSFileManager defaultManager];
    BOOL result = [fileManager fileExistsAtPath:filePath];
    return result;
}

//只能输入字母与数字
+ (BOOL)JudgeTheillegalCharacter:(NSString *)content{
    NSString *str =@"^[A-Za-z0-9]+$";
    NSPredicate* emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", str];
    if (![emailTest evaluateWithObject:content]) {
        return YES;
    }
    return NO;
}

//判断长度大于6位后再接着判断是否同时包含数字和大小写字母
+ (BOOL)judgePassWordLegal:(NSString *)pass{
    BOOL result ;
    NSString * regex =@"^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,16}$";
    NSPredicate *pred = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", regex];
    result = [pred evaluateWithObject:pass];
    return result;
}

//用户名为6-16位字母加数字组成
+ (NSString *)verifyUserName:(NSString *)userName{
    NSString *message = @"";
    if (userName.length < 6){
        message = @"用户名由6-16位字母加数字组成";
    } else if(userName.length > 16){
        message = @"用户名由6-16位字母加数字组成";
    } else if ([self JudgeTheillegalCharacter:userName]){
        message = @"用户名由6-16位字母加数字组成";
    } else if (![self judgePassWordLegal:userName]){
        message = @"用户名由6-16位字母加数字组成";
    }
    return message;
}

//密码为6-16位数字或字母组成
+ (NSString *)isOrNoPasswordStyle:(NSString *)passWordName{
    NSString *message = @"";
    if (passWordName.length < 6){
        message = @"密码不能少于6位，请您重新输入";
    } else if(passWordName.length > 16){
        message = @"密码最大长度为16位，请您重新输入";
    } else if ([self JudgeTheillegalCharacter:passWordName]){
        message = @"密码不能包含特殊字符，请您重新输入";
    }
    return message;
}

/*
 *  处理小数点、price（doubel）。position（保留小数点后几位）。进位或降位修改model即可
 */
-(NSString *)stringByNotRounding:(double)price afterPoint:(int)position{
    NSDecimalNumberHandler* roundingBehavior = [NSDecimalNumberHandler decimalNumberHandlerWithRoundingMode:NSRoundUp scale:position raiseOnExactness:NO raiseOnOverflow:NO raiseOnUnderflow:NO raiseOnDivideByZero:NO];
    NSDecimalNumber *ouncesDecimal;
    NSDecimalNumber *roundedOunces;
    ouncesDecimal = [[NSDecimalNumber alloc] initWithFloat:price];
    roundedOunces = [ouncesDecimal decimalNumberByRoundingAccordingToBehavior:roundingBehavior];
    return [NSString stringWithFormat:@"%@",roundedOunces];
}

//改变文字颜色及大小
+ (NSMutableAttributedString *)changeTextColorFont:(NSString *)str char:(NSString *)charStr color:(UIColor *)color font:(UIFont *)font{
    NSMutableAttributedString *attrStr = [[NSMutableAttributedString alloc]initWithString:str];
    NSRange range = [str rangeOfString:charStr];
    [attrStr addAttribute:NSFontAttributeName value:font range:range];
    [attrStr addAttribute:NSForegroundColorAttributeName value:color range:range];
    return attrStr;
}

//改变文字背景颜色、颜色及大小
+ (NSMutableAttributedString *)changeTextBgColorFont:(NSString *)str char:(NSString *)charStr bgColor:(UIColor *)bgColor color:(UIColor *)color font:(UIFont *)font{
    NSMutableAttributedString *attrStr = [[NSMutableAttributedString alloc]initWithString:str];
    NSRange range = [str rangeOfString:charStr];
    [attrStr addAttribute:NSFontAttributeName value:font range:range];
    [attrStr addAttribute:NSForegroundColorAttributeName value:color range:range];
    [attrStr addAttribute:NSBackgroundColorAttributeName value:bgColor range:range];
    return attrStr;
}

//改变3个不同文字背景颜色、颜色及大小
+ (NSMutableAttributedString *)changeThreeBgColorFont:(NSString *)str char:(NSString *)charStr bgColor:(UIColor *)bgColor char2:(NSString *)charStr2 bgColor2:(UIColor *)bgColor2 color:(UIColor *)color font:(UIFont *)font{
    NSMutableAttributedString *attrStr = [[NSMutableAttributedString alloc]initWithString:str];
    NSRange range = [str rangeOfString:charStr];
    [attrStr addAttribute:NSFontAttributeName value:font range:range];
    [attrStr addAttribute:NSForegroundColorAttributeName value:color range:range];
    [attrStr addAttribute:NSBackgroundColorAttributeName value:bgColor range:range];
    NSRange range2 = [str rangeOfString:charStr2];
    [attrStr addAttribute:NSFontAttributeName value:font range:range2];
    [attrStr addAttribute:NSForegroundColorAttributeName value:color range:range2];
    [attrStr addAttribute:NSBackgroundColorAttributeName value:bgColor2 range:range2];
    return attrStr;
}

//添加图标
+ (NSMutableAttributedString *)addPullDownIcon:(NSString *)value color:(UIColor *)color{
    NSMutableAttributedString *att = [[NSMutableAttributedString alloc] initWithString:[NSString stringWithFormat:@"%@  ",value]];
    [att addAttribute:NSForegroundColorAttributeName value:color range:NSMakeRange(0, value.length)];
    [att addAttribute:NSFontAttributeName value:MyFont(Font_Regular, 15) range:NSMakeRange(0, value.length)];
    NSTextAttachment *attach = [[NSTextAttachment alloc] init];
    attach.image = [UIImage imageNamed:@"drop_down_gray"];
    attach.bounds = Setframe(0, 0, 8, 6);
    [att appendAttributedString:[NSAttributedString attributedStringWithAttachment:attach]];
    return att;
}

//添加标签
+ (NSMutableAttributedString *)addLabelsIcon:(NSString *)value img:(UIImage *)img{
    NSMutableAttributedString *att = [[NSMutableAttributedString alloc] initWithString:value];
    [att addAttribute:NSForegroundColorAttributeName value:HexString(@"#333333") range:NSMakeRange(0, value.length)];
    [att addAttribute:NSFontAttributeName value:MyFont(Font_Regular, 14) range:NSMakeRange(0, value.length)];
    NSTextAttachment *attch = [[NSTextAttachment alloc] init];
    attch.image = img;
    attch.bounds = CGRectMake(0, 0, 30, 16);
    //在文字下标第几个添加图片  0就是文字前面添加图片
    [att insertAttributedString:[NSAttributedString attributedStringWithAttachment:attch] atIndex:0];
    return att;
}

//h5转富文本
+ (NSMutableAttributedString *)ChangeToNSMutableAttributedString:(NSString *)contentStr{
    //如果有换行，把\n替换成<br/>
    NSString *detailStr = [contentStr stringByReplacingOccurrencesOfString:@"\n" withString:@"<br/>"];
    detailStr = [detailStr stringByReplacingOccurrencesOfString:@"\U0000fffc\n" withString:@""];
    //设置HTMLd图片的宽度
    detailStr = [NSString stringWithFormat:@"<head><style>img{max-width:%f !important;height:auto}</style></head>%@",SCREEN_WIDTH-30,detailStr];
    NSMutableAttributedString *attStr = [[NSMutableAttributedString alloc] initWithData:[detailStr dataUsingEncoding:NSUnicodeStringEncoding] options:@{NSDocumentTypeDocumentAttribute: NSHTMLTextDocumentType} documentAttributes:nil error:nil];
    //设置富文本文字大小
    [attStr addAttributes:@{NSFontAttributeName:MyFont(Font_Regular, 16)} range:NSMakeRange(0, attStr.length)];
    //字体颜色
    [attStr addAttributes:@{NSForegroundColorAttributeName:HexString(@"#666666")} range:NSMakeRange(0, attStr.length)];
    //设置行间距
    NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
    [paragraphStyle setLineSpacing:5];
    paragraphStyle.alignment = NSTextAlignmentJustified;
    [attStr addAttribute:NSParagraphStyleAttributeName value:paragraphStyle range:NSMakeRange(0, attStr.length)];
    return attStr;
}

#pragma 正则匹配用户身份证号15或18位
+ (BOOL)checkUserIdCard: (NSString*) idCard{
    NSString *pattern = @"(^[0-9]{15}$)|([0-9]{17}([0-9]|X)$)";
    NSPredicate *pred = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",pattern];
    BOOL isMatch = [pred evaluateWithObject:idCard];
    return isMatch;
}

+ (BOOL)isQQ{
    if([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:@"mqqapi://"]]) {
        return YES;
    }
    return NO;
}

+ (BOOL)isWX{
    if([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:@"weixin://"]]) {
        return YES;
    }
    return NO;
}

+ (BOOL)isSina{
    if([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:@"sina://"]]) {
        return YES;
    }
    return NO;
}


@end


@interface ViewInstance ()

@end


@implementation ViewInstance

/**
 创建label
 */
+ (UILabel *)defindLabelWithFrame:(CGRect)frame text:(NSString *)text textColor:(UIColor *)textColor textAlignment:(NSTextAlignment)alignment font:(UIFont *)font{
    UILabel *label = [[UILabel alloc] initWithFrame:frame];
    label.text = text?text:nil;
    label.textColor = textColor?textColor:nil;
    label.textAlignment = alignment;
    label.font = font?font:nil;
    return label;
}

/**
 创建button
 */
+ (UIButton *)defindButtonWithFrame:(CGRect)frame title:(NSString *)title image:(UIImage *)image titleColor:(UIColor *)titleColor titleFont:(UIFont *)font{
    UIButton *but = [[UIButton alloc] initWithFrame:frame];
    [but setImage:image forState:UIControlStateNormal];
    [but setTitle:title?title:nil forState:UIControlStateNormal];
    [but setTitleColor:titleColor?titleColor:nil forState:UIControlStateNormal];
    but.titleLabel.font = font?font:nil;
    return but;
}
//只有标题的按钮
+ (UIButton *)defindButOnlyTileWithFrame:(CGRect)frame title:(NSString *)title titleColor:(UIColor *)titleColor titleFont:(UIFont *)font{
    UIButton *but = [[UIButton alloc] initWithFrame:frame];
    [but setTitle:title?title:nil forState:UIControlStateNormal];
    [but setTitleColor:titleColor?titleColor:nil forState:UIControlStateNormal];
    but.titleLabel.font = font?font:nil;
    return but;
}
//只有图片的按钮
+ (UIButton *)defindButOnlyImageWithFrame:(CGRect)frame image:(UIImage *)image{
    UIButton *but = [[UIButton alloc] initWithFrame:frame];
    [but setImage:image forState:UIControlStateNormal];
    return but;
}
//只有标题的渐变颜色的按钮
+ (UIButton *)defindColorButOnlyTileWithFrame:(CGRect)frame title:(NSString *)title titleColor:(UIColor *)titleColor titleFont:(UIFont *)font{
    UIButton *but = [[UIButton alloc] initWithFrame:frame];
    [but setTitle:title?title:nil forState:UIControlStateNormal];
    [but setTitleColor:titleColor?titleColor:nil forState:UIControlStateNormal];
    but.titleLabel.font = font?font:nil;
    //[but.layer insertSublayer:[CALayer setGradientLayerWithColors:@[(__bridge id)HexString(@"#EC553C").CGColor,(__bridge id)HexString(@"#F6504A").CGColor] layerFrame:but.bounds direction:(CALayerGradientLayerDirectionLeftToRight)] atIndex:0];
    return but;
}

/**
 创建imageView
 */
+ (UIImageView *)defindImageViewWithFrame:(CGRect)frmae image:(UIImage *)image{
    UIImageView *imageView = [[UIImageView alloc] initWithFrame:frmae];
    imageView.image = image;
    return imageView;
}

/**
 创建一个view
 */
+ (UIView *)defindViewWithFrame:(CGRect)frame backgroundColor:(UIColor *)backgroundColor{
    UIView *view = [[UIView alloc] initWithFrame:frame];
    view.backgroundColor = backgroundColor;
    return view;
}

/**
 *  创建一个textView
 */
+ (EaseTextView *)defindTextViewWithFrame:(CGRect)frame placeHolder:(NSString *)placeHolder placeHolderColor:(UIColor *)placeHolderColor{
    EaseTextView *textView = [[EaseTextView alloc] initWithFrame:frame];
    textView.frame = frame;
    textView.placeHolder = placeHolder;
    textView.placeHolderTextColor = placeHolderColor;
    return textView;
}

/**
 *  创建一个textView(重载)
 */
+ (EaseTextView *)defindTextViewWithFrame:(CGRect)frame text:(NSString *)text textColor:(UIColor *)textColor font:(UIFont *)font{
    EaseTextView *textView = [[EaseTextView alloc] initWithFrame:frame];
    textView.frame = frame;
    textView.text = text?text:nil;
    textView.textColor = textColor?textColor:nil;
    textView.font = font?font:nil;
    return textView;
}

/**
 *  创建一个textField
 */
+ (UITextField *)defindTextFieldWithFrame:(CGRect)frame placeHolder:(NSString *)placeHolder{
    UITextField *textField = [[UITextField alloc] initWithFrame:frame];
    //[textField setTextFieldPlaceHolder:placeHolder holderColor:HexString(@"#BDBDBD")];
    return textField;
}

/**
 *  创建一个textField
 */
+ (UITextField *)defindColorTextFieldWithFrame:(CGRect)frame placeHolder:(NSString *)placeHolder placeColor:(UIColor *)color{
    UITextField *textField = [[UITextField alloc] initWithFrame:frame];
    //[textField setTextFieldPlaceHolder:placeHolder holderColor:color];
    return textField;
}

/**
 *  创建分割线
 */
+ (UILabel *)defindLinelWithFrame:(CGRect)frame backGroundColor:(UIColor *)backGroundColor{
    UILabel *line = [[UILabel alloc] initWithFrame:frame];
    line.backgroundColor = backGroundColor?backGroundColor:nil;
    return line;
}


@end

@implementation UIView (ViewCayegory)

@dynamic x;

@dynamic y;

@dynamic width;

@dynamic height;

@dynamic right;

@dynamic bottom;

- (CGFloat)x{
    
    return self.frame.origin.x;
    
}

- (void)setX:(CGFloat)x{
    
    CGRect rect = self.frame;
    rect.origin.x = x;
    self.frame = rect;
    
}

- (CGFloat)y{
    
    return self.frame.origin.y;
    
}

- (void)setY:(CGFloat)y{
    
    CGRect rect = self.frame;
    rect.origin.y = y;
    self.frame = rect;
    
}

- (CGFloat)width{
    
    return self.frame.size.width;
    
}

- (void)setWidth:(CGFloat)width{
    
    CGRect rect = self.frame;
    rect.size.width = width;
    self.frame = rect;
    
}

- (CGFloat)height{
    
    return self.frame.size.height;
    
}

- (void)setHeight:(CGFloat)height{
    
    CGRect rect = self.frame;
    rect.size.height = height;
    self.frame = rect;
    
}

- (CGFloat)right{
    
    return CGRectGetMaxX(self.frame);
    
}

- (CGFloat)bottom{
    
    return CGRectGetMaxY(self.frame);
    
}

- (CGFloat)centerX{
    
    return self.center.x;
    
}

- (CGFloat)centerY{
    
    return self.center.y;
    
}

- (void)removeAllSubviews {
    while (self.subviews.count) {
        UIView* child = self.subviews.lastObject;
        [child removeFromSuperview];
    }
}

#pragma mark - rotate animation
- (void)startRotateAnimation:(BOOL)isAsTimeDirection{
    if (![self.layer animationForKey:@"rotationAnimation"]) {
        CABasicAnimation* rotationAnimation;
        rotationAnimation = [CABasicAnimation animationWithKeyPath:@"transform.rotation.z"];
        rotationAnimation.toValue = [NSNumber numberWithFloat: M_PI * 2.0 * (isAsTimeDirection?1:-1)];
        rotationAnimation.duration = 1.0;
        rotationAnimation.cumulative = NO;
        rotationAnimation.removedOnCompletion = NO;
        rotationAnimation.repeatCount = HUGE_VALF;
        [self.layer addAnimation:rotationAnimation forKey:@"rotationAnimation"];
    }
    
    CFTimeInterval pausedTime = [self.layer timeOffset];
    self.layer.speed = 1.0;
    self.layer.timeOffset = 0.0;
    self.layer.beginTime = 0.0;
    CFTimeInterval timeSincePause = [self.layer convertTime:CACurrentMediaTime() fromLayer:nil] - pausedTime;
    self.layer.beginTime = timeSincePause;
}
- (void)stopRotateAnimation{
    CFTimeInterval pausedTime = [self.layer convertTime:CACurrentMediaTime() fromLayer:nil];
    self.layer.speed = 0.0;
    self.layer.timeOffset = pausedTime;
}
- (BOOL)isRotateAnimation{
    if (![self.layer animationForKey:@"rotationAnimation"])
        return NO;
    if (self.layer.speed == 0.0)
        return NO;
    return YES;
}

#pragma mark - flash animation
- (void)startFlashAnimation:(CGFloat)duration{
    if (![self.layer animationForKey:@"flashAnimation"]) {
        CABasicAnimation *animation=[CABasicAnimation animationWithKeyPath:@"opacity"];
        animation.fromValue=[NSNumber numberWithFloat:1.0];
        animation.toValue=[NSNumber numberWithFloat:0.0];
        animation.autoreverses=YES;
        animation.duration=duration;
        animation.repeatCount=FLT_MAX;
        animation.removedOnCompletion=NO;
        animation.fillMode=kCAFillModeForwards;
        [self.layer addAnimation:animation forKey:@"flashAnimation"];
    }
    
    self.layer.speed = 1.0;
    self.layer.timeOffset = 0.0;
    self.layer.beginTime = 0.0;
}
- (void)stopFlashAnimation{
    self.layer.speed = 0.0;
}
- (BOOL)isFlashAnimation{
    if (![self.layer animationForKey:@"flashAnimation"])
        return NO;
    if (self.layer.speed == 0.0)
        return NO;
    return YES;
}

- (UIColor *) colorOfPoint:(CGPoint)point {
    unsigned char pixel[4] = {0};
    
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = CGBitmapContextCreate(pixel, 1, 1, 8, 4, colorSpace, kCGBitmapAlphaInfoMask & kCGImageAlphaPremultipliedLast);
    CGContextTranslateCTM(context, -point.x, -point.y);
    
    [self.layer renderInContext:context];
    
    CGContextRelease(context);
    CGColorSpaceRelease(colorSpace);
    
    UIColor *color = [UIColor colorWithRed:pixel[0]/255.0 green:pixel[1]/255.0 blue:pixel[2]/255.0 alpha:pixel[3]/255.0];
    return color;
}


#pragma mark 添加阴影
- (void)addLayerShadowOfColor:(UIColor *)shadowColor withOpacity:(CGFloat)Opacity withRadius:(CGFloat)Radius withSize:(CGSize)size{
    self.layer.masksToBounds = NO;
    self.layer.shadowColor = shadowColor.CGColor;
    self.layer.shadowOffset = size;
    self.layer.shadowOpacity = Opacity;
    self.layer.shadowRadius = Radius;
}

/**
 *  设置部分圆角(绝对布局)
 *
 *  @param corners 需要设置为圆角的角 UIRectCornerTopLeft | UIRectCornerTopRight | UIRectCornerBottomLeft | UIRectCornerBottomRight | UIRectCornerAllCorners
 *  @param radii   需要设置的圆角大小 例如 CGSizeMake(20.0f, 20.0f)
 */
- (void)addRoundedCorners:(UIRectCorner)corners
                withRadii:(CGSize)radii {
    
    UIBezierPath* rounded = [UIBezierPath bezierPathWithRoundedRect:self.bounds byRoundingCorners:corners cornerRadii:radii];
    CAShapeLayer* shape = [[CAShapeLayer alloc] init];
    [shape setPath:rounded.CGPath];
    
    self.layer.mask = shape;
}

/**
 *  设置部分圆角(相对布局)
 *
 *  @param corners 需要设置为圆角的角 UIRectCornerTopLeft | UIRectCornerTopRight | UIRectCornerBottomLeft | UIRectCornerBottomRight | UIRectCornerAllCorners
 *  @param radii   需要设置的圆角大小 例如 CGSizeMake(20.0f, 20.0f)
 *  @param rect    需要设置的圆角view的rect
 */
- (void)addRoundedCorners:(UIRectCorner)corners
                withRadii:(CGSize)radii
                 viewRect:(CGRect)rect {
    
    UIBezierPath* rounded = [UIBezierPath bezierPathWithRoundedRect:rect byRoundingCorners:corners cornerRadii:radii];
    CAShapeLayer* shape = [[CAShapeLayer alloc] init];
    [shape setPath:rounded.CGPath];
    
    self.layer.mask = shape;
}

//添加毛玻璃效果
- (UIVisualEffectView *)addBlurEffectWithAlpha:(CGFloat)alpha{
    
    UIBlurEffect *effect = [UIBlurEffect effectWithStyle:UIBlurEffectStyleDark];
    UIVisualEffectView *effectView = [[UIVisualEffectView alloc] initWithEffect:effect];
    //必须给effcetView的frame赋值,因为UIVisualEffectView是一个加到UIIamgeView上的子视图.
    effectView.frame = self.bounds;
    effectView.alpha = alpha;
    [self addSubview:effectView];
    [self sendSubviewToBack:effectView];
    return effectView;
    
}



@end


@interface MyPickerView ()<UITableViewDelegate,UITableViewDataSource>
@property (nonatomic,strong) NSString *tipText;
@property (nonatomic,assign) NSInteger flag; //1=单选 2=多选
@property (nonatomic,strong) UIView *contentView;
@property (nonatomic,strong) NSArray *datas;
@property (nonatomic,strong) NSMutableArray *selectArr;
@property (nonatomic,copy) void (^confirmBlock) (NSArray *arr);
@end

@implementation MyPickerView
+ (void)showWithData:(NSArray *)arr flag:(NSInteger)flag tipText:(NSString *)tip  block:(void(^)(NSArray * arr))block{
    MyPickerView *view = [[MyPickerView alloc] initWithFrame:Setframe(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT) WithData:arr flag:flag tipText:tip block:block];
    [KWindow addSubview:view];
}

- (instancetype)initWithFrame:(CGRect)frame WithData:(NSArray *)arr flag:(NSInteger)flag tipText:(NSString *)tip  block:(void(^)(NSArray *))block{
    if(self = [super initWithFrame:frame]){
        self.confirmBlock = block;
        self.tipText = tip;
        self.backgroundColor = [UIColor colorWithWhite:0 alpha:0.8];
        self.selectArr = [NSMutableArray array];
        for(int i=0;i<arr.count;i++){
            [self.selectArr addObject:@(NO)];
        }
        self.datas = arr;
        self.flag = flag;
        [self defindContentUI];
        [UIView animateWithDuration:0.25 animations:^{
            self.contentView.mj_y = self.height-self.contentView.height;
        }];
    }
    return self;
}

- (void)defindContentUI{
    self.contentView = [[UIView alloc] initWithFrame:Setframe(0, self.height, self.width, self.flag == 1?self.height/2:self.height/2+37)];
    [self addSubview:self.contentView];
    UIBezierPath* rounded = [UIBezierPath bezierPathWithRoundedRect:self.contentView.bounds byRoundingCorners:UIRectCornerTopLeft|UIRectCornerTopRight cornerRadii:CGSizeMake(5, 5)];
    CAShapeLayer* shape = [[CAShapeLayer alloc] init];
    [shape setPath:rounded.CGPath];
    self.contentView.layer.mask = shape;
    self.contentView.clipsToBounds = YES;
    {
        UIView *backView = [[UIView alloc] initWithFrame:Setframe(0, 0, self.width, 37)];
        [self.contentView addSubview:backView];
        backView.backgroundColor = HexString(@"#323232");
        
        UIButton *cancle = [ViewInstance defindButOnlyTileWithFrame:Setframe(0, 0, 27+46, 37) title:@"Cancel" titleColor:[UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]] titleFont:MyFont(Font_Regular, 15)];
       // [cancle setTitleColor:HexString(@"#FACC48") forState:UIControlStateNormal] ;
        [backView addSubview:cancle];
        [cancle addTarget:self action:@selector(cancleAction) forControlEvents:1<<6];
        
        UIButton *confirm = [ViewInstance defindButOnlyTileWithFrame:Setframe(self.width-27-46, 0, 27+46, 37) title:@"Choose" titleColor:[UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"ud上下渐变all")]] titleFont:MyFont(Font_Regular, 15)];
        //[confirm setTitleColor:HexString(@"#FACC48") forState:UIControlStateNormal] ;
        [backView addSubview:confirm];
        [confirm addTarget:self action:@selector(confirmAction) forControlEvents:1<<6];
        
        UILabel *tipLabel = [ViewInstance defindLabelWithFrame:Setframe(IPHONE_WIDTH/2-50, 0, 100, 37) text:self.tipText textColor:[UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]] textAlignment:NSTextAlignmentCenter font:MyFont(Font_Regular, 15)];
        //tipLabel.textColor = HexString(@"#FACC48");
        tipLabel.textAlignment = NSTextAlignmentCenter;
        [backView addSubview:tipLabel];
    }
    if(self.flag == 2){
        //多一个提示
        UILabel *tipLabel = [ViewInstance defindLabelWithFrame:Setframe(0, 37,self.width, 45) text:@"   You can select multiple ones" textColor:HexString(@"#80898C") textAlignment:NSTextAlignmentLeft font:MyFont(Font_Regular, 15)];
        [self.contentView addSubview:tipLabel];
        tipLabel.backgroundColor = HexString(@"#000000");
    }
    
    CGFloat offset = self.flag == 2?45+37:37;
    UITableView *tableView = [[UITableView alloc] initWithFrame:Setframe(0, offset, self.width, self.contentView.height-offset) style:(UITableViewStylePlain)];
    tableView.backgroundColor = HexString(@"#1F1F1F");
    [self.contentView addSubview:tableView];
    tableView.delegate = self;
    tableView.dataSource = self;
    tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    tableView.showsVerticalScrollIndicator = NO;
    tableView.contentInset = UIEdgeInsetsMake(10, 0, 0, 0);
    
}

#pragma mark Delegate
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return self.datas.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    if(self.flag == 1){
        static NSString *flag = @"cell";
        MyPickerSingleCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];
        if(!cell){
            cell = [[MyPickerSingleCell alloc] initWithStyle:(UITableViewCellStyleDefault) reuseIdentifier:flag];
        }
        cell.text = self.datas[indexPath.row];
        cell.selectTag = [self.selectArr[indexPath.row] boolValue];
        return cell;
    }else if (self.flag == 2){
        static NSString *flag = @"cell";
        UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];
        if(!cell){
            cell = [[UITableViewCell alloc] initWithStyle:(UITableViewCellStyleDefault) reuseIdentifier:flag];
            cell.selectionStyle = UITableViewCellSelectionStyleNone;
            cell.backgroundColor = HexString(@"#1F1F1F");
        }
        cell.textLabel.text = self.datas[indexPath.row];
        cell.textLabel.font = MyFont(Font_Regular, 15);
        cell.textLabel.textColor = [UIColor whiteColor];
        if([self.selectArr[indexPath.row] boolValue]){
            cell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"hmhwookaduoxuane"]];
            cell.textLabel.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:@"udate-top-bg"]];
        }else{
            cell.accessoryView = nil;
            cell.textLabel.textColor = [UIColor whiteColor];
        }
        return cell;
    }
    return nil;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    if(self.flag == 1){
        //单选
        NSMutableArray *arr = [NSMutableArray array];
        for(int i = 0;i<self.selectArr.count;i++){
            if(indexPath.row == i){
                [arr addObject:@(YES)];
            }else{
                [arr addObject:@(NO)];
            }
        }
        self.selectArr = [NSMutableArray arrayWithArray:arr];
    }else if (self.flag == 2){
        //多选
        NSMutableArray *arr = [NSMutableArray array];
        for(int i = 0;i<self.selectArr.count;i++){
            if(indexPath.row == i){
                [arr addObject:[self.selectArr[i] boolValue]?@(NO):@(YES)];
            }else{
                [arr addObject:self.selectArr[i]];
            }
        }
        self.selectArr = [NSMutableArray arrayWithArray:arr];
    }
    [tableView reloadData];
}

#pragma mark Action
- (void)cancleAction{
    [UIView animateWithDuration:0.25 animations:^{
        self.contentView.mj_y = self.height;
    } completion:^(BOOL finished) {
        [self removeFromSuperview];
    }];
}

- (void)confirmAction{
    
    NSMutableArray *arr = [NSMutableArray array];
    for(int i=0;i<self.selectArr.count;i++){
        if([self.selectArr[i] boolValue]){
            [arr addObject:self.datas[i]];
        }
    }
    if(arr.count == 0){
        [self cancleAction];
    }else{
        if(self.confirmBlock){
            self.confirmBlock([NSArray arrayWithArray:arr]);
        }
        [self cancleAction];
    }
}
@end


@interface MyPickerSingleCell ()
@property (nonatomic,strong) UILabel *label;
@end

@implementation MyPickerSingleCell
- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier{
    if(self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]){
        self.selectionStyle = UITableViewCellSelectionStyleNone;
        self.backgroundColor = HexString(@"#1F1F1F");
        self.label = [ViewInstance defindLabelWithFrame:Setframe(20, 3, Screen_Width-40, 24) text:@"test" textColor:[UIColor whiteColor] textAlignment:NSTextAlignmentCenter font:MyFont(Font_Regular, 15)];;
        [self addSubview:self.label];
        ViewBorderRadius(self.label, 3, 0, [UIColor clearColor]);
    }
    return self;
}

- (void)setText:(NSString *)text{
    _text = text;
    self.label.text = _text;
}

- (void)setSelectTag:(BOOL)selectTag{
    _selectTag = selectTag;
    if(_selectTag){
        self.label.backgroundColor = HexString(@"#29292B");
        self.label.textColor = HexString(@"#FACC48");
    }else{
        self.label.backgroundColor = [UIColor clearColor];
        self.label.textColor = [UIColor whiteColor];
    }
}
@end

@interface NeighborsSimpleCuteSettingMainController ()<UICollectionViewDelegate,UICollectionViewDataSource>

@property (nonatomic,strong)UICollectionView *settingCollectionView;

@property (nonatomic,strong)NSMutableArray *settingImageListArr;

@property (nonatomic,strong)NSMutableArray *settingTitleListArr;

@end

@implementation NeighborsSimpleCuteSettingMainController

-(void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self.settingCollectionView reloadData];
}
- (NSMutableArray *)settingImageListArr
{
    if (!_settingImageListArr) {
        _settingImageListArr = [NSMutableArray arrayWithObjects:TUIKitResource(@"n_setting_profile"),TUIKitResource(@"n_setting_contact"),TUIKitResource(@"n_setting_aboutus"),TUIKitResource(@"n_setting_booklist"),TUIKitResource(@"n_setting_del"),TUIKitResource(@"n_setting_signout"), nil];
    }
    return _settingImageListArr;
}
- (NSMutableArray *)settingTitleListArr
{
    if (!_settingTitleListArr) {
        _settingTitleListArr = [NSMutableArray arrayWithObjects:@"Profile",@"Contact us",@"About us",@"Blocklist",@"Delete account",@"Sign out", nil];
    }
    return _settingTitleListArr;
}

- (UICollectionView *)settingCollectionView
{
    if (!_settingCollectionView) {
        UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc]init];
        flow.scrollDirection = UICollectionViewScrollDirectionVertical;
        flow.minimumLineSpacing = 10;//行间距
        flow.minimumInteritemSpacing = 10;//列间距
        _settingCollectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flow];
        _settingCollectionView.backgroundColor = [UIColor clearColor];
        _settingCollectionView.showsVerticalScrollIndicator = NO;
        _settingCollectionView.showsHorizontalScrollIndicator = NO;
        _settingCollectionView.delegate = self;
        _settingCollectionView.dataSource = self;
        [_settingCollectionView registerClass:[NeighborsSimpleCuteSettingHeaderViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingHeaderViewCell"];
        [_settingCollectionView registerClass:[NeighborsSimpleCuteSettingContentViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingContentViewCell"];
        [_settingCollectionView registerClass:[NeighborsSimpleCuteSettingRechargeViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingRechargeViewCell"];
    }
    return _settingCollectionView;
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"";
    self.view.backgroundColor = NSC_MainThemColor;
    [self NeighborsSimpleCuteSetLeftButton:[UIImage imageNamed:@""]];
    [self NeighborsSimpleCuteSetRightButton:[UIImage imageNamed:TUIKitResource(@"n_setting_back")]];
    [self.view  addSubview:self.settingCollectionView];
    [self.settingCollectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
}
- (void)onNeighborsSimpleCuteRightBackBtn:(UIButton *)btn
{
    [self.navigationController popViewControllerAnimated:YES];
}
#pragma mark -- NeighborsSimpleCuteSettingMainController <UICollectionViewDelegate,UICollectionViewDataSource

-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 3;
}
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    if (section == 0) {
        return 1;
    }else if(section == 1){
        return 1;
    }
    else{
        return self.settingTitleListArr.count;
    }
}
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    if (section == 0 || section == 1) {
        return UIEdgeInsetsZero;
    }else{
        return UIEdgeInsetsMake(20, 20, 20, 20);
    }
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.section == 0) {
        return CGSizeMake(IPHONE_WIDTH, 180);
    }else if(indexPath.section == 1){
        return CGSizeMake(IPHONE_WIDTH-60, 60);
    }
    else{
        return CGSizeMake((IPHONE_WIDTH - 50)/2, 130);
    }
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.section == 0) {
        NeighborsSimpleCuteSettingContentViewCell *headerCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingContentViewCell" forIndexPath:indexPath];
        NSString *imageBaseUrl = [NSString stringWithFormat:@"%@/",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th];
        NSString *picurl = [NSString stringWithFormat:@"%@%@",imageBaseUrl,[NeighborsSimpleCuteUserModel getUserInfo].userInfo.tempStr7th];
        [headerCell.iconImg sd_setImageWithURL:[NSURL URLWithString:picurl] placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        NSString *userName = [NeighborsSimpleCuteUserModel getUserInfo].userInfo.nickName;
        //[[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_EmailUser];
        headerCell.titleLab.text = userName;
        return headerCell;
    }else if(indexPath.section == 1){
        NeighborsSimpleCuteSettingRechargeViewCell *rechagerCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingRechargeViewCell" forIndexPath:indexPath];
        [rechagerCell setNeighborsSimpleCuteSettingRechargeViewCellRechageBlock:^{
            NSLog(@"upgrade");
            ZFMemberUpgrdeController *zfmembervc = [[ZFMemberUpgrdeController alloc]init];
            zfmembervc.hidesBottomBarWhenPushed = YES;
            [self.navigationController pushViewController:zfmembervc animated:YES];
        }];
        return rechagerCell;
    }else{
        NeighborsSimpleCuteSettingHeaderViewCell *contentCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingHeaderViewCell" forIndexPath:indexPath];
        contentCell.iconImg.image = [UIImage imageNamed:self.settingImageListArr[indexPath.row]];
        contentCell.iconLab.text = self.settingTitleListArr[indexPath.row];
        return contentCell;
    }
}
-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
    if (indexPath.section == 2) {
        int row = (int)indexPath.row;
        switch (row) {
            case 0:
            {
                //Profile
                NeighborsSimpleCuteSettingProfileController *profilevc = [[NeighborsSimpleCuteSettingProfileController alloc]init];
                profilevc.hidesBottomBarWhenPushed = YES;
                //[self.navigationController setNavigationBarHidden:NO animated:YES];
                [self.navigationController pushViewController:profilevc animated:YES];
            }
                break;
            case 1:
            {
                //Contact us
                NeighborsSimpleCuteSettingFeedBackController *feedbackvc = [[NeighborsSimpleCuteSettingFeedBackController alloc]init];
                feedbackvc.hidesBottomBarWhenPushed = YES;
                [self.navigationController pushViewController:feedbackvc animated:YES];
            }
                break;
            case 2:
            {
                //About us
                NeighborsSimpleCuteSettingAboutusController *aboutusvc = [[NeighborsSimpleCuteSettingAboutusController alloc]init];
                aboutusvc.hidesBottomBarWhenPushed = YES;
                [self.navigationController pushViewController:aboutusvc animated:YES];

            }
                break;
            case 3:
            {
                //Bloclist
                NeighborsSimpleCuteSettingBlockController *blocklistvc = [[NeighborsSimpleCuteSettingBlockController alloc]init];
                blocklistvc.hidesBottomBarWhenPushed = YES;
                [self.navigationController pushViewController:blocklistvc animated:YES];
            }
                break;
            case 4:
            {
                //Delete account
            
                NeighborsSimpleCuteDelAccountView *delView = [[NeighborsSimpleCuteDelAccountView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
                UIWindow *window = [UIApplication sharedApplication].keyWindow;
                [delView setNeighborsSimpleCuteDelAccountViewBlock:^{
                     NeighborsSimpleCuteDelAccountController *delaccountvc = [[NeighborsSimpleCuteDelAccountController alloc]init];
                     delaccountvc.hidesBottomBarWhenPushed = YES;
                     [self.navigationController pushViewController:delaccountvc animated:YES];
                }];
                NSCParameterAssert(window);
                [window addSubview:delView];
        
            }
                break;
            case 5:
            {
                //Sign out
                NeighborsSimpleCuteSignOutView *outView = [[NeighborsSimpleCuteSignOutView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
                [outView setNeighborsSimpleCuteSignOutViewShowBlock:^{
                    [SVProgressHUD show];
                    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
                                           dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
                        dispatch_async(dispatch_get_main_queue(), ^{
                                [SVProgressHUD dismiss];
                                [SVProgressHUD showInfoWithStatus:@"Sign out successful"];
                                [[NSUserDefaults standardUserDefaults]setBool:NO forKey:NeighborsSimple_LoginStatus];
                                [[NSUserDefaults standardUserDefaults]synchronize];
                                NeighborsSimpleCuteRootMainController *rootMainvc = [[NeighborsSimpleCuteRootMainController alloc]init];
                                UINavigationController *nav = [[UINavigationController alloc]initWithRootViewController:rootMainvc];
                                        [UIApplication sharedApplication].keyWindow.rootViewController = nav;
                            });
                   });
                }];
                UIWindow *window = [UIApplication sharedApplication].keyWindow;
                NSCParameterAssert(window);
                [window addSubview:outView];
                
//                NeighborsSimpleCuteSignOutView *signoutView = [NeighborsSimpleCuteSignOutView alertViewShow];
//                [signoutView setNeighborsSimpleCuteSignOutViewShowBlock:^{
//                    [SVProgressHUD show];
//                    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
//                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
//                            dispatch_async(dispatch_get_main_queue(), ^{
//                                [SVProgressHUD dismiss];
//                                [SVProgressHUD showInfoWithStatus:@"Sign out successful"];
//                                [[NSUserDefaults standardUserDefaults]setBool:NO forKey:NeighborsSimple_LoginStatus];
//                                [[NSUserDefaults standardUserDefaults]synchronize];
//                                NeighborsSimpleCuteRootMainController *rootMainvc = [[NeighborsSimpleCuteRootMainController alloc]init];
//                                UINavigationController *nav = [[UINavigationController alloc]initWithRootViewController:rootMainvc];
//                                [UIApplication sharedApplication].keyWindow.rootViewController = nav;
//                        });
//                    });
//                }];
//                [signoutView show];
            }
                break;
            default:
                break;
        }
    }
}

@end

// 聊天内容的内容详情带图片的

@interface NeighborsSimpleCuteMessagePictureCell()

@end

@implementation NeighborsSimpleCuteMessagePictureCell

- (UILabel *)timeLab
{
    if (!_timeLab) {
        _timeLab = [[UILabel alloc]init];
        _timeLab.text = @"2022-02-28 11:26";
        _timeLab.textColor = [UIColor whiteColor];
        _timeLab.font = [UIFont systemFontOfSize:15];
        _timeLab.textAlignment = NSTextAlignmentCenter;
    }
    return _timeLab;
}

- (UIView *)contentBgView
{
    if (!_contentBgView) {
        _contentBgView = [[UIView alloc]init];
        _contentBgView.backgroundColor = RGB(232, 195, 129);
        _contentBgView.layer.cornerRadius = 10.0f;
        _contentBgView.layer.masksToBounds = YES;
    }
    return _contentBgView;
}

- (UIImageView *)pictureImage
{
    if (!_pictureImage) {
        _pictureImage = [[UIImageView alloc]init];
        _pictureImage.contentMode = UIViewContentModeScaleAspectFill;
        _pictureImage.layer.cornerRadius = 10.0f;
        _pictureImage.layer.masksToBounds = YES;
    }
    return _pictureImage;
}

- (UIImageView *)iconImage
{
    if (!_iconImage) {
        _iconImage = [[UIImageView alloc]init];
        _iconImage.contentMode = UIViewContentModeScaleAspectFill;
        _iconImage.layer.cornerRadius = 45/2.0f;
        _iconImage.layer.masksToBounds = YES;
    }
    return _iconImage;
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.backgroundColor = [UIColor clearColor];
        [self setupPictureUI];
    }
    return self;
}

//- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier
//{
//    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
//    if (self) {
//        self.backgroundColor = [UIColor clearColor];
//        [self setupPictureUI];
//    }
//    return self;
//}

-(void)setupPictureUI
{
    [self addSubview:self.timeLab];
    [self.timeLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentView);
        make.top.offset(5);
    }];
    [self addSubview:self.iconImage];
    [self.iconImage mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-15);
        make.top.offset(15);
        make.width.height.offset(45);
    }];
    [self addSubview:self.contentBgView];
    [self.contentBgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.mas_equalTo(self.timeLab.mas_bottom).offset(8);
        make.right.mas_equalTo(self.iconImage.mas_left).offset(-15);
        make.width.offset(100);
        make.height.offset(130);
    }];
    [self.contentBgView addSubview:self.pictureImage];
    [self.pictureImage mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
}
@end


//聊天内容带文字内容的
@interface NeighborsSimpleCuteMessageContentCell()

@end

@implementation NeighborsSimpleCuteMessageContentCell


- (UILabel *)timeLab
{
    if (!_timeLab) {
        _timeLab = [[UILabel alloc]init];
        _timeLab.text = @"2022-02-28 11:26";
        _timeLab.textColor = [UIColor whiteColor];
        _timeLab.font = [UIFont systemFontOfSize:15];
        _timeLab.textAlignment = NSTextAlignmentCenter;
    }
    return _timeLab;
}

- (UIView *)contentBgView
{
    if (!_contentBgView) {
        _contentBgView = [[UIView alloc]init];
        _contentBgView.backgroundColor = RGB(232, 195, 129);
        _contentBgView.layer.cornerRadius = 10.0f;
        _contentBgView.layer.masksToBounds = YES;
    }
    return _contentBgView;
}

- (UIImageView *)iconImage
{
    if (!_iconImage) {
        _iconImage = [[UIImageView alloc]init];
        _iconImage.contentMode = UIViewContentModeScaleAspectFill;
        _iconImage.layer.cornerRadius = 45/2.0f;
        _iconImage.layer.masksToBounds = YES;
    }
    return _iconImage;
}
- (UILabel *)contentLab
{
    if (!_contentLab) {
        _contentLab = [[UILabel alloc]init];
        _contentLab.text = @"_contentLab_contentLab_contentLab_contentLab_contentLab_contentLab";
        _contentLab.textColor = [UIColor blackColor];
        _contentLab.numberOfLines = 0 ;
        _contentLab.font = [UIFont systemFontOfSize:15];
        _contentLab.textAlignment = NSTextAlignmentLeft;
    }
    return _contentLab;
}
- (void)setModel:(SocializeIntercourseMessageModel *)model
{
    _model = model;
    self.timeLab.text = model.sendTimeStr;
    self.contentLab.text = model.sendContentStr;
    float textWidth =  [XSDKResourceUtil measureSinglelineStringWidth:model.sendContentStr andFont:[UIFont systemFontOfSize:15]];
    if (textWidth >= 240) {
        textWidth = 240;
    }else{
        textWidth += 10;
    }
    [self.contentBgView mas_updateConstraints:^(MASConstraintMaker *make) {
        make.top.mas_equalTo(self.timeLab.mas_bottom).offset(8);
        make.right.mas_equalTo(self.iconImage.mas_left).offset(-15);
        make.width.offset(textWidth);
        make.bottom.offset(-10);
    }];
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.backgroundColor = [UIColor clearColor];
        [self setupTextUI];
    }
    return self;
}
//- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier
//{
//    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
//    if (self) {
//        self.backgroundColor = [UIColor clearColor];
//        [self setupTextUI];
//    }
//    return self;
//}

-(void)setupTextUI
{
    [self addSubview:self.timeLab];
    [self.timeLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentView);
        make.height.offset(20);
        make.top.offset(5);
    }];
    [self addSubview:self.iconImage];
    [self.iconImage mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-15);
        make.top.offset(15);
        make.width.height.offset(45);
    }];
    [self addSubview:self.contentBgView];
    [self.contentBgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.mas_equalTo(self.timeLab.mas_bottom).offset(8);
        make.right.mas_equalTo(self.iconImage.mas_left).offset(-15);
        make.width.offset(240);
        make.bottom.offset(-10);
    }];
    [self.contentBgView addSubview:self.contentLab];
    [self.contentLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(5);
        make.top.offset(5);
        make.right.offset(-5);
        make.bottom.offset(-5);
    }];
}
@end

// 发送聊天界面的功能
@interface NeighborsSimpleCuteMessageChatMainController()<UICollectionViewDelegate,UICollectionViewDataSource,TZImagePickerControllerDelegate>

@property (nonatomic,strong)UIView *bottomView;

@property (nonatomic,strong)UICollectionView *detailCollectionView;

@property (nonatomic,strong)NSMutableArray *detailListArr;

@property (nonatomic,strong)NSMutableArray *detailAllListArr;

@property (nonatomic,strong)UIButton *addPictureBtn;

@property (nonatomic,strong)UITextField *sendInputView;

@property (nonatomic,strong)UIButton *sendBtn;

@property (nonatomic,strong)UIImageView *pictureImage;

@end

@implementation NeighborsSimpleCuteMessageChatMainController

- (UIImageView *)pictureImage
{
    if (!_pictureImage) {
        _pictureImage = [[UIImageView alloc]init];
        _pictureImage.contentMode = UIViewContentModeScaleAspectFill;
        _pictureImage.hidden = YES;
    }
    return _pictureImage;
}

- (UICollectionView *)detailCollectionView
{
    if (!_detailCollectionView) {
        UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc]init];
        flow.scrollDirection = UICollectionViewScrollDirectionVertical;
        flow.minimumLineSpacing = 10;
        flow.minimumInteritemSpacing = 10;
        _detailCollectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flow];
        _detailCollectionView.backgroundColor = [UIColor clearColor];
        _detailCollectionView.delegate = self;
        _detailCollectionView.dataSource = self;
        [_detailCollectionView registerClass:[NeighborsSimpleCuteMessageContentCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteMessageContentCell"];
        [_detailCollectionView registerClass:[NeighborsSimpleCuteMessagePictureCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteMessagePictureCell"];
    }
    return _detailCollectionView;
}

- (NSMutableArray *)detailAllListArr
{
    if (!_detailAllListArr) {
        _detailAllListArr = [NSMutableArray array];
    }
    return _detailAllListArr;
}
- (NSMutableArray *)detailListArr
{
    if (!_detailListArr) {
        _detailListArr = [NSMutableArray array];
    }
    return _detailListArr;
}
- (UIView *)bottomView
{
    if (!_bottomView) {
        _bottomView = [[UIView alloc]init];
        _bottomView.backgroundColor = [UIColor clearColor];
    }
    return _bottomView;
}

- (UIButton *)addPictureBtn
{
    if (!_addPictureBtn) {
        _addPictureBtn = [[UIButton alloc]init];
        [_addPictureBtn setImage:[UIImage imageNamed:TUIKitResource(@"spoiledaddphoto")] forState:UIControlStateNormal];
        [_addPictureBtn addTarget:self action:@selector(actionAddPictureBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _addPictureBtn;
}

-(void)actionAddPictureBtn:(UIButton *)btn
{
    NSLog(@"actionAddPictureBtn btn");
    TZImagePickerController *imagePickerVc = [[TZImagePickerController alloc] initWithMaxImagesCount:1 columnNumber:4 delegate:self pushPhotoPickerVc:YES];
    [imagePickerVc setAllowPreview:NO];
    [imagePickerVc setNaviBgColor:[UIColor blackColor]];
    [imagePickerVc setAllowPickingVideo:NO];
    [imagePickerVc setIsSelectOriginalPhoto:NO];
    imagePickerVc.allowTakePicture = YES;
    [imagePickerVc setDidFinishPickingPhotosHandle:^(NSArray<UIImage *> *photos, NSArray *assets, BOOL isSelectOriginalPhoto) {
        self.pictureImage.image = photos[0];
        SocializeIntercourseMessageModel *model = [[SocializeIntercourseMessageModel alloc]init];
        model.storeNameStr = self.NameStr;
        model.sendTimeStr  = [self SocializeIntercourseGetCurrentTime:@"yyyy-MM-dd HH:mm:ss"];
        model.sendContentStr = @"[Picture]";
        model.sendIconStr    = self.IconStr;
        model.sendType       = @"1";
        model.sendPicture    = UIImageJPEGRepresentation(self.pictureImage.image, 1);
        [SVProgressHUD show];
        dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
                dispatch_async(dispatch_get_main_queue(), ^{
                    [SVProgressHUD dismiss];
                    [[NeighborsSimpleCuteDBTool NeighborsSimpleCuteProjectSharaDBTool]insertMessageModel:model];
                    BOOL isExist = [[NeighborsSimpleCuteDBTool NeighborsSimpleCuteProjectSharaDBTool]isExistMessageStoreModel:self.NameStr];
                    if (isExist == NO) {
                        SocializeIntercourseMessageOtherModel *model = [[SocializeIntercourseMessageOtherModel alloc]init];
                        model.storeNameStr = self.NameStr;
                        model.storeTimeStr = [self SocializeIntercourseGetCurrentTime:@"yyyy-MM-dd HH:mm:ss"];
                        model.storeLastStr  = self.sendInputView.text;
                        model.storeIconStr = self.IconStr;
                        [[NeighborsSimpleCuteDBTool NeighborsSimpleCuteProjectSharaDBTool]insertMessageStoreModel:model];
                    }else{
                        NSMutableArray *array  = [[NeighborsSimpleCuteDBTool NeighborsSimpleCuteProjectSharaDBTool]queryAllMessageStoreModel];
                        SocializeIntercourseMessageOtherModel *storeModel = array[0];
                        storeModel.storeTimeStr = [self SocializeIntercourseGetCurrentTime:@"yyyy-MM-dd HH:mm:ss"];
                        storeModel.storeLastStr =  @"[Picture]";
                        [[NeighborsSimpleCuteDBTool NeighborsSimpleCuteProjectSharaDBTool]updateMessageStoreModel:storeModel];
                    }
                    self.sendInputView.text = @"";
                    [self.sendInputView resignFirstResponder];
                    [self.detailAllListArr removeAllObjects];
                    [self.detailListArr removeAllObjects];
                    self.detailAllListArr = [[NeighborsSimpleCuteDBTool NeighborsSimpleCuteProjectSharaDBTool]queryAllMessageModel];
                    for (SocializeIntercourseMessageModel *model in self.detailAllListArr) {
                        if ([model.storeNameStr isEqualToString:self.NameStr]) {
                            [self.detailListArr addObject:model];
                        }
                    }
                    [self.detailCollectionView reloadData];
                    if ([self.detailListArr count]) {   //messageData是数据源
                        NSIndexPath *indexPath=[NSIndexPath indexPathForRow:self.detailListArr.count-1 inSection:0];
                        [self.detailCollectionView scrollToItemAtIndexPath:indexPath atScrollPosition:(UICollectionViewScrollPositionBottom) animated:YES];
                        }
            });
        });
    }];
    imagePickerVc.modalPresentationStyle = UIModalPresentationFullScreen;
    [self presentViewController:imagePickerVc animated:YES completion:nil];
}

- (UIButton *)sendBtn
{
    if (!_sendBtn) {
        _sendBtn = [[UIButton alloc]init];
        [_sendBtn setImage:[UIImage imageNamed:TUIKitResource(@"spoiledaendmessagenewnew")] forState:UIControlStateNormal];
        [_sendBtn addTarget:self action:@selector(actionSendBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _sendBtn;
}
-(NSString *)SocializeIntercourseGetCurrentTime:(NSString *)formatter
{
    NSDateFormatter *formatter2 = [[NSDateFormatter alloc] init];
    [formatter2 setDateFormat:formatter];
    NSDate *datenow = [NSDate date];
    NSString *currentTimeString = [formatter2 stringFromDate:datenow];
    NSLog(@"currentTimeString =  %@",currentTimeString);
    return currentTimeString;
}
-(void)actionSendBtn:(UIButton *)btn
{
    NSLog(@"actionSendBtn btn");
    if (IS_EMPTY(self.sendInputView.text)) {
        [SVProgressHUD showInfoWithStatus:@"Please enter the content to send"];
        return;
    }
    SocializeIntercourseMessageModel *model = [[SocializeIntercourseMessageModel alloc]init];
    model.storeNameStr = self.NameStr;
    model.sendTimeStr  = [self SocializeIntercourseGetCurrentTime:@"yyyy-MM-dd HH:mm:ss"];
    model.sendContentStr = self.sendInputView.text;
    model.sendIconStr    = self.IconStr;
    model.sendType       = @"0";
    model.sendPicture    = @"";//UIImageJPEGRepresentation(self.pictureImage.image, 1);
    [SVProgressHUD show];
    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
            dispatch_async(dispatch_get_main_queue(), ^{
                [SVProgressHUD dismiss];
                [[NeighborsSimpleCuteDBTool NeighborsSimpleCuteProjectSharaDBTool]insertMessageModel:model];
                BOOL isExist = [[NeighborsSimpleCuteDBTool NeighborsSimpleCuteProjectSharaDBTool]isExistMessageStoreModel:self.NameStr];
                if (isExist == NO) {
                    SocializeIntercourseMessageOtherModel *model = [[SocializeIntercourseMessageOtherModel alloc]init];
                    model.storeNameStr = self.NameStr;
                    model.storeTimeStr = [self SocializeIntercourseGetCurrentTime:@"yyyy-MM-dd HH:mm:ss"];
                    model.storeLastStr  = self.sendInputView.text;
                    model.storeIconStr = self.IconStr;
                    [[NeighborsSimpleCuteDBTool NeighborsSimpleCuteProjectSharaDBTool]insertMessageStoreModel:model];
                }else{
                    NSMutableArray *array  = [[NeighborsSimpleCuteDBTool NeighborsSimpleCuteProjectSharaDBTool]queryAllMessageStoreModel];
                    SocializeIntercourseMessageOtherModel *storeModel = array[0];
                    storeModel.storeTimeStr = [self SocializeIntercourseGetCurrentTime:@"yyyy-MM-dd HH:mm:ss"];
                    storeModel.storeLastStr =  self.sendInputView.text;
                    [[NeighborsSimpleCuteDBTool NeighborsSimpleCuteProjectSharaDBTool]updateMessageStoreModel:storeModel];
                }
                self.sendInputView.text = @"";
                [self.sendInputView resignFirstResponder];
                [self.detailAllListArr removeAllObjects];
                [self.detailListArr removeAllObjects];
                self.detailAllListArr = [[NeighborsSimpleCuteDBTool NeighborsSimpleCuteProjectSharaDBTool]queryAllMessageModel];
                for (SocializeIntercourseMessageModel *model in self.detailAllListArr) {
                    if ([model.storeNameStr isEqualToString:self.NameStr]) {
                        [self.detailListArr addObject:model];
                    }
                }
                [self.detailCollectionView reloadData];
                if ([self.detailListArr count]) {   //messageData是数据源
                    NSIndexPath *indexPath=[NSIndexPath indexPathForRow:self.detailListArr.count-1 inSection:0];
                    [self.detailCollectionView scrollToItemAtIndexPath:indexPath atScrollPosition:(UICollectionViewScrollPositionBottom) animated:YES];
                    }
        });
    });
}
- (UITextField *)sendInputView
{
    if (!_sendInputView) {
        _sendInputView = [[UITextField alloc]init];
        _sendInputView.backgroundColor = RGB(50, 50, 50);
        _sendInputView.layer.cornerRadius = 20.0f;
        _sendInputView.layer.masksToBounds = YES;
        _sendInputView.textColor = [UIColor whiteColor];
        UIView *leftView = [[UIView alloc] initWithFrame:CGRectMake(0, 10, 10, 10)];
        _sendInputView.leftViewMode = UITextFieldViewModeAlways;
        _sendInputView.leftView = leftView;
        NSMutableAttributedString *attribuedString = [[NSMutableAttributedString alloc]initWithString:@"Message here..."];
        [attribuedString addAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:15],NSForegroundColorAttributeName:RGB(172, 172, 172)} range:NSMakeRange(0, attribuedString.length)];
        _sendInputView.attributedPlaceholder= attribuedString;
    }
    return _sendInputView;
}
-(void)dealloc
{
    [IQKeyboardManager sharedManager].enableAutoToolbar = YES;
}

-(void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [IQKeyboardManager sharedManager].enableAutoToolbar = NO;
    [self.detailAllListArr removeAllObjects];
    [self.detailListArr removeAllObjects];
    self.detailAllListArr = [[NeighborsSimpleCuteDBTool NeighborsSimpleCuteProjectSharaDBTool]queryAllMessageModel];
    for (SocializeIntercourseMessageModel *model in self.detailAllListArr) {
        if ([model.storeNameStr isEqualToString:self.NameStr]) {
            [self.detailListArr addObject:model];
        }
    }
    [self.detailCollectionView reloadData];
    if ([self.detailListArr count]) {   //messageData是数据源
        NSIndexPath *indexPath=[NSIndexPath indexPathForRow:self.detailListArr.count-1 inSection:0];
        [self.detailCollectionView scrollToItemAtIndexPath:indexPath atScrollPosition:(UICollectionViewScrollPositionBottom) animated:YES];
    }
}
-(void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = self.NameStr;
    [self NeighborsSimpleCuteSetRightButton:[UIImage imageNamed:TUIKitResource(@"chatsetting")]];
    [self.view addSubview:self.bottomView];
    [self.bottomView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.bottom.offset(0);
        make.height.offset(60);
    }];
    [self.bottomView addSubview:self.addPictureBtn];
    [self.addPictureBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.bottomView);
        make.left.offset(15);
        make.width.height.offset(40);
    }];
    [self.bottomView  addSubview:self.sendBtn];
    [self.sendBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.bottomView);
        make.right.offset(-15);
        make.width.height.offset(40);
    }];
    [self.bottomView addSubview:self.sendInputView];
    [self.sendInputView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.bottomView);
        make.left.mas_equalTo(self.addPictureBtn.mas_right).offset(15);
        make.right.mas_equalTo(self.sendBtn.mas_left).offset(-15);
        make.height.offset(40);
    }];
    [self.view addSubview:self.detailCollectionView];
    [self.detailCollectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.offset(0);
        make.bottom.mas_equalTo(self.bottomView.mas_top).offset(0);
    }];
    [self.view addSubview:self.pictureImage];
    [self.pictureImage mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.view);
        make.width.offset(200);
        make.height.offset(200);
    }];
}
#pragma mark --   detailCollectionView
-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 1;
}
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return self.detailListArr.count;
}
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    return UIEdgeInsetsMake(0, 0, 0, 0);
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    SocializeIntercourseMessageModel *model = self.detailListArr[indexPath.row];
  float textWidth =  [XSDKResourceUtil measureSinglelineStringWidth:model.sendContentStr andFont:[UIFont systemFontOfSize:15]];
    if (textWidth >= 240) {
        textWidth = 240;
    }else{
        textWidth += 10;
    }
   float hight = [XSDKResourceUtil measureMutilineStringHeight:model.sendContentStr andFont:[UIFont systemFontOfSize:15] andWidthSetup:textWidth];
    if ([model.sendType isEqualToString:@"0"]) {
        //带文字
        return CGSizeMake(IPHONE_WIDTH, hight + 55);
    }else{
        //带图片
        return  CGSizeMake(IPHONE_WIDTH, 160);
    }
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
        SocializeIntercourseMessageModel *model = self.detailListArr[indexPath.row];
        if ([model.sendType isEqualToString:@"0"]) {
            //文字功能
            NeighborsSimpleCuteMessageContentCell *messageCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteMessageContentCell" forIndexPath:indexPath];
            NSString *imageBaseUrl = [NSString stringWithFormat:@"%@/",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th];
            NSString *picurl = [NSString stringWithFormat:@"%@%@",imageBaseUrl,[NeighborsSimpleCuteUserModel getUserInfo].userInfo.tempStr7th];
            NSLog(@"picurl44323233:%@",picurl);
            [messageCell.iconImage sd_setImageWithURL:[NSURL URLWithString:picurl] placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
            messageCell.model = model;
            return messageCell;
        }else{
            //图片功能
            NeighborsSimpleCuteMessagePictureCell *messagePictureCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteMessagePictureCell" forIndexPath:indexPath];
            NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask, YES);
            NSString *filePath = [[paths objectAtIndex:0]stringByAppendingPathComponent:
                                          [NSString stringWithFormat:(@"n_add_sened_img.png")]];
            // 保存文件的名称
            UIImage *img = [UIImage imageWithContentsOfFile:filePath];
            NSLog(@"img:%@",img);
            if (img) {
                    messagePictureCell.iconImage.image = img;
                }else{
                    messagePictureCell.iconImage.image = [UIImage imageNamed:TUIKitResource(@"n_default_bg.png")];
            }
            messagePictureCell.timeLab.text = [NSString stringWithFormat:@"%@",model.sendTimeStr];
            messagePictureCell.pictureImage.image = [UIImage imageWithData:model.sendPicture];
            return messagePictureCell;
        }
}
-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
}
//-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
//{
//    return 1;
//}
//-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
//{
//    return self.detailListArr.count;
//}
//-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
//{
//    SocializeIntercourseMessageModel *model = self.detailListArr[indexPath.row];
//   float textWidth =  [XSDKResourceUtil measureSinglelineStringWidth:model.sendContentStr andFont:[UIFont systemFontOfSize:15]];
//    NSLog(@"textWith:%f",textWidth);
//    if ([model.sendType isEqualToString:@"0"]) {
//        CGFloat height = [self SocializeIntercourseGetLSwLabelHeightWithText:model.sendContentStr width:240 font:15];
//        return height + 70;
//    }else{
//        return 160;
//    }
//}
//
//-(float)SocializeIntercourseGetLSwLabelHeightWithText:(NSString *)text width:(float)width font: (float)font
//{
//    CGRect rect = [text boundingRectWithSize:CGSizeMake(width, MAXFLOAT) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:font]} context:nil];
//    return rect.size.height;
//}
//
//-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
//{
//    SocializeIntercourseMessageModel *model = self.detailListArr[indexPath.row];
//    if ([model.sendType isEqualToString:@"0"]) {
//        //文字功能
//        NeighborsSimpleCuteMessageContentCell *messageCell = [tableView dequeueReusableCellWithIdentifier:@"NeighborsSimpleCuteMessageContentCell" forIndexPath:indexPath];
//        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask, YES);
//        NSString *filePath = [[paths objectAtIndex:0]stringByAppendingPathComponent:
//                                      [NSString stringWithFormat:(@"n_add_sened_img.png")]];
//        // 保存文件的名称
//        UIImage *img = [UIImage imageWithContentsOfFile:filePath];
//        NSLog(@"img:%@",img);
//        if (img) {
//                messageCell.iconImage.image = img;
//            }else{
//                messageCell.iconImage.image = [UIImage imageNamed:TUIKitResource(@"n_default_bg.png")];
//        }
//        messageCell.timeLab.text = model.sendTimeStr;
//        messageCell.contentLab.text = model.sendContentStr;
//        messageCell.selectionStyle = UITableViewCellSelectionStyleNone;
//        return messageCell;
//    }else{
//        //图片功能
//        NeighborsSimpleCuteMessagePictureCell *messagePictureCell = [tableView dequeueReusableCellWithIdentifier:@"NeighborsSimpleCuteMessagePictureCell" forIndexPath:indexPath];
//        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask, YES);
//        NSString *filePath = [[paths objectAtIndex:0]stringByAppendingPathComponent:
//                                      [NSString stringWithFormat:(@"n_add_sened_img.png")]];
//        // 保存文件的名称
//        UIImage *img = [UIImage imageWithContentsOfFile:filePath];
//        NSLog(@"img:%@",img);
//        if (img) {
//                messagePictureCell.iconImage.image = img;
//            }else{
//                messagePictureCell.iconImage.image = [UIImage imageNamed:TUIKitResource(@"n_default_bg.png")];
//        }
//        messagePictureCell.timeLab.text = [NSString stringWithFormat:@"%@",model.sendTimeStr];
//        messagePictureCell.pictureImage.image = [UIImage imageWithData:model.sendPicture];
//        messagePictureCell.selectionStyle = UITableViewCellSelectionStyleNone;
//        return messagePictureCell;
//    }
//}
//
//-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
//{
//    [tableView deselectRowAtIndexPath:indexPath animated:YES];
//}
//举报功能
- (void)onNeighborsSimpleCuteRightBackBtn:(UIButton *)btn
{
    NSLog(@"举报功能");
    NeighborsSimpleCuteReportView *repotview = [[NeighborsSimpleCuteReportView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    NSCParameterAssert(window);
    [repotview setNeighborsSimpleCuteReportViewBlockBlock:^{
        [SVProgressHUD showInfoWithStatus:@"This member has been successfully moved to your blacklist"];
    }];
    [repotview setNeighborsSimpleCuteReportViewReportBlock:^{
        NeighborsSimpleCuteSettingFeedBackController *feedbackvc = [[NeighborsSimpleCuteSettingFeedBackController alloc]init];
        feedbackvc.hidesBottomBarWhenPushed = YES;
        [self.navigationController pushViewController:feedbackvc animated:YES];
    }];
    [window addSubview:repotview];
}
@end

// 聊天界面cell
@interface NeighborsSimpleCuteMessageListCell ()

@end

@implementation NeighborsSimpleCuteMessageListCell

- (UIImageView *)iconImageView
{
    if (!_iconImageView) {
        _iconImageView = [[UIImageView alloc]init];
        _iconImageView.backgroundColor = [UIColor clearColor];
        _iconImageView.contentMode = UIViewContentModeScaleAspectFill;
        _iconImageView.layer.cornerRadius = 40.0f;
        _iconImageView.layer.masksToBounds = YES;
        _iconImageView.layer.borderColor = [UIColor lightGrayColor].CGColor;
        _iconImageView.layer.borderWidth = 1.5;
    }
    return _iconImageView;
}
- (UILabel *)titleLab
{
    if (!_titleLab) {
        _titleLab = [[UILabel alloc]init];
        _titleLab.textColor = RGB(247, 191, 70);
        _titleLab.text = @"TestTest";
        _titleLab.font = [UIFont systemFontOfSize:18];
        _titleLab.textAlignment = NSTextAlignmentLeft;
    }
    return _titleLab;
}

- (UILabel *)subTitleLab
{
    if (!_subTitleLab) {
        _subTitleLab = [[UILabel alloc]init];
        _subTitleLab.textColor = RGB(166, 166, 166);
        _subTitleLab.text = @"hello djghsajdgasjjkdsahskjfdss...";
        _subTitleLab.font = [UIFont fontWithName:@"MyriadPro-Regular" size:15];
        _subTitleLab.textAlignment = NSTextAlignmentLeft;
    }
    return _subTitleLab;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.contentView.backgroundColor = NSC_BGThemColor2;
        self.contentView.layer.cornerRadius = 10.0f;
        self.contentView.layer.masksToBounds = YES;
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self addSubview:self.iconImageView];
    [self.iconImageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.contentView);
        make.left.offset(15);
        make.width.height.offset(80);
    }];
    [self addSubview:self.titleLab];
    [self.titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.contentView).offset(-15);
        make.left.mas_equalTo(self.iconImageView.mas_right).offset(10);
        make.right.offset(-10);
    }];
    [self addSubview:self.subTitleLab];
    [self.subTitleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_equalTo(self.iconImageView.mas_right).offset(10);
        make.right.offset(-10);
        make.top.mas_equalTo(self.titleLab.mas_bottom).offset(10);
    }];
}

@end

// 聊天界面的功能

@interface NeighborsSimpleCuteMessageMainController () <UICollectionViewDelegate,UICollectionViewDataSource>

@property (nonatomic,strong)UIImageView *typeImg;

@property (nonatomic,strong)UILabel *typeAlterLab;

@property (nonatomic,strong)UICollectionView *messageCollectionView;

@property (nonatomic,strong)NSMutableArray *messageListArr;

@end

@implementation NeighborsSimpleCuteMessageMainController

- (NSMutableArray *)messageListArr
{
    if (!_messageListArr) {
        _messageListArr = [NSMutableArray array];
    }
    return _messageListArr;
}

-(void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self.view addSubview:self.messageCollectionView];
    [self.messageCollectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self.view addSubview:self.typeImg];
    [self.typeImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.centerY.mas_equalTo(self.view).offset(-40);
    }];
    [self.view addSubview:self.typeAlterLab];
    [self.typeAlterLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(40);
        make.right.offset(-40);
        make.top.mas_equalTo(self.typeImg.mas_bottom).offset(30);
    }];
    [self.messageListArr removeAllObjects];
    self.messageListArr = [[NeighborsSimpleCuteDBTool NeighborsSimpleCuteProjectSharaDBTool]queryAllMessageStoreModel];
    if (self.messageListArr.count == 0) {
        self.typeImg.hidden  = NO;
        self.typeAlterLab.hidden = NO;
        self.messageCollectionView.hidden = YES;
    }else{
        self.typeImg.hidden = YES;
        self.typeAlterLab.hidden = YES;
        self.messageCollectionView.hidden = NO;
    }
    [self.messageCollectionView reloadData];
}
- (UICollectionView *)messageCollectionView
{
    if (!_messageCollectionView) {
        UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc]init];
        flow.scrollDirection = UICollectionViewScrollDirectionVertical;
        flow.minimumLineSpacing = 10;
        flow.minimumInteritemSpacing = 10;
        _messageCollectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flow];
        _messageCollectionView.backgroundColor = [UIColor clearColor];
        _messageCollectionView.delegate = self;
        _messageCollectionView.dataSource = self;
        [_messageCollectionView registerClass:[NeighborsSimpleCuteMessageListCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteMessageListCell"];
    }
    return _messageCollectionView;
}
- (UIImageView *)typeImg
{
    if (!_typeImg) {
        _typeImg = [[UIImageView alloc]init];
        _typeImg.image = [UIImage imageNamed:TUIKitResource(@"n_nomessageshow_alter")];
        _typeImg.contentMode =  UIViewContentModeScaleAspectFit;
    }
    return _typeImg;
}
- (UILabel *)typeAlterLab
{
    if (!_typeAlterLab) {
        _typeAlterLab = [[UILabel alloc]init];
        _typeAlterLab.text = @"You haven't received any message yet. Upload your voice for more attention.";
        _typeAlterLab.textColor = RGB(237, 151, 64);
        _typeAlterLab.textAlignment = NSTextAlignmentCenter;
        _typeAlterLab.numberOfLines = 0;
    }
    return _typeAlterLab;
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"Message";
}
#pragma mark -- NeighborsSimpleCuteMessageMainController -- UICollectionViewDelegate,UICollectionViewDataSource
-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 1;
}
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return self.messageListArr.count;
}

-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    return UIEdgeInsetsMake(10, 0, 0, 0);
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    return CGSizeMake(SCREEN_WIDTH-20, 100);
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    NeighborsSimpleCuteMessageListCell *mesageListCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteMessageListCell" forIndexPath:indexPath];
    SocializeIntercourseMessageOtherModel *model = self.messageListArr[indexPath.row];
    [mesageListCell.iconImageView sd_setImageWithURL:[NSURL URLWithString:model.storeIconStr] placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
    mesageListCell.titleLab.text = [NSString stringWithFormat:@"%@",model.storeNameStr];
    mesageListCell.subTitleLab.text = [NSString stringWithFormat:@"%@",model.storeLastStr];
    return mesageListCell;
}
-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
    SocializeIntercourseMessageOtherModel *model = self.messageListArr[indexPath.row];
    NeighborsSimpleCuteMessageChatMainController *messageChatVc = [[NeighborsSimpleCuteMessageChatMainController alloc]init];
    messageChatVc.hidesBottomBarWhenPushed = YES;
    messageChatVc.NameStr = model.storeNameStr;
    messageChatVc.IconStr  = model.storeIconStr;
    [self.navigationController pushViewController:messageChatVc animated:YES];
}
@end

@interface NeighborsSimpleCuteSettingContentViewCell ()

@end

@implementation NeighborsSimpleCuteSettingContentViewCell

- (UIImageView *)iconImg
{
    if (!_iconImg) {
        _iconImg = [[UIImageView alloc]init];
        _iconImg.image = [UIImage imageNamed:TUIKitResource(@"test")];
        _iconImg.contentMode = UIViewContentModeScaleAspectFill;
        _iconImg.layer.cornerRadius= 60;
        _iconImg.layer.masksToBounds = YES;
        _iconImg.layer.borderColor = NSC_MainThemColor.CGColor;
        _iconImg.layer.borderWidth = 2.0f;
    }
    return _iconImg;
}
- (UILabel *)titleLab
{
    if (!_titleLab) {
        _titleLab = [[UILabel alloc]init];
        _titleLab.text = @"Test";
        _titleLab.textColor = [UIColor whiteColor];
        _titleLab.font = [UIFont systemFontOfSize:16];
        _titleLab.textAlignment = NSTextAlignmentCenter;
    }
    return _titleLab;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    [self addSubview:self.iconImg];
    [self.iconImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.offset(10);
        make.width.height.offset(120);
    }];
    [self addSubview:self.titleLab];
    [self.titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.mas_equalTo(self.iconImg.mas_bottom).offset(15);
    }];
}
@end

@interface NeighborsSimpleCuteSettingRechargeViewCell()

@end


@implementation NeighborsSimpleCuteSettingRechargeViewCell

- (UIButton *)rechagerBtn
{
    if (!_rechagerBtn) {
        _rechagerBtn = [[UIButton alloc]init];
        [_rechagerBtn setImage:[UIImage imageNamed:TUIKitResource(@"zf_profile_update")] forState:UIControlStateNormal];
        [_rechagerBtn setTitle:@"    Upgrade" forState:UIControlStateNormal];
        [_rechagerBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_rechagerBtn addTarget:self action:@selector(actionRechageBtn:) forControlEvents:UIControlEventTouchUpInside];
        _rechagerBtn.layer.cornerRadius = 10.0f;
        _rechagerBtn.layer.masksToBounds = YES;
        [_rechagerBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 60),60) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _rechagerBtn;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self addSubview:self.rechagerBtn];
    [self.rechagerBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self);
        make.width.offset(IPHONE_WIDTH-60);
        make.height.height.offset(60);
    }];
}

-(void)actionRechageBtn:(UIButton *)btn
{
    NSLog(@"购买会员");
    if (self.NeighborsSimpleCuteSettingRechargeViewCellRechageBlock) {
        self.NeighborsSimpleCuteSettingRechargeViewCellRechageBlock();
    }
}

@end

/// 新ui设计的功能
@interface NeighborsSimpleCuteSettingHeaderOtherViewCell ()


@end

@implementation NeighborsSimpleCuteSettingHeaderOtherViewCell

- (UIView *)bgView{
    if (!_bgView) {
        _bgView = [[UIView alloc]init];
        _bgView.backgroundColor = NSC_BGThemColor2;
        _bgView.layer.cornerRadius = 65.0f;
        _bgView.layer.masksToBounds = YES;
    }
    return _bgView;
}
- (UIImageView *)iconImg
{
    if (!_iconImg) {
        _iconImg = [[UIImageView alloc]init];
        _iconImg.image = [UIImage imageNamed:TUIKitResource(@"n_setting_profile")];
        _iconImg.contentMode = UIViewContentModeScaleAspectFill;
        _iconImg.layer.cornerRadius = 60.0f;
        _iconImg.layer.masksToBounds = YES;
    }
    return _iconImg;
}
- (UIButton *)nameBtn
{
    if (!_nameBtn) {
        _nameBtn = [[UIButton alloc]init];
        [_nameBtn setTitle:@"测试功能" forState:UIControlStateNormal];
        [_nameBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _nameBtn.titleLabel.font = [UIFont boldSystemFontOfSize:17];
        [_nameBtn setSemanticContentAttribute:UISemanticContentAttributeForceRightToLeft];
        _nameBtn.imageEdgeInsets = UIEdgeInsetsMake(0, 5, 0, 0);
    }
    return _nameBtn;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        //self.contentView.backgroundColor = NSC_BGThemColor2;
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    [self addSubview:self.bgView];
    [self.bgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.centerY.mas_equalTo(self).offset(-20);
        make.width.height.offset(130);
    }];
    [self addSubview:self.iconImg];
    [self.iconImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.centerY.mas_equalTo(self).offset(-20);
        make.width.height.offset(120);
    }];
    [self addSubview:self.nameBtn];
    [self.nameBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.mas_equalTo(self.iconImg.mas_bottom).offset(20);
    }];
}

@end

@interface NeighborsSimpleCuteSettingRechargeOtherViewCell()

@end

@implementation NeighborsSimpleCuteSettingRechargeOtherViewCell

- (UIView *)bgView
{
    if (!_bgView) {
        _bgView = [[UIView alloc]init];
        _bgView.backgroundColor = NSC_BGThemColor2;
        _bgView.layer.cornerRadius = 10.0f;
        _bgView.layer.masksToBounds = YES;
    }
    return _bgView;
}
- (UIButton *)rechagerBtn
{
    if (!_rechagerBtn) {
        _rechagerBtn = [[UIButton alloc]init];
        [_rechagerBtn setImage:[UIImage imageNamed:TUIKitResource(@"grzxer_upgrade")] forState:UIControlStateNormal];
        [_rechagerBtn setTitle:@"   Upgrade to Permium Member" forState:UIControlStateNormal];
        [_rechagerBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        [_rechagerBtn addTarget:self action:@selector(actionRechageBtn:) forControlEvents:UIControlEventTouchUpInside];
        _rechagerBtn.layer.cornerRadius = 10.0f;
        _rechagerBtn.layer.masksToBounds = YES;
        [_rechagerBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 60),60) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
    }
    return _rechagerBtn;
}


-(void)actionRechageBtn:(UIButton *)btn
{
    //upgrade to Permium Member
    if (self.NeighborsSimpleCuteSettingRechargeViewCellRechageBlock) {
        self.NeighborsSimpleCuteSettingRechargeViewCellRechageBlock();
    }
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self addSubview:self.bgView];
    [self.bgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self);
        make.width.offset(IPHONE_WIDTH-30);
        make.height.height.offset(90);
    }];
    [self addSubview:self.rechagerBtn];
    [self.rechagerBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self);
        make.width.offset(IPHONE_WIDTH-40);
        make.height.height.offset(80);
    }];
}
@end

// base setting

@interface NeighborsSimpleCuteBaseSettingContentViewCell()

@end

@implementation NeighborsSimpleCuteBaseSettingContentViewCell

- (UILabel *)titleLab
{
    if (!_titleLab) {
        _titleLab = [[UILabel alloc]init];
        _titleLab.text = @"Test";
        _titleLab.textColor = [UIColor whiteColor];
        _titleLab.font = [UIFont systemFontOfSize:17];
        _titleLab.textAlignment = NSTextAlignmentLeft;
    }
    return _titleLab;
}


- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.contentView.backgroundColor = RGB(41, 41, 41);
        self.layer.cornerRadius = 8.0f;
        self.layer.masksToBounds = YES;
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    [self addSubview:self.titleLab];
    [self.titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.contentView);
        make.left.offset(15);
        make.right.offset(-15);
    }];
}

@end

@interface NeighborsSimpleCuteSettingContentOtherViewCell ()


@end

@implementation NeighborsSimpleCuteSettingContentOtherViewCell

- (UIImageView *)iconImg
{
    if (!_iconImg) {
        _iconImg = [[UIImageView alloc]init];
        _iconImg.image = [UIImage imageNamed:TUIKitResource(@"test")];
        _iconImg.contentMode = UIViewContentModeScaleAspectFit;
        //_iconImg.layer.cornerRadius= 30;
        //_iconImg.layer.masksToBounds = YES;
        //_iconImg.layer.borderColor = NSC_MainThemColor.CGColor;
        //_iconImg.layer.borderWidth = 2.0f;
    }
    return _iconImg;
}
- (UILabel *)titleLab
{
    if (!_titleLab) {
        _titleLab = [[UILabel alloc]init];
        _titleLab.text = @"Test";
        _titleLab.textColor = [UIColor whiteColor];
        _titleLab.font = [UIFont systemFontOfSize:16];
        _titleLab.textAlignment = NSTextAlignmentCenter;
    }
    return _titleLab;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.contentView.backgroundColor = NSC_BGThemColor2;
        self.layer.cornerRadius = 15.0f;
        self.layer.masksToBounds = YES;
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    [self addSubview:self.iconImg];
    [self.iconImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.offset(25);
        //make.width.height.offset(60);
    }];
    [self addSubview:self.titleLab];
    [self.titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.mas_equalTo(self.iconImg.mas_bottom).offset(10);
    }];
}

@end

@interface NeighborsSimpleCuteSettingHeaderViewCell ()


@end

@implementation NeighborsSimpleCuteSettingHeaderViewCell

- (UIImageView *)iconImg
{
    if (!_iconImg) {
        _iconImg = [[UIImageView alloc]init];
        _iconImg.image = [UIImage imageNamed:TUIKitResource(@"n_setting_profile")];
        _iconImg.contentMode = UIViewContentModeScaleAspectFill;
    }
    return _iconImg;
}

- (UILabel *)iconLab
{
    if (!_iconLab) {
        _iconLab = [[UILabel alloc]init];
        _iconLab.text = @"About us";
        _iconLab.textColor = RGB(237, 151, 64);
        _iconLab.font = [UIFont systemFontOfSize:16];
        _iconLab.textAlignment = NSTextAlignmentCenter;
    }
    return _iconLab;
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.contentView.backgroundColor = NSC_BGThemColor2;
        self.contentView.layer.cornerRadius = 15.0f;
        self.contentView.layer.masksToBounds = YES;
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    [self addSubview:self.iconImg];
    [self.iconImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.centerY.mas_equalTo(self).offset(-20);
    }];
    [self addSubview:self.iconLab];
    [self.iconLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.mas_equalTo(self.iconImg.mas_bottom).offset(20);
    }];
}
@end

@interface NeighborsSimpleCuteDelAccountView ()

@property (nonatomic,strong)UIView *bgView;

@property (nonatomic,strong)UILabel *alterLab;

@property (nonatomic,strong)UILabel *alterContentLab;

@property (nonatomic,strong)UIButton *cancelBtn;

@property (nonatomic,strong)UIButton *signOutBtn;

@end

@implementation NeighborsSimpleCuteDelAccountView

- (UIView *)bgView
{
    if (!_bgView) {
        _bgView = [[UIView alloc]init];
        _bgView.backgroundColor = RGB(50, 48, 49);
        _bgView.layer.cornerRadius = 8.0f;
        _bgView.layer.masksToBounds = YES;
    }
    return _bgView;
}
- (UILabel *)alterContentLab
{
    if (!_alterContentLab) {
        _alterContentLab = [[UILabel alloc]init];
        _alterContentLab.text = @"If you delete your account, you will permanently lose your profile, voice, messages, photo.";
        _alterContentLab.numberOfLines = 0 ;
        _alterContentLab.textColor = [UIColor whiteColor];
        _alterContentLab.textAlignment = NSTextAlignmentCenter;
    }
    return _alterContentLab;
}
- (UILabel *)alterLab
{
    if (!_alterLab) {
        _alterLab = [[UILabel  alloc]init];
        _alterLab.text = @"Delete my account ？";
        _alterLab.textColor = RGB(237, 151, 64);
        _alterLab.font = [UIFont boldSystemFontOfSize:17];
        _alterLab.textAlignment = NSTextAlignmentCenter;
    }
    return _alterLab;
}

- (UIButton *)cancelBtn
{
    if (!_cancelBtn) {
        _cancelBtn = [[UIButton alloc]init];
        _cancelBtn.layer.cornerRadius = 25.0f;
        _cancelBtn.layer.masksToBounds = YES;
        [_cancelBtn setTitle:@"Cancel" forState:UIControlStateNormal];
        [_cancelBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _cancelBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_cancelBtn addTarget:self action:@selector(actionDelCancelbtn:) forControlEvents:UIControlEventTouchUpInside];
        [_cancelBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 100)/2,50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _cancelBtn;
}

- (UIButton *)signOutBtn
{
    if (!_signOutBtn) {
        _signOutBtn = [[UIButton alloc]init];
        _signOutBtn.layer.cornerRadius = 25.0f;
        _signOutBtn.layer.masksToBounds = YES;
        [_signOutBtn setTitle:@"Confirm" forState:UIControlStateNormal];
        [_signOutBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _signOutBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_signOutBtn addTarget:self action:@selector(actionDelConfirmBtn:) forControlEvents:UIControlEventTouchUpInside];
        [_signOutBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 100)/2,50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _signOutBtn;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    self.backgroundColor =  [[UIColor blackColor] colorWithAlphaComponent:0.5];
    [self addSubview:self.bgView];
    [self.bgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self);
        make.left.offset(20);
        make.right.offset(-20);
        make.height.offset(330);
    }];
    [self.bgView addSubview:self.alterContentLab];
    [self.alterContentLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bgView);
        make.centerY.mas_equalTo(self.bgView).offset(-20);
        make.left.offset(20);
        make.right.offset(-20);
    }];
    [self.bgView addSubview:self.alterLab];
    [self.alterLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bgView);
        make.bottom.mas_equalTo(self.alterContentLab.mas_top).offset(-30);
    }];
    [self.bgView addSubview:self.cancelBtn];
    [self.cancelBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.bottom.offset(-40);
        make.width.offset((IPHONE_WIDTH - 100)/2);
        make.height.offset(50);
    }];
    [self.bgView addSubview:self.signOutBtn];
    [self.signOutBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-20);
        make.bottom.offset(-40);
        make.width.offset((IPHONE_WIDTH - 100)/2);
        make.height.offset(50);
    }];
}

-(void)actionDelCancelbtn:(UIButton *)btn
{
    NSLog(@"actionDelCancelbtnactionDelCancelbtnactionDelCancelbtn");
    [self removeFromSuperview];
}

-(void)actionDelConfirmBtn:(UIButton *)btn
{
    NSLog(@"actionDelConfirmBtnactionDelConfirmBtnactionDelConfirmBtnactionDelConfirmBtn");
    if (self.NeighborsSimpleCuteDelAccountViewBlock) {
        self.NeighborsSimpleCuteDelAccountViewBlock();
    }
    [self removeFromSuperview];
}

- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
    CGPoint location = [[touches anyObject] locationInView:self];
    if (![self.bgView pointInside:[self.bgView convertPoint:location fromView:self.bgView.window] withEvent:nil]){
        [self removeFromSuperview];
    }
}

@end

@interface NeighborsSimpleCuteChnageNameView ()

@property (nonatomic,strong)UIView *bgView;

@property (nonatomic,strong)UILabel *alterLab;

@property (nonatomic,strong)UIButton *cancelBtn;

@property (nonatomic,strong)UITextField *nameTF;

@property (nonatomic,strong)UIButton *signOutBtn;

@end

@implementation NeighborsSimpleCuteChnageNameView

- (UIView *)bgView
{
    if (!_bgView) {
        _bgView = [[UIView alloc]init];
        _bgView.backgroundColor = NSC_BGThemColor;
        _bgView.layer.cornerRadius = 8.0f;
        _bgView.layer.masksToBounds = YES;
    }
    return _bgView;
}

- (UITextField *)nameTF
{
    if (!_nameTF) {
        _nameTF = [[UITextField alloc]init];
        _nameTF.placeholder = @"Please enter your username";
        _nameTF.textColor = [UIColor  whiteColor];
        _nameTF.backgroundColor = RGB(100, 100, 100);
        _nameTF.layer.cornerRadius = 5.0f;
        _nameTF.layer.masksToBounds = YES;
        _nameTF.textAlignment = NSTextAlignmentLeft;
    }
    return _nameTF;
}
- (UILabel *)alterLab
{
    if (!_alterLab) {
        _alterLab = [[UILabel  alloc]init];
        _alterLab.text = @"Change username";
        _alterLab.textColor = RGB(237, 151, 64);
        _alterLab.font = [UIFont boldSystemFontOfSize:17];
        _alterLab.textAlignment = NSTextAlignmentCenter;
    }
    return _alterLab;
}

- (UIButton *)cancelBtn
{
    if (!_cancelBtn) {
        _cancelBtn = [[UIButton alloc]init];
        _cancelBtn.layer.cornerRadius = 25.0f;
        _cancelBtn.layer.masksToBounds = YES;
        [_cancelBtn setTitle:@"Cancel" forState:UIControlStateNormal];
        [_cancelBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _cancelBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_cancelBtn addTarget:self action:@selector(actionCancelbtn:) forControlEvents:UIControlEventTouchUpInside];
        [_cancelBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 100)/2,50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _cancelBtn;
}

- (UIButton *)signOutBtn
{
    if (!_signOutBtn) {
        _signOutBtn = [[UIButton alloc]init];
        _signOutBtn.layer.cornerRadius = 25.0f;
        _signOutBtn.layer.masksToBounds = YES;
        [_signOutBtn setTitle:@"Submit" forState:UIControlStateNormal];
        [_signOutBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _signOutBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_signOutBtn addTarget:self action:@selector(actionSignOutBtn:) forControlEvents:UIControlEventTouchUpInside];
        [_signOutBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 100)/2,50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _signOutBtn;
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    self.backgroundColor =  [[UIColor blackColor] colorWithAlphaComponent:0.6];
    [self addSubview:self.bgView];
    [self.bgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self);
        make.left.offset(20);
        make.right.offset(-20);
        make.height.offset(220);
    }];
    [self.bgView addSubview:self.alterLab];
    [self.alterLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bgView);
        make.top.offset(30);
    }];
    
    [self.bgView addSubview:self.nameTF];
    [self.nameTF mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.right.offset(-20);
        make.top.mas_equalTo(self.alterLab.mas_bottom).offset(20);
        make.height.offset(40);
    }];
    
    [self.bgView addSubview:self.cancelBtn];
    [self.cancelBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.top.mas_equalTo(self.nameTF.mas_bottom).offset(20);
        make.width.offset((IPHONE_WIDTH - 100)/2);
        make.height.offset(50);
    }];
    [self.bgView addSubview:self.signOutBtn];
    [self.signOutBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-20);
        make.top.mas_equalTo(self.nameTF.mas_bottom).offset(20);
        make.width.offset((IPHONE_WIDTH - 100)/2);
        make.height.offset(50);
    }];
    
    NSString *nameStr = [NeighborsSimpleCuteUserModel getUserInfo].userInfo.nickName;
    //[[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_EmailUser];
    self.nameTF.text = nameStr;
}
- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
    CGPoint location = [[touches anyObject] locationInView:self];
    if (![self.bgView pointInside:[self.bgView convertPoint:location fromView:self.bgView.window] withEvent:nil]){
        [self removeFromSuperview];
    }
}

-(void)actionCancelbtn:(UIButton *)btn
{
    NSLog(@"actionCancelbtnactionCancelbtnactionCancelbtnactionCancelbtn");
    [self removeFromSuperview];
}

-(void)actionSignOutBtn:(UIButton *)btn
{
    NSLog(@"actionSignOutBtnactionSignOutBtnactionSignOutBtn");
    if (self.nameTF.text.length == 0) {
        [SVProgressHUD showInfoWithStatus:@"Please enter your username"];
        return;
    }
    if (self.NeighborsSimpleCuteChnageNameViewBlcok) {
        self.NeighborsSimpleCuteChnageNameViewBlcok(self.nameTF.text);
    }
    [self removeFromSuperview];
}
@end

// 举报view alter

@interface NeighborsSimpleCuteReportView ()

@property (nonatomic,strong)UIButton *reportBtn;

@property (nonatomic,strong)UIButton *blockBtn;

@property (nonatomic,strong)UIButton *cancelBtn;

@end

@implementation NeighborsSimpleCuteReportView

- (UIButton *)reportBtn
{
    if (!_reportBtn) {
        _reportBtn = [[UIButton alloc]init];
        _reportBtn.backgroundColor = NSC_BGThemColor2;
        [_reportBtn setTitle:@"Report" forState:UIControlStateNormal];
        [_reportBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _reportBtn.titleLabel.font = [UIFont fontWithName:@"ArialMT" size:17];
        _reportBtn.layer.cornerRadius = 10.f;
        _reportBtn.layer.masksToBounds = YES;
        [_reportBtn addTarget:self action:@selector(actionReportBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _reportBtn;
}

-(void)actionReportBtn:(UIButton *)btn
{
    if (self.NeighborsSimpleCuteReportViewReportBlock) {
        self.NeighborsSimpleCuteReportViewReportBlock();
    }
    [self removeFromSuperview];
}
- (UIButton *)blockBtn
{
    if (!_blockBtn) {
        _blockBtn = [[UIButton alloc]init];
        _blockBtn.backgroundColor = NSC_BGThemColor2;
        [_blockBtn setTitle:@"Block" forState:UIControlStateNormal];
        [_blockBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _blockBtn.titleLabel.font = [UIFont fontWithName:@"ArialMT" size:17];
        _blockBtn.layer.cornerRadius = 10.f;
        _blockBtn.layer.masksToBounds = YES;
        [_blockBtn addTarget:self action:@selector(actionBlockBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _blockBtn;
}

-(void)actionBlockBtn:(UIButton *)btn
{
    if (self.NeighborsSimpleCuteReportViewBlockBlock) {
        self.NeighborsSimpleCuteReportViewBlockBlock();
    }
    [self removeFromSuperview];
}
- (UIButton *)cancelBtn
{
    if (!_cancelBtn) {
        _cancelBtn = [[UIButton alloc]init];
        _cancelBtn.backgroundColor = NSC_BGThemColor2;
        [_cancelBtn setTitle:@"Cancel" forState:UIControlStateNormal];
        [_cancelBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _cancelBtn.titleLabel.font = [UIFont fontWithName:@"ArialMT" size:17];
        _cancelBtn.layer.cornerRadius = 10.f;
        _cancelBtn.layer.masksToBounds = YES;
        [_cancelBtn addTarget:self action:@selector(actionCancelBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _cancelBtn;
}

-(void)actionCancelBtn:(UIButton *)btn
{
    if (self.NeighborsSimpleCuteReportViewCancelBlock) {
        self.NeighborsSimpleCuteReportViewCancelBlock();
    }
    [self removeFromSuperview];
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupRepotUI];
    }
    return self;
}

-(void)setupRepotUI
{
    self.backgroundColor =  [[UIColor blackColor] colorWithAlphaComponent:0.5];
    [self addSubview:self.cancelBtn];
    [self.cancelBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.right.offset(-20);
        make.bottom.offset(-10);
        make.height.offset(55);
    }];
    [self addSubview:self.blockBtn];
    [self.blockBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.right.offset(-20);
        make.bottom.mas_equalTo(self.cancelBtn.mas_top).offset(-15);
        make.height.offset(55);
    }];
    [self addSubview:self.reportBtn];
    [self.reportBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.right.offset(-20);
        make.bottom.mas_equalTo(self.blockBtn.mas_top).offset(-15);
        make.height.offset(55);
    }];
}
@end

@interface NeighborsSimpleCuteSignOutView ()

@property (nonatomic,strong)UIView *bgView;

@property (nonatomic,strong)UILabel *alterLab;

@property (nonatomic,strong)UIButton *cancelBtn;

@property (nonatomic,strong)UIButton *signOutBtn;

@end

@implementation NeighborsSimpleCuteSignOutView

- (UIView *)bgView
{
    if (!_bgView) {
        _bgView = [[UIView alloc]init];
        _bgView.backgroundColor = RGB(50, 48, 49);
        _bgView.layer.cornerRadius = 8.0f;
        _bgView.layer.masksToBounds = YES;
    }
    return _bgView;
}

- (UILabel *)alterLab
{
    if (!_alterLab) {
        _alterLab = [[UILabel  alloc]init];
        _alterLab.text = @"Are you sure you want to sign out？";
        _alterLab.textColor = RGB(237, 151, 64);
        _alterLab.font = [UIFont boldSystemFontOfSize:17];
        _alterLab.textAlignment = NSTextAlignmentCenter;
    }
    return _alterLab;
}

- (UIButton *)cancelBtn
{
    if (!_cancelBtn) {
        _cancelBtn = [[UIButton alloc]init];
        _cancelBtn.layer.cornerRadius = 25.0f;
        _cancelBtn.layer.masksToBounds = YES;
        [_cancelBtn setTitle:@"Cancel" forState:UIControlStateNormal];
        [_cancelBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _cancelBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_cancelBtn addTarget:self action:@selector(actionCancelbtn:) forControlEvents:UIControlEventTouchUpInside];
        [_cancelBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 100)/2,50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _cancelBtn;
}

- (UIButton *)signOutBtn
{
    if (!_signOutBtn) {
        _signOutBtn = [[UIButton alloc]init];
        _signOutBtn.layer.cornerRadius = 25.0f;
        _signOutBtn.layer.masksToBounds = YES;
        [_signOutBtn setTitle:@"Sign out" forState:UIControlStateNormal];
        [_signOutBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _signOutBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_signOutBtn addTarget:self action:@selector(actionSignOutBtn:) forControlEvents:UIControlEventTouchUpInside];
        [_signOutBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 100)/2,50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _signOutBtn;
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    self.backgroundColor =  [[UIColor blackColor] colorWithAlphaComponent:0.5];
    [self addSubview:self.bgView];
    [self.bgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self);
        make.left.offset(20);
        make.right.offset(-20);
        make.height.offset(260);
    }];
    [self.bgView addSubview:self.alterLab];
    [self.alterLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bgView);
        make.centerY.mas_equalTo(self.bgView).offset(-40);
    }];
    [self.bgView addSubview:self.cancelBtn];
    [self.cancelBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.bottom.offset(-40);
        make.width.offset((IPHONE_WIDTH - 100)/2);
        make.height.offset(50);
    }];
    [self.bgView addSubview:self.signOutBtn];
    [self.signOutBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-20);
        make.bottom.offset(-40);
        make.width.offset((IPHONE_WIDTH - 100)/2);
        make.height.offset(50);
    }];
}
- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
    CGPoint location = [[touches anyObject] locationInView:self];
    if (![self.bgView pointInside:[self.bgView convertPoint:location fromView:self.bgView.window] withEvent:nil]){
        [self removeFromSuperview];
    }
}

-(void)actionCancelbtn:(UIButton *)btn
{
    NSLog(@"actionCancelbtnactionCancelbtnactionCancelbtnactionCancelbtn");
    [self removeFromSuperview];
}

-(void)actionSignOutBtn:(UIButton *)btn
{
    NSLog(@"actionSignOutBtnactionSignOutBtnactionSignOutBtn");
    if (self.NeighborsSimpleCuteSignOutViewShowBlock) {
        self.NeighborsSimpleCuteSignOutViewShowBlock();
    }
    [self removeFromSuperview];
}
@end

@interface NeighborsSimpleCuteDelAccountController ()

@property (nonatomic,strong)UITextField *forget_email_tf;

@property (nonatomic,strong)UIView *forget_eamil_view;

@property (nonatomic,strong)UILabel *forget_detail_lab;

@property (nonatomic,strong)UIButton *forget_contiute_btn;
@end

@implementation NeighborsSimpleCuteDelAccountController


- (UITextField *)forget_email_tf
{
    if (!_forget_email_tf) {
        _forget_email_tf = [[UITextField alloc]init];
        _forget_email_tf.font = [UIFont systemFontOfSize:16];
        _forget_email_tf.textColor = [UIColor whiteColor];
        _forget_email_tf.textAlignment = NSTextAlignmentCenter;
        NSMutableAttributedString *attribuedString = [[NSMutableAttributedString alloc]initWithString:@"Enter your password"];
        [attribuedString addAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:18],NSForegroundColorAttributeName:RGB(123, 123, 123)} range:NSMakeRange(0, attribuedString.length)];
        _forget_email_tf.attributedPlaceholder= attribuedString;
        UIView *view1=[[UIView alloc]initWithFrame:CGRectMake(0, 0, 1, 1)];
        _forget_email_tf.leftView = view1;
        _forget_email_tf.leftViewMode = UITextFieldViewModeAlways;
    }
    return _forget_email_tf;
}

- (UIView *)forget_eamil_view
{
    if (!_forget_eamil_view) {
        _forget_eamil_view = [[UIView alloc]init];
        _forget_eamil_view.backgroundColor = RGB(60, 60, 60);
    }
    return _forget_eamil_view;
}

- (UILabel *)forget_detail_lab
{
    if (!_forget_detail_lab) {
        _forget_detail_lab = [[UILabel alloc]init];
        _forget_detail_lab.text = @"If you delete your account, you will permanently lose your profile, voice, messages, photo.";
        _forget_detail_lab.numberOfLines = 0;
        _forget_detail_lab.textColor = RGB(223, 193, 143);
        _forget_detail_lab.font = [UIFont systemFontOfSize:13];
        _forget_detail_lab.textAlignment = NSTextAlignmentCenter;
    }
    return _forget_detail_lab;
}

- (UIButton *)forget_contiute_btn
{
    if (!_forget_contiute_btn) {
        _forget_contiute_btn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_forget_contiute_btn setTitle:@"Submit" forState:UIControlStateNormal];
        _forget_contiute_btn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_forget_contiute_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_forget_contiute_btn addTarget:self action:@selector(actonForgetContinuteBtn:) forControlEvents:UIControlEventTouchUpInside];
        _forget_contiute_btn.layer.cornerRadius = 25.0f;
        _forget_contiute_btn.layer.masksToBounds = YES;
        [_forget_contiute_btn gradientButtonWithSize:CGSizeMake(240, 50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _forget_contiute_btn;
}
-(void)actonForgetContinuteBtn:(UIButton *)btn
{
    NSLog(@"actonForgetContinuteBtn btn");
    [self.view endEditing:YES];
    if (IS_EMPTY(self.forget_email_tf.text)) {
        [SVProgressHUD showInfoWithStatus:@"Please etner your password"];
        return;
    }
    NSString *pwdStr = [[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_LoginPWd];
    NSLog(@"pwdStr:%@",pwdStr);
    if ([self.forget_email_tf.text isEqualToString:pwdStr]) {
        NSMutableDictionary *param = [NSMutableDictionary dictionary];
        param[@"isDel"] = @"1";
        NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/account/user/update"];
        [SVProgressHUD show];
        [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel *response) {
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:@"Delete account successful"];
            [[NSUserDefaults standardUserDefaults]removeObjectForKey:NeighborsSimple_LoginStatus];
            [[NSUserDefaults standardUserDefaults]removeObjectForKey:NeighborsSimple_LoginUser];
            [[NSUserDefaults standardUserDefaults]removeObjectForKey:NeighborsSimple_LoginPWd];
            [[NSUserDefaults standardUserDefaults]removeObjectForKey:NeighborsSimple_EmailName];
            [[NSUserDefaults standardUserDefaults]removeObjectForKey:NeighborsSimple_EmailPwd];
            [[NSUserDefaults standardUserDefaults]removeObjectForKey:NeighborsSimple_EmailUser];
            [[NSUserDefaults standardUserDefaults]removeObjectForKey:NeighborsSimple_EmailGender];
            [[NSUserDefaults standardUserDefaults]removeObjectForKey:NeighborsSimple_EmailAge];
            [[NSUserDefaults standardUserDefaults]synchronize];
            NeighborsSimpleCuteRootMainController *rootMainvc = [[NeighborsSimpleCuteRootMainController alloc]init];
            UINavigationController *nav = [[UINavigationController alloc]initWithRootViewController:rootMainvc];
            [UIApplication sharedApplication].keyWindow.rootViewController = nav;
        }failure:^(NSError *error){
            [SVProgressHUD dismiss];
            return;
        }];
    }else{
        [SVProgressHUD showInfoWithStatus:@"Does not match the original password"];
        return;
    }
}

- (void)viewDidLoad
{
    self.view.backgroundColor = NSC_BGThemColor;
    self.navigationItem.title = @"Delete my password";
    [self NeighborsSimpleCuteSetLeftButton:[UIImage imageNamed:TUIKitResource(@"n_back")]];
    [self.view addSubview:self.forget_email_tf];
    [self.forget_email_tf mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.offset(100);
        make.height.offset(40);
    }];
    [self.view addSubview:self.forget_eamil_view];
    [self.forget_eamil_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.forget_email_tf.mas_bottom).offset(2);
        make.height.offset(2);
    }];
    [self.view addSubview:self.forget_detail_lab];
    [self.forget_detail_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.right.offset(-30);
        make.top.mas_equalTo(self.forget_eamil_view.mas_bottom).offset(30);
        make.height.offset(80);
    }];
    [self.view addSubview:self.forget_contiute_btn];
    [self.forget_contiute_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.top.mas_equalTo(self.forget_detail_lab.mas_bottom).offset(40);
        make.width.offset(240);
        make.height.offset(50);
    }];
    NSString *emailStr = [[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_EmailName];
    self.forget_email_tf.text = emailStr;
}


- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event
{
    [super touchesBegan:touches withEvent:event];
    [self.view endEditing:YES];
}
@end

@interface NeighborsSimpleCuteProfileHeaderViewCell : UITableViewCell

@property (nonatomic,strong)UIImageView *headeImage;

@end

@implementation NeighborsSimpleCuteProfileHeaderViewCell

- (UIImageView *)headeImage
{
    if (!_headeImage) {
        _headeImage = [[UIImageView alloc]init];
        _headeImage.image = [UIImage imageNamed:TUIKitResource(@"test")];
        _headeImage.layer.cornerRadius = 60.0f;
        _headeImage.layer.masksToBounds = YES;
        _headeImage.layer.borderColor = NSC_BGThemColor2.CGColor;
        _headeImage.layer.borderWidth = 3.0f;
        _headeImage.contentMode  =  UIViewContentModeScaleAspectFill;
    }
    return _headeImage;
}
- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier
{
    if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]) {
        self.backgroundColor = [UIColor clearColor];
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self.contentView addSubview:self.headeImage];
    [self.headeImage mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.contentView);
        make.width.height.offset(120);
    }];
}

@end

@interface NeighborsSimpleCuteProfileContentViewCell : UITableViewCell

@property (nonatomic,strong)UIView *bg_View;

@property (nonatomic,strong)UIView *userNameView;

@property (nonatomic,strong)UILabel *userNameLab;

@property (nonatomic,strong)UILabel *userNameConLab;

@property (nonatomic,strong)UIView *userLineView;

@property (nonatomic,strong)UIImageView *userNameJt;

@property (nonatomic,strong)UIView *genderView;

@property (nonatomic,strong)UILabel *genderLab;

@property (nonatomic,strong)UILabel *genderConLab;

@property (nonatomic,strong)UIView *genderLineView;

@property (nonatomic,strong)UIImageView *genderJt;

@property (nonatomic,strong)UIView *ageView;

@property (nonatomic,strong)UILabel *ageLab;

@property (nonatomic,strong)UILabel *ageConLab;

@property (nonatomic,strong)UIView *ageLineView;

@property (nonatomic,strong)UIImageView *ageJt;

@property (nonatomic,copy)void(^NeighborsSimpleCuteProfileContentViewCellBlock)(int tag);

@end

@implementation NeighborsSimpleCuteProfileContentViewCell

- (UIView *)bg_View
{
    if (!_bg_View) {
        _bg_View = [[UIView alloc]init];
        _bg_View.backgroundColor = RGB(40, 40, 40);
        _bg_View.layer.cornerRadius = 8.0f;
        _bg_View.layer.masksToBounds = YES;
    }
    return _bg_View;
}
- (UIView *)userNameView
{
    if (!_userNameView) {
        _userNameView = [[UIView alloc]init];
        _userNameView.backgroundColor = [UIColor clearColor];
        _userNameView.userInteractionEnabled = YES;
        _userNameView.tag = 1001;
        UITapGestureRecognizer *tapClickGesture = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(actinonClickChange:)];
        [_userNameView addGestureRecognizer:tapClickGesture];
    }
    return _userNameView;
}
-(void)actinonClickChange:(UITapGestureRecognizer *)gesture{
    int tag = (int) gesture.view.tag - 1000;
    if (self.NeighborsSimpleCuteProfileContentViewCellBlock) {
        self.NeighborsSimpleCuteProfileContentViewCellBlock(tag);
    }
}
- (UILabel *)userNameLab
{
    if (!_userNameLab) {
        _userNameLab = [[UILabel alloc]init];
        _userNameLab.text = @"Username";
        _userNameLab.textColor =  RGB(235, 142, 63);
        _userNameLab.font  = [UIFont systemFontOfSize:16];
        _userNameLab.textAlignment = NSTextAlignmentLeft;
    }
    return _userNameLab;
}

- (UILabel *)userNameConLab
{
    if (!_userNameConLab) {
        _userNameConLab = [[UILabel alloc]init];
        _userNameConLab.text = @"Username";
        _userNameConLab.textColor =  [UIColor whiteColor];
        _userNameConLab.font  = [UIFont systemFontOfSize:16];
        _userNameConLab.textAlignment = NSTextAlignmentRight;
    }
    return _userNameConLab;
}
- (UIView *)userLineView
{
    if (!_userLineView) {
        _userLineView = [[UIView alloc]init];
        _userLineView.backgroundColor = RGB(30, 30, 30);
    }
    return _userLineView;
}

- (UIImageView *)userNameJt
{
    if (!_userNameJt) {
        _userNameJt = [[UIImageView alloc]init];
        _userNameJt.image = [UIImage imageNamed:TUIKitResource(@"a_setting_jt")];
    }
    return _userNameJt;
}

- (UIView *)genderView
{
    if (!_genderView) {
        _genderView = [[UIView alloc]init];
        _genderView.backgroundColor = [UIColor clearColor];
        _genderView.userInteractionEnabled = YES;
        _genderView.tag = 1002;
        UITapGestureRecognizer *tapClickGesture = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(actinonClickChange:)];
        [_genderView addGestureRecognizer:tapClickGesture];
    }
    return _genderView;
}

- (UILabel *)genderLab
{
    if (!_genderLab) {
        _genderLab = [[UILabel alloc]init];
        _genderLab.text = @"Gender";
        _genderLab.textColor =  RGB(235, 142, 63);
        _genderLab.font  = [UIFont systemFontOfSize:16];
        _genderLab.textAlignment = NSTextAlignmentLeft;
    }
    return _genderLab;
}

- (UILabel *)genderConLab
{
    if (!_genderConLab) {
        _genderConLab = [[UILabel alloc]init];
        _genderConLab.text = @"Gender";
        _genderConLab.textColor =  [UIColor whiteColor];
        _genderConLab.font  = [UIFont systemFontOfSize:16];
        _genderConLab.textAlignment = NSTextAlignmentRight;
    }
    return _genderConLab;
}

- (UIImageView *)genderJt
{
    if (!_genderJt) {
        _genderJt = [[UIImageView alloc]init];
        _genderJt.image = [UIImage imageNamed:TUIKitResource(@"a_setting_jt")];
    }
    return _genderJt;
}

- (UIView *)genderLineView
{
    if (!_genderLineView) {
        _genderLineView = [[UIView alloc]init];
        _genderLineView.backgroundColor = RGB(30, 30, 30);
    }
    return _genderLineView;
}

- (UIView *)ageView
{
    if (!_ageView) {
        _ageView = [[UIView alloc]init];
        _ageView.backgroundColor = [UIColor clearColor];
        _ageView.userInteractionEnabled = YES;
        _ageView.tag = 1003;
        UITapGestureRecognizer *tapClickGesture = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(actinonClickChange:)];
        [_ageView addGestureRecognizer:tapClickGesture];
        
    }
    return _ageView;
}

- (UILabel *)ageLab
{
    if (!_ageLab) {
        _ageLab = [[UILabel alloc]init];
        _ageLab.text = @"Age";
        _ageLab.textColor =  RGB(235, 142, 63);
        _ageLab.font  = [UIFont systemFontOfSize:16];
        _ageLab.textAlignment = NSTextAlignmentLeft;
    }
    return _ageLab;
}

- (UILabel *)ageConLab
{
    if (!_ageConLab) {
        _ageConLab = [[UILabel alloc]init];
        _ageConLab.text = @"Age";
        _ageConLab.textColor =  [UIColor whiteColor];
        _ageConLab.font  = [UIFont systemFontOfSize:16];
        _ageConLab.textAlignment = NSTextAlignmentRight;
    }
    return _ageConLab;
}

- (UIImageView *)ageJt
{
    if (!_ageJt) {
        _ageJt = [[UIImageView alloc]init];
        _ageJt.image = [UIImage imageNamed:TUIKitResource(@"a_setting_jt")];
    }
    return _ageJt;
}

- (UIView *)ageLineView
{
    if (!_ageLineView) {
        _ageLineView = [[UIView alloc]init];
        _ageLineView.backgroundColor = RGB(30, 30, 30);
    }
    return _ageLineView;
}


- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier

{
    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
    if (self) {
        self.backgroundColor = [UIColor clearColor];
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self.contentView addSubview:self.bg_View];
    [self.bg_View mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.right.offset(-20);
        make.top.offset(10);
        make.bottom.offset(-10);
    }];
    CGFloat height = 240 / 3;
    [self.bg_View addSubview:self.userNameView];
    [self.userNameView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.top.right.offset(0);
        make.height.offset(height);
        make.width.offset(80);
    }];
    [self.userNameView addSubview:self.userNameLab];
    [self.userNameLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.userNameView);
        make.left.offset(15);
    }];
    [self.userNameView addSubview:self.userNameJt];
    [self.userNameJt mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.userNameView);
        make.right.offset(-15);
        make.width.offset(7);
        make.height.offset(13);
    }];
    [self.userNameView addSubview:self.userNameConLab];
    [self.userNameConLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.userNameView);
        make.left.mas_equalTo(self.userNameLab.mas_right).offset(10);
        make.right.mas_equalTo(self.userNameJt.mas_left).offset(-10);
    }];
    [self.userNameView addSubview:self.userLineView];
    [self.userLineView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.bottom.offset(0);
        make.left.offset(10);
        make.right.offset(-10);
        make.height.offset(1);
    }];
    [self.bg_View addSubview:self.genderView];
    [self.genderView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.offset(0);
        make.top.mas_equalTo(self.userNameView.mas_bottom).offset(0);
        make.height.offset(height);
    }];
    
    [self.genderView addSubview:self.genderLab];
    [self.genderLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.genderView);
        make.left.offset(15);
    }];
    [self.genderView addSubview:self.genderJt];
    [self.genderJt mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.genderView);
        make.right.offset(-15);
        make.width.offset(7);
        make.height.offset(13);
    }];
    [self.genderView addSubview:self.genderConLab];
    [self.genderConLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.genderView);
        make.left.mas_equalTo(self.genderLab.mas_right).offset(10);
        make.right.mas_equalTo(self.genderJt.mas_left).offset(-10);
    }];
    [self.genderView addSubview:self.genderLineView];
    [self.genderLineView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.bottom.offset(0);
        make.left.offset(10);
        make.right.offset(-10);
        make.height.offset(1);
    }];
    
    [self.bg_View addSubview:self.ageView];
    [self.ageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.bottom.right.offset(0);
        make.height.offset(height);
    }];
    
    [self.ageView addSubview:self.ageLab];
    [self.ageLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.ageView);
        make.left.offset(15);
    }];
    [self.ageView addSubview:self.ageJt];
    [self.ageJt mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.ageView);
        make.right.offset(-15);
        make.width.offset(7);
        make.height.offset(13);
    }];
    [self.ageView addSubview:self.ageConLab];
    [self.ageConLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.ageView);
        make.left.mas_equalTo(self.ageLab.mas_right).offset(10);
        make.right.mas_equalTo(self.ageJt.mas_left).offset(-10);
    }];
//    [self.ageView addSubview:self.ageLineView];
//    [self.ageLineView mas_makeConstraints:^(MASConstraintMaker *make) {
//        make.bottom.offset(0);
//        make.left.offset(10);
//        make.right.offset(-10);
//        make.height.offset(1);
//    }];
}
@end

#define kRecordAudioFile @"myRecord2.caf"
@interface NeighborsSimpleCuteProfileVoiceViewCell : UITableViewCell <AVAudioRecorderDelegate>

@property (nonatomic,strong)UIView *bgView;

@property (nonatomic,strong)UIButton *voiceBtn;

@property (nonatomic,strong)UIButton *voiceBtn2;

@property (nonatomic,strong)UILabel *topLab;

@property (nonatomic,strong)UIButton *uploadBtn;

@property (nonatomic,strong)UILabel *timeLab;

@property (nonatomic,strong)UIButton *closeBtn;

@property (nonatomic,strong) AVAudioRecorder *audioRecorder;//音频录音机
@property (nonatomic,strong) NSTimer *timer;//录音声波监控（注意这里暂时不对播放进行监控）
@property (nonatomic,assign)NSInteger cutDown;
@property (nonatomic,assign)BOOL isRecorder;

@end


@implementation NeighborsSimpleCuteProfileVoiceViewCell

-(NSTimer *)timer{
    if (!_timer) {
        _timer=[NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(updateProgress) userInfo:nil repeats:true];
    }
    return _timer;
}
-(void)updateProgress
{
    self.cutDown++;
    self.timeLab.hidden = NO;
    self.timeLab.text = [NSString stringWithFormat:@"%ldS",(long)self.cutDown];
}
-(AVAudioRecorder *)audioRecorder{
    if (!_audioRecorder) {
        //创建录音文件保存路径
        NSURL *url=[self getSavePath];
        //创建录音格式设置
        NSDictionary *setting=[self getAudioSetting];
        //创建录音机
        NSError *error=nil;
        _audioRecorder=[[AVAudioRecorder alloc]initWithURL:url settings:setting error:&error];
        _audioRecorder.delegate=self;
        _audioRecorder.meteringEnabled=YES;//如果要监控声波则必须设置为YES
        if (error) {
            NSLog(@"创建录音机对象时发生错误，错误信息：%@",error.localizedDescription);
            return nil;
        }
    }
    return _audioRecorder;
}
/**
 *  取得录音文件设置
 *
 *  @return 录音设置
 */
-(NSDictionary *)getAudioSetting{
    NSMutableDictionary *dicM=[NSMutableDictionary dictionary];
    //设置录音格式
    [dicM setObject:@(kAudioFormatLinearPCM) forKey:AVFormatIDKey];
    //设置录音采样率，8000是电话采样率，对于一般录音已经够了
    [dicM setObject:@(8000) forKey:AVSampleRateKey];
    //设置通道,这里采用单声道
    [dicM setObject:@(1) forKey:AVNumberOfChannelsKey];
    //每个采样点位数,分为8、16、24、32
    [dicM setObject:@(8) forKey:AVLinearPCMBitDepthKey];
    //是否使用浮点数采样
    [dicM setObject:@(YES) forKey:AVLinearPCMIsFloatKey];
    //....其他设置等
    return dicM;
}
/**
 *  取得录音文件保存路径
 *
 *  @return 录音文件路径
 */
-(NSURL *)getSavePath{
    NSString *urlStr=[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];
    urlStr=[urlStr stringByAppendingPathComponent:kRecordAudioFile];
    NSLog(@"file path:%@",urlStr);
    NSURL *url=[NSURL fileURLWithPath:urlStr];
    return url;
}

- (UILabel *)topLab
{
    if (!_topLab) {
        _topLab = [[UILabel alloc]init];
        _topLab.text = @"Headline by Voice";
        _topLab.textColor = [UIColor whiteColor];
        _topLab.font = [UIFont systemFontOfSize:18];
        _topLab.textAlignment = NSTextAlignmentCenter;
    }
    return _topLab;
}
- (UIView *)bgView
{
    if (!_bgView) {
        _bgView = [[UIView alloc]init];
        _bgView.backgroundColor = RGB(30, 30, 30);
        _bgView.layer.cornerRadius = 8.0f;
        _bgView.layer.masksToBounds = YES;
        _bgView.userInteractionEnabled = YES;
    }
    return _bgView;
}

- (UIButton *)closeBtn
{
    if (!_closeBtn) {
        _closeBtn = [[UIButton alloc]init];
        [_closeBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_vocie_del")] forState:UIControlStateNormal];
        [_closeBtn addTarget:self action:@selector(actionCloseBtn:) forControlEvents:UIControlEventTouchUpInside];
        _closeBtn.hidden = YES;
    }
    return _closeBtn;
}

-(void)actionCloseBtn:(UIButton *)btn
{
    NSLog(@"actionCloseBtnactionCloseBtnactionCloseBtn");
    self.cutDown = 0;
    self.timeLab.hidden = YES;
    self.closeBtn.hidden = YES;
    self.timer.fireDate=[NSDate distantFuture];
    [self.voiceBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_send_voice")] forState:UIControlStateNormal];
    [self.audioRecorder pause];
}

- (UILabel *)timeLab
{
    if (!_timeLab) {
        _timeLab = [[UILabel alloc]init];
        _timeLab.text = @"1s";
        _timeLab.textColor = [UIColor whiteColor];
        _timeLab.textAlignment = NSTextAlignmentCenter;
        _timeLab.font = [UIFont systemFontOfSize:16];
        _timeLab.hidden = YES;
    }
    return _timeLab;
}
- (UIButton *)voiceBtn2
{
    if (!_voiceBtn2) {
        _voiceBtn2 = [[UIButton alloc]init];
        _voiceBtn2.backgroundColor = [UIColor redColor];
        [_voiceBtn addTarget:self action:@selector(actioPuush) forControlEvents:UIControlEventTouchUpInside];
    }
    return _voiceBtn2;
}

-(void)actioPuush
{
    NSLog(@"actioPuushactioPuushactioPuushactioPuush");
}

- (UIButton *)voiceBtn
{
    if (!_voiceBtn) {
        _voiceBtn = [[UIButton alloc]init];
        [_voiceBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_send_voice")] forState:UIControlStateNormal];
        _voiceBtn.layer.cornerRadius = 127/2;
        _voiceBtn.layer.masksToBounds = YES;
        [_voiceBtn addTarget:self action:@selector(actionSendVoice111:) forControlEvents:UIControlEventTouchUpInside];
        [_voiceBtn gradientButtonWithSize:CGSizeMake(60, 60) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _voiceBtn;
}
-(void)actionSendVoice111:(UIButton *)sender{
    NSLog(@"111111");
    sender.selected = !sender.selected;
    if (sender.selected) {
        [self.voiceBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_stop")] forState:UIControlStateNormal];
        [self.audioRecorder record];//首次使用应用时如果调用record方法会询问用户是否允许使用麦克风
        self.timer.fireDate=[NSDate distantPast];
        self.closeBtn.hidden = YES;
    }else{
        [self.voiceBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_voice_play")] forState:UIControlStateNormal];
        [self.audioRecorder pause];
        self.timer.fireDate=[NSDate distantFuture];
        self.closeBtn.hidden = NO;
        self.isRecorder = YES;
    }
}

- (UIButton *)uploadBtn
{
    if (!_uploadBtn) {
        _uploadBtn = [[UIButton alloc]init];
        [_uploadBtn setTitle:@"Upload" forState:UIControlStateNormal];
        [_uploadBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _uploadBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_uploadBtn addTarget:self action:@selector(actionUploadBtn:) forControlEvents:UIControlEventTouchUpInside];
        _uploadBtn.layer.cornerRadius = 25.0f;
        _uploadBtn.layer.masksToBounds = YES;
        [_uploadBtn gradientButtonWithSize:CGSizeMake(240, 50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _uploadBtn;
}
-(void)actionUploadBtn:(UIButton *)btn
{
    NSLog(@"actionUploadBtnactionUploadBtn");
    if (self.cutDown <= 0) {
         [SVProgressHUD showInfoWithStatus:@"Please record audio first"];
         return;
     }
     if (!self.isRecorder) {
         [SVProgressHUD showInfoWithStatus:@"Save the recording before you can send it"];
     }
     [SVProgressHUD show];
     dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
         dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
             dispatch_async(dispatch_get_main_queue(), ^{
                 [SVProgressHUD dismiss];
                 [SVProgressHUD showInfoWithStatus:@"Send successfully"];
                 self.cutDown = 0;
                 self.timeLab.hidden = YES;
                 self.closeBtn.hidden = YES;
                 self.timer.fireDate=[NSDate distantFuture];
                 [self.voiceBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_send_voice")] forState:UIControlStateNormal];
                 [self.audioRecorder pause];
         });
     });
    
    
}
- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier
{
    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
    if (self) {
        self.backgroundColor = [UIColor clearColor];
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self.contentView addSubview:self.bgView];
    [self.bgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.right.offset(-20);
        make.top.offset(10);
        make.bottom.offset(-10);
    }];
    [self.bgView addSubview:self.voiceBtn];
    [self.voiceBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.bgView);
        make.width.height.offset(127);
    }];
    [self.bgView addSubview:self.topLab];
    [self.topLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bgView);
        make.bottom.mas_equalTo(self.voiceBtn.mas_top).offset(-30);
    }];
    [self.bgView addSubview:self.uploadBtn];
    [self.uploadBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bgView);
        make.bottom.offset(-20);
    }];
    [self.bgView addSubview:self.timeLab];
    [self.timeLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bgView);
        make.bottom.mas_equalTo(self.voiceBtn.mas_bottom).offset(-10);
    }];
    [self.bgView addSubview:self.closeBtn];
    [self.closeBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.mas_equalTo(self.voiceBtn.mas_top).offset(0);
        make.left.mas_equalTo(self.voiceBtn.mas_right).offset(-20);
        make.width.height.offset(30);
    }];
}
@end

@interface NeighborsSimpleCuteSettingProfileController ()
<UITableViewDelegate,UITableViewDataSource>
@property (nonatomic,strong)UITableView *profileTableView;
@property (nonatomic,strong)NeighborsSimpleCuteProfileContentViewCell *contentCell;
@property (nonatomic,strong)NeighborsSimpleCuteProfileHeaderViewCell *headerCell;
@property (nonatomic,strong)UITextField *userNametf;
@property (nonatomic,strong)NSMutableArray *genderListArr;
@property (nonatomic,strong)NSMutableArray *ageListArr;
@end

@implementation NeighborsSimpleCuteSettingProfileController

- (NSMutableArray *)genderListArr
{
    if (!_genderListArr) {
        _genderListArr = [NSMutableArray arrayWithObjects:@"Female",@"Male", nil];
    }
    return _genderListArr;
}

- (NSMutableArray *)ageListArr
{
    if (!_ageListArr) {
        _ageListArr = [NSMutableArray array];
        for (int i = 18;i< 100;i++) {
            NSString *ageStr = [NSString stringWithFormat:@"%d",i];
            NSLog(@"ageStr:%@",ageStr);
            [_ageListArr addObject:ageStr];
        }
    }
    return _ageListArr;
}

- (UITableView *)profileTableView
{   if (!_profileTableView) {
        _profileTableView = [[UITableView alloc]initWithFrame:CGRectZero style:UITableViewStylePlain];
        _profileTableView.backgroundColor = [UIColor clearColor];
        _profileTableView.showsVerticalScrollIndicator = NO;
        _profileTableView.showsHorizontalScrollIndicator = NO;
        _profileTableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        _profileTableView.delegate = self;
        _profileTableView.dataSource = self;
        [_profileTableView registerClass:[NeighborsSimpleCuteProfileHeaderViewCell class] forCellReuseIdentifier:@"NeighborsSimpleCuteProfileHeaderViewCell"];
        [_profileTableView registerClass:[NeighborsSimpleCuteProfileContentViewCell class] forCellReuseIdentifier:@"NeighborsSimpleCuteProfileContentViewCell"];
        [_profileTableView registerClass:[NeighborsSimpleCuteProfileVoiceViewCell class] forCellReuseIdentifier:@"NeighborsSimpleCuteProfileVoiceViewCell"];
    }
    return _profileTableView;
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    self.view.backgroundColor = NSC_MainThemColor;
    [self NeighborsSimpleCuteSetLeftButton:[UIImage imageNamed:@""]];
    [self NeighborsSimpleCuteSetRightButton:[UIImage imageNamed:TUIKitResource(@"n_setting_back")]];
    [self.view addSubview:self.profileTableView];
    [self.profileTableView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
}

- (void)onNeighborsSimpleCuteRightBackBtn:(UIButton *)btn
{
    [self.navigationController popViewControllerAnimated:YES];
}
#pragma mark --
-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 3;
}
-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return 1;
}
-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.section == 0) {
        return 200;
    }else if(indexPath.section == 1){
        return 340;
    }else{
        return 260;
    }
}
-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.section == 0) {
        self.headerCell = [tableView dequeueReusableCellWithIdentifier:@"NeighborsSimpleCuteProfileHeaderViewCell" forIndexPath:indexPath];
        NSString *imageBaseUrl = [NSString stringWithFormat:@"%@/",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th];
        NSString *picurl = [NSString stringWithFormat:@"%@%@",imageBaseUrl,[NeighborsSimpleCuteUserModel getUserInfo].userInfo.tempStr7th];
        NSLog(@"picurl44323233:%@",picurl);
        [self.headerCell.headeImage sd_setImageWithURL:[NSURL URLWithString:picurl] placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        self.headerCell.selectionStyle = UITableViewCellSelectionStyleNone;
        return self.headerCell;
    }else if(indexPath.section == 1){
        
        NeighborsSimpleCuteProfileVoiceViewCell *voiceCell = [tableView dequeueReusableCellWithIdentifier:@"NeighborsSimpleCuteProfileVoiceViewCell" forIndexPath:indexPath];
        voiceCell.selectionStyle = UITableViewCellSelectionStyleNone;
        return voiceCell;
    }else{
        self.contentCell = [tableView dequeueReusableCellWithIdentifier:@"NeighborsSimpleCuteProfileContentViewCell" forIndexPath:indexPath];
        NSString *nameStr = [NeighborsSimpleCuteUserModel getUserInfo].userInfo.nickName;
        // [[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_EmailUser];
        NSString *genderStr = [[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_EmailGender];
        NSString *ageStr = [[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_EmailAge];
        self.contentCell.userNameConLab.text = nameStr;
        self.contentCell.genderConLab.text = genderStr;
        self.contentCell.ageConLab.text    = ageStr;
        [self.contentCell setNeighborsSimpleCuteProfileContentViewCellBlock:^(int tag) {
            NSLog(@"tag:%d",tag);
            if (tag == 1) {
                [self actionUpdateName];
            }else if(tag == 2){
                [self actionSelectGender];
            }else if(tag == 3){
                [self actionSelectAge];
            }
        }];
        self.contentCell.selectionStyle = UITableViewCellSelectionStyleNone;
        return self.contentCell;
    }
}
/// updatename
-(void)actionUpdateName
{

    NeighborsSimpleCuteChnageNameView *nameView = [[NeighborsSimpleCuteChnageNameView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
    [nameView setNeighborsSimpleCuteChnageNameViewBlcok:^(NSString * _Nonnull nameStr) {
        [SVProgressHUD show];
                 dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
                     dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
                         dispatch_async(dispatch_get_main_queue(), ^{
                             [SVProgressHUD dismiss];
                             self.contentCell.userNameConLab.text = nameStr;
                             NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
                             model.userInfo.nickName = nameStr;
                             [NeighborsSimpleCuteUserModel save:model];
                             //[[NSUserDefaults standardUserDefaults]setValue:nameStr forKey:NeighborsSimple_EmailUser];
                             //[[NSUserDefaults standardUserDefaults]synchronize];
                     });
            });
    }];
    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    NSCParameterAssert(window);
    [window addSubview:nameView];
//    NSString *nameStr = [[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_EmailUser];
//    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Tip" message:@"please enter user name" preferredStyle:UIAlertControllerStyleAlert];
//    //增加取消按钮；
//    [alertController addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleDefault handler:nil]];
//     //增加确定按钮；
//     [alertController addAction:[UIAlertAction actionWithTitle:@"Confirm" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
//       UITextField *userNameTextField = alertController.textFields.firstObject;
//         if (IS_EMPTY(userNameTextField.text)) {
//             [SVProgressHUD showInfoWithStatus:@"please enter user name"];
//             return;
//         }
//         [SVProgressHUD show];
//         dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
//             dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
//                 dispatch_async(dispatch_get_main_queue(), ^{
//                     [SVProgressHUD dismiss];
//                     self.contentCell.userNameConLab.text = userNameTextField.text;
//                     [[NSUserDefaults standardUserDefaults]setValue:userNameTextField.text forKey:NeighborsSimple_EmailUser];
//                     [[NSUserDefaults standardUserDefaults]synchronize];
//             });
//         });
//     }]];
//     //定义第一个输入框；
//     [alertController addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {
//        textField.placeholder = @"please enter user name";
//        textField.text = nameStr;
//     }];
//     [self presentViewController:alertController animated:true completion:nil];
}

/// select gender
-(void)actionSelectGender
{
    [BRStringPickerView showStringPickerWithTitle:@"Gender" dataSource:self.genderListArr defaultSelValue:@"Female" isAutoSelect:NO resultBlock:^(id selectValue) {
        [SVProgressHUD show];
        dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
                dispatch_async(dispatch_get_main_queue(), ^{
                    [SVProgressHUD dismiss];
                    NSString *genderStr = (NSString *)selectValue;
                    self.contentCell.genderConLab.text = genderStr;
                    [[NSUserDefaults standardUserDefaults]setValue:genderStr forKey:NeighborsSimple_EmailGender];
                    [[NSUserDefaults standardUserDefaults]synchronize];
            });
        });
      }];
}
/// select age
-(void)actionSelectAge
{
    [BRStringPickerView showStringPickerWithTitle:@"Age" dataSource:self.ageListArr defaultSelValue:@"18" isAutoSelect:NO resultBlock:^(id selectValue) {
        [SVProgressHUD show];
        dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
                dispatch_async(dispatch_get_main_queue(), ^{
                    [SVProgressHUD dismiss];
                    NSString *ageStr = (NSString *)selectValue;
                    self.contentCell.ageConLab.text = ageStr;
                    [[NSUserDefaults standardUserDefaults]setValue:ageStr forKey:NeighborsSimple_EmailAge];
                    [[NSUserDefaults standardUserDefaults]synchronize];
            });
        });
    }];
}
-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    if (indexPath.section == 0) {
        [self.view endEditing:YES];
        TZImagePickerController *imagePickerVc = [[TZImagePickerController alloc] initWithMaxImagesCount:1 columnNumber:4 delegate:self pushPhotoPickerVc:YES];
        [imagePickerVc setAllowPreview:NO];
        [imagePickerVc setNaviBgColor:[UIColor blackColor]];
        [imagePickerVc setAllowPickingVideo:NO];
        [imagePickerVc setIsSelectOriginalPhoto:NO];
        imagePickerVc.allowTakePicture = YES;
        [imagePickerVc setDidFinishPickingPhotosHandle:^(NSArray<UIImage *> *photos, NSArray *assets, BOOL isSelectOriginalPhoto) {
            self.headerCell.headeImage.image = photos[0];
            self.headerCell.headeImage.layer.borderColor = NSC_BGThemColor2.CGColor;
            self.headerCell.headeImage.layer.borderWidth = 3.0f;
            [self saveImage:photos[0]];
        }];
        imagePickerVc.modalPresentationStyle = UIModalPresentationFullScreen;
        [self presentViewController:imagePickerVc animated:YES completion:nil];
    }
}
- (void)saveImage:(UIImage *)image {
   NSArray *paths =NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);
   NSString *filePath = [[paths objectAtIndex:0]stringByAppendingPathComponent:
                         [NSString stringWithFormat:@"n_add_sened_img.png"]];  // 保存文件的名称
   BOOL result =[UIImagePNGRepresentation(image)writeToFile:filePath   atomically:YES]; // 保存成功会返回YES
   if (result == YES) {
       NSLog(@"Save Success");
   }
}
@end

@interface NeighborsSimpleCuteSettingFeedBackController ()

@property (nonatomic,strong)UILabel *contentLab;

@property (nonatomic,strong)IQTextView *inputContentView;

@property (nonatomic,strong)UILabel *screntshotsLab;

@property (nonatomic,strong)UIView *screntshotsView;

@property (nonatomic,strong)UIView *firstView;

@property (nonatomic,strong)UIButton *firstBtn;

@property (nonatomic,strong)UIImageView *firstImg;

@property (nonatomic,strong)UIView *secondView;

@property (nonatomic,strong)UIButton *secondBtn;

@property (nonatomic,strong)UIImageView *secondImg;

@property (nonatomic,strong)UIView *thirdView;

@property (nonatomic,strong)UIButton *thirdBtn;

@property (nonatomic,strong)UIImageView *thirdImg;

@property (nonatomic,strong)UIButton *submitBtn;

@property (nonatomic,assign)BOOL isFirst;

@property (nonatomic,assign)BOOL isSecond;

@property (nonatomic,assign)BOOL isThird;

@end

@implementation NeighborsSimpleCuteSettingFeedBackController

- (UILabel *)contentLab
{
    if (!_contentLab) {
        _contentLab  = [[UILabel alloc]init];
        _contentLab.textColor = RGB(237, 151, 64);
        _contentLab.text = @"Content";
        _contentLab.textAlignment = NSTextAlignmentCenter;
    }
    return _contentLab;
}
- (IQTextView *)inputContentView
{
    if (!_inputContentView) {
        _inputContentView = [[IQTextView alloc]init];
        _inputContentView.backgroundColor = RGB(60, 60, 60);
        _inputContentView.placeholder = @"Describe your problem...";
        _inputContentView.placeholderTextColor = RGB(153, 153, 153);
        _inputContentView.textColor = [UIColor whiteColor];
        _inputContentView.font = [UIFont systemFontOfSize:15];
        _inputContentView.textAlignment = NSTextAlignmentLeft;
        _inputContentView.layer.cornerRadius  = 10.0f;
        _inputContentView.layer.masksToBounds = YES;
    }
    return _inputContentView;
}
- (UILabel *)screntshotsLab
{
    if (!_screntshotsLab) {
        _screntshotsLab  = [[UILabel alloc]init];
        _screntshotsLab.textColor = RGB(237, 151, 64);
        _screntshotsLab.text = @"Screenshots";
        _screntshotsLab.textAlignment = NSTextAlignmentCenter;
    }
    return _screntshotsLab;
}
- (UIView *)screntshotsView
{
    if (!_screntshotsView) {
        _screntshotsView = [[UIView alloc]init];
        _screntshotsView.backgroundColor = RGB(60, 60, 60);
        _screntshotsView.layer.cornerRadius = 10.0f;
        _screntshotsView.layer.masksToBounds = YES;
    }
    return _screntshotsView;
}

- (UIView *)firstView
{
    if (!_firstView) {
        _firstView = [[UIView alloc]init];
        _firstView.backgroundColor = [UIColor clearColor];
        _firstView.layer.cornerRadius = 5.0f;
        _firstView.layer.masksToBounds = YES;
    }
    return _firstView;
}

- (UIButton *)firstBtn
{
    if (!_firstBtn) {
        _firstBtn = [[UIButton alloc]init];
        _firstBtn.tag = 1001;
        [_firstBtn setTitle:@"+" forState:UIControlStateNormal];
        [_firstBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _firstBtn.titleLabel.font = [UIFont systemFontOfSize:30];
        [_firstBtn addTarget:self action:@selector(actionFirstUplodaimage:) forControlEvents:UIControlEventTouchUpInside];
        [_firstBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 80)/3,120) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _firstBtn;
}
- (UIImageView *)firstImg
{
    if (!_firstImg) {
        _firstImg = [[UIImageView alloc]init];
        _firstImg.contentMode =  UIViewContentModeScaleAspectFill;
        _firstImg.layer.cornerRadius = 5.0f;
        _firstImg.layer.masksToBounds = YES;
    }
    return _firstImg;
}

- (UIView *)secondView
{
    if (!_secondView) {
        _secondView = [[UIView alloc]init];
        _secondView.backgroundColor = [UIColor clearColor];
        _secondView.layer.cornerRadius = 5.0f;
        _secondView.layer.masksToBounds = YES;
    }
    return _secondView;
}

- (UIButton *)secondBtn
{
    if (!_secondBtn) {
        _secondBtn = [[UIButton alloc]init];
        _secondBtn.tag = 1002;
        [_secondBtn setTitle:@"+" forState:UIControlStateNormal];
        [_secondBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _secondBtn.titleLabel.font = [UIFont systemFontOfSize:30];
        [_secondBtn addTarget:self action:@selector(actionFirstUplodaimage:) forControlEvents:UIControlEventTouchUpInside];
        [_secondBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 80)/3,120) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _secondBtn;
}

- (UIImageView *)secondImg
{
    if (!_secondImg) {
        _secondImg = [[UIImageView alloc]init];
        _secondImg.contentMode =  UIViewContentModeScaleAspectFill;
        _secondImg.layer.cornerRadius = 5.0f;
        _secondImg.layer.masksToBounds = YES;
    }
    return _secondImg;
}
- (UIView *)thirdView
{
    if (!_thirdView) {
        _thirdView = [[UIView alloc]init];
        _thirdView.backgroundColor = [UIColor clearColor];
        _thirdView.layer.cornerRadius = 5.0f;
        _thirdView.layer.masksToBounds = YES;
    }
    return _thirdView;
}

- (UIButton *)thirdBtn
{
    if (!_thirdBtn) {
        _thirdBtn = [[UIButton alloc]init];
        _thirdBtn.tag = 1003;
        [_thirdBtn setTitle:@"+" forState:UIControlStateNormal];
        [_thirdBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _thirdBtn.titleLabel.font = [UIFont systemFontOfSize:30];
        [_thirdBtn addTarget:self action:@selector(actionFirstUplodaimage:) forControlEvents:UIControlEventTouchUpInside];
        [_thirdBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 80)/3,120) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _thirdBtn;
}

- (UIImageView *)thirdImg
{
    if (!_thirdImg) {
        _thirdImg = [[UIImageView alloc]init];
        _thirdImg.contentMode =  UIViewContentModeScaleAspectFill;
        _thirdImg.layer.cornerRadius = 5.0f;
        _thirdImg.layer.masksToBounds = YES;
    }
    return _thirdImg;
}

- (UIButton *)submitBtn
{
    if (!_submitBtn) {
        _submitBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_submitBtn setTitle:@"Submit" forState:UIControlStateNormal];
        _submitBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_submitBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_submitBtn addTarget:self action:@selector(actionSubmitBtn:) forControlEvents:UIControlEventTouchUpInside];
        _submitBtn.layer.cornerRadius = 25.0f;
        _submitBtn.layer.masksToBounds = YES;
        [_submitBtn gradientButtonWithSize:CGSizeMake(240, 50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _submitBtn;
}

-(void)actionSubmitBtn:(UIButton *)btn
{
    if (IS_EMPTY(self.inputContentView.text)) {
        [SVProgressHUD showInfoWithStatus:@"Describe your problem..."];
        return;
    }
    if (self.isFirst == NO && self.isSecond == NO && self.isThird == NO) {
        [SVProgressHUD showInfoWithStatus:@"Please upload a picture"];
        return;
    }
    [SVProgressHUD show];
    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
            dispatch_async(dispatch_get_main_queue(), ^{
                [SVProgressHUD dismiss];
                [SVProgressHUD showInfoWithStatus:@"Submit successful"];
                if (self.isisMute == YES) {
                    [self.navigationController popToRootViewControllerAnimated:YES];
                }else{
                    [self.navigationController popViewControllerAnimated:YES];
                }
        });
    });
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"Feedback";
    [self NeighborsSimpleCuteSetLeftButton:[UIImage imageNamed:TUIKitResource(@"n_back")]];
    [self.view addSubview:self.contentLab];
    [self.contentLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.top.offset(30);
    }];
    [self.view addSubview:self.inputContentView];
    [self.inputContentView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.right.offset(-20);
        make.top.mas_equalTo(self.contentLab.mas_bottom).offset(20);
        make.height.offset(200);
    }];
    [self.view addSubview:self.screntshotsLab];
    [self.screntshotsLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.top.mas_equalTo(self.inputContentView.mas_bottom).offset(15);
    }];
    [self.view addSubview:self.screntshotsView];
    [self.screntshotsView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.right.offset(-20);
        make.top.mas_equalTo(self.screntshotsLab.mas_bottom).offset(20);
        make.height.offset(120);
    }];
    CGFloat scrent_width = (IPHONE_WIDTH - 80)/3;
    [self.screntshotsView addSubview:self.firstView];
    [self.firstView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(10);
        make.centerY.mas_equalTo(self.screntshotsView);
        make.height.offset(100);
        make.width.offset(scrent_width);
    }];
    
    [self.firstView addSubview:self.firstBtn];
    [self.firstBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self.firstView addSubview:self.firstImg];
    [self.firstImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    
    [self.screntshotsView addSubview:self.secondView];
    [self.secondView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_equalTo(self.firstView.mas_right).offset(10);
        make.centerY.mas_equalTo(self.screntshotsView);
        make.height.offset(100);
        make.width.offset(scrent_width);
    }];
    
    [self.secondView addSubview:self.secondBtn];
    [self.secondBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self.secondView addSubview:self.secondImg];
    [self.secondImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    
    [self.screntshotsView addSubview:self.thirdView];
    [self.thirdView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-10);
        make.centerY.mas_equalTo(self.screntshotsView);
        make.height.offset(100);
        make.width.offset(scrent_width);
    }];
    
    [self.thirdView addSubview:self.thirdBtn];
    [self.thirdBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self.thirdView addSubview:self.thirdImg];
    [self.thirdImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self.view addSubview:self.submitBtn];
    [self.submitBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.bottom.offset(-20);
        make.width.offset(240);
        make.height.offset(50);
    }];
    
}

-(void)onNeighborsSimpleCuteLeftBackBtn:(UIButton *)btn
{
    if (self.NeighborsSimpleCuteSettingFeedBackControllerBackBlock) {
        self.NeighborsSimpleCuteSettingFeedBackControllerBackBlock();
    }
    if (self.isisMute == YES) {
        [self.navigationController popToRootViewControllerAnimated:YES];
    }else{
        [self.navigationController popViewControllerAnimated:YES];
    }
}

-(void)actionSubmitBtn
{
    NSLog(@"actionSubmitBtnactionSubmitBtn");
   
}
-(void)actionFirstUplodaimage:(UIButton *)btn
{
    int tag = (int)btn.tag;
    NSLog(@"tag:%d",tag);
    [self.view endEditing:YES];
    TZImagePickerController *imagePickerVc = [[TZImagePickerController alloc] initWithMaxImagesCount:1 columnNumber:4 delegate:self pushPhotoPickerVc:YES];
    [imagePickerVc setAllowPreview:NO];
    [imagePickerVc setNaviBgColor:[UIColor blackColor]];
    [imagePickerVc setAllowPickingVideo:NO];
    [imagePickerVc setIsSelectOriginalPhoto:NO];
    imagePickerVc.allowTakePicture = YES;
    [imagePickerVc setDidFinishPickingPhotosHandle:^(NSArray<UIImage *> *photos, NSArray *assets, BOOL isSelectOriginalPhoto) {
        if (tag == 1001) {
            self.firstImg.image = photos[0];
            [self.firstBtn setTitle:@"" forState:UIControlStateNormal];
            self.isFirst = YES;
        }else if(tag == 1002){
            self.secondImg.image = photos[0];
            [self.secondBtn setTitle:@"" forState:UIControlStateNormal];
            self.isSecond = YES;
        }else if(tag == 1003){
            self.thirdImg.image = photos[0];
            [self.thirdBtn setTitle:@"" forState:UIControlStateNormal];
            self.isThird = YES;
        }
    }];
    imagePickerVc.modalPresentationStyle = UIModalPresentationFullScreen;
    [self presentViewController:imagePickerVc animated:YES completion:nil];
}
@end

@interface NeighborsSimpleCuteSettingAboutusController ()

@property (nonatomic,strong)UIView *serviceView;

@property (nonatomic,strong)UIView *privacyView;

@property (nonatomic,strong)UILabel *versionLab;

@end

@implementation NeighborsSimpleCuteSettingAboutusController

- (UIView *)serviceView
{
    if (!_serviceView) {
        _serviceView = [[UIView alloc]init];
        _serviceView.backgroundColor = RGB(60, 60, 60);
        _serviceView.layer.cornerRadius = 8.0f;
        _serviceView.layer.masksToBounds = YES;
        _serviceView.userInteractionEnabled = YES;
        UITapGestureRecognizer *serviceTap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(actionPushService)];
        [_serviceView addGestureRecognizer:serviceTap];
        
    }
    return _serviceView;
}

-(void)actionPushService
{
    NSLog(@"actionPushServiceactionPushServiceactionPushService");
    NeighborsSimpleCuteBaseWebController *agrementvc = [[NeighborsSimpleCuteBaseWebController  alloc]init];
    agrementvc.isShowHidden = YES;
    agrementvc.URLString = @"http://www.pokivoice.cn/terms.html";
    agrementvc.loadType = WKWebLoadTypeWebURLString;
    agrementvc.webTitle = @"Service Agreement";
    [self.navigationController pushViewController:agrementvc animated:YES];
}
- (UIView *)privacyView
{
    if (!_privacyView) {
        _privacyView = [[UIView alloc]init];
        _privacyView.backgroundColor = RGB(60, 60, 60);
        _privacyView.layer.cornerRadius = 8.0f;
        _privacyView.layer.masksToBounds = YES;
        _privacyView.userInteractionEnabled = YES;
        UITapGestureRecognizer *privacyTap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(actionPushPrivacy)];
        [_privacyView addGestureRecognizer:privacyTap];
    }
    return _privacyView;
}

-(void)actionPushPrivacy
{
    NSLog(@"actionPushPrivacyactionPushPrivacyactionPushPrivacyactionPushPrivacy");
    NeighborsSimpleCuteBaseWebController *agrementvc = [[NeighborsSimpleCuteBaseWebController  alloc]init];
    agrementvc.isShowHidden = YES;
    agrementvc.URLString = @"http://www.pokivoice.cn/privacy.html";
    agrementvc.webTitle = @"Privacy Policy";
    agrementvc.loadType = WKWebLoadTypeWebURLString;
    [self.navigationController pushViewController:agrementvc animated:YES];
}
- (UILabel *)versionLab
{
    if (!_versionLab) {
        _versionLab = [[UILabel alloc]init];
        _versionLab.text = @"Hooil Version 1.0.0";
        _versionLab.textColor = RGB(237, 151, 64);
        _versionLab.textAlignment = NSTextAlignmentCenter;
        _versionLab.font = [UIFont systemFontOfSize:16];
    }
    return _versionLab;
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"About us";
    [self.view addSubview:self.serviceView];
    [self.serviceView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.right.offset(-20);
        make.top.offset(30);
        make.height.offset(60);
    }];
    UILabel *serviceLab = [[UILabel alloc]init];
    serviceLab.text = @"Service Agreement";
    serviceLab.textColor = [UIColor whiteColor];
    serviceLab.font = [UIFont systemFontOfSize:16];
    serviceLab.textAlignment = NSTextAlignmentLeft;
    [self.serviceView addSubview:serviceLab];
    [serviceLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.serviceView);
        make.left.offset(20);
    }];
    UIImageView *jtImg = [[UIImageView alloc]init];
    jtImg.image = [UIImage imageNamed:TUIKitResource(@"a_setting_jt")];
    jtImg.contentMode = UIViewContentModeScaleAspectFit;
    [self.serviceView addSubview:jtImg];
    [jtImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.serviceView);
        make.right.offset(-20);
    }];
    
    [self.view addSubview:self.privacyView];
    [self.privacyView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.right.offset(-20);
        make.top.mas_equalTo(self.serviceView.mas_bottom).offset(15);
        make.height.offset(60);
    }];
    UILabel *serviceLab2 = [[UILabel alloc]init];
    serviceLab2.text = @"Privacy Policy";
    serviceLab2.textColor = [UIColor whiteColor];
    serviceLab2.font = [UIFont systemFontOfSize:16];
    serviceLab2.textAlignment = NSTextAlignmentLeft;
    [self.privacyView addSubview:serviceLab2];
    [serviceLab2 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.privacyView);
        make.left.offset(20);
    }];
    UIImageView *jtImg2 = [[UIImageView alloc]init];
    jtImg2.image = [UIImage imageNamed:TUIKitResource(@"a_setting_jt")];
    jtImg2.contentMode = UIViewContentModeScaleAspectFit;
    [self.privacyView addSubview:jtImg2];
    [jtImg2 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.privacyView);
        make.right.offset(-20);
    }];
        
    [self.view addSubview:self.versionLab];
    [self.versionLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.top.mas_equalTo(self.privacyView.mas_bottom).offset(30);
    }];
}
@end

@interface NeighborsSimpleCuteSettingBlockController ()

@property (nonatomic,strong)UIImageView *blockImg;

@property (nonatomic,strong)UILabel *blockAlterLab;

@end

@implementation NeighborsSimpleCuteSettingBlockController

- (UIImageView *)blockImg
{
    if (!_blockImg) {
        _blockImg = [[UIImageView alloc]init];
        _blockImg.image = [UIImage imageNamed:TUIKitResource(@"n_setting_block")];
        _blockImg.contentMode =  UIViewContentModeScaleAspectFit;
    }
    return _blockImg;
}
- (UILabel *)blockAlterLab
{
    if (!_blockAlterLab) {
        _blockAlterLab = [[UILabel alloc]init];
        _blockAlterLab.text = @"No members on your blacklist";
        _blockAlterLab.textColor = RGB(237, 151, 64);
        _blockAlterLab.textAlignment = NSTextAlignmentCenter;
        _blockAlterLab.numberOfLines = 0;
    }
    return _blockAlterLab;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"Block member";
    [self.view addSubview:self.blockImg];
    [self.blockImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.centerY.mas_equalTo(self.view).offset(-40);
    }];
    [self.view addSubview:self.blockAlterLab];
    [self.blockAlterLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(40);
        make.right.offset(-40);
        make.top.mas_equalTo(self.blockImg.mas_bottom).offset(30);
    }];
}
@end

@implementation NeighborsSimpleCuteAppClientModel

@end

@implementation NeighborsSimpleCuteTokenDtoModel

@end

@implementation NeighborsSimpleCuteUserInfoModel

@end

@implementation NeighborsSimpleCuteAccountModel

@end

@implementation NeighborsSimpleCuteUserModel


/*
 + (NSDictionary *)mj_replacedKeyFromPropertyName
 {
     return @{@"uuid": @"id"};
 }
 + (void)save:(JYSUserModel *)model{
     NSDictionary *user = model.mj_keyValues;
     NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
     [defaults setObject:user forKey:UserModelKey];
     [defaults synchronize];
 }
 + (JYSUserModel *)getInfo{
     NSDictionary *dict = [[NSUserDefaults standardUserDefaults] objectForKey:UserModelKey];
     JYSUserModel *user =[JYSUserModel mj_objectWithKeyValues:dict];
     return user;
 }
 + (BOOL)isOnline{
     NSDictionary *dict = [[NSUserDefaults standardUserDefaults] objectForKey:UserModelKey];
     JYSUserModel *user =[JYSUserModel mj_objectWithKeyValues:dict];
     if (user.token.length>0)
         return YES;
     return NO;
 }
 + (void)logout{
     NSDictionary *dict = [[NSUserDefaults standardUserDefaults] objectForKey:UserModelKey];
     JYSUserModel *user =[JYSUserModel mj_objectWithKeyValues:dict];
     NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
     [defaults removeObjectForKey:UserModelKey];
     [defaults synchronize];
     user = nil;
 }
 */
+ (void)setMemberLevel:(NSInteger)memberLevel {
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setInteger:memberLevel forKey:@"memberLevel"];
    [defaults synchronize];
}
+ (NSInteger)memberLevel {
    NSInteger memberLevel = [[NSUserDefaults standardUserDefaults] integerForKey:@"memberLevel"];
    return memberLevel;
}
+ (NSDictionary *)locaOrderInfo {
    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] objectForKey:@"locaOrderInfo"];
    return dict;
}
+ (void)setLocaOrderInfo:(NSDictionary *)locaOrderInfo {
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setObject:locaOrderInfo forKey:@"locaOrderInfo"];
    [defaults synchronize];
}
+ (void)save:(NeighborsSimpleCuteUserModel *)model
{
    NSDictionary *user = model.mj_keyValues;
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setObject:user forKey:@"userModel"];
    [defaults synchronize];
}
+ (NeighborsSimpleCuteUserModel *)getUserInfo
{
    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] objectForKey:@"userModel"];
    NeighborsSimpleCuteUserModel *user =[NeighborsSimpleCuteUserModel mj_objectWithKeyValues:dict];
    return user;
}
+ (BOOL)isOnline
{
    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] objectForKey:@"userModel"];
    NeighborsSimpleCuteUserModel *user =[NeighborsSimpleCuteUserModel mj_objectWithKeyValues:dict];
    if (user.tokenDto.token.length>0)
        return YES;
    return NO;
}
+ (void)logout
{
    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] objectForKey:@"userModel"];
    NeighborsSimpleCuteUserModel *user =[NeighborsSimpleCuteUserModel mj_objectWithKeyValues:dict];
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults removeObjectForKey:@"userModel"];
    [defaults synchronize];
    user = nil;
}

+(void)removeUpgradatelocaOrderInfo
{
    [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"locaOrderInfo"];
    [[NSUserDefaults standardUserDefaults] synchronize];
}

@end

@implementation KJBananerModel


@end

@implementation ZFMemberUpgradeIAPModel

-(void)actionRequestAddPurchaseUpgradeRecord
{
    ZFMemberUpgradeIAPModel *model = [ZFMemberUpgradeIAPModel mj_objectWithKeyValues:[NeighborsSimpleCuteUserModel locaOrderInfo]];
    NSLog(@"model:%@",model);
    if (model && model.reRequestInt > 0) {
        NSMutableDictionary *para = [NSMutableDictionary dictionaryWithDictionary:[model mj_JSONObject]];
        [para setObject:@"1" forKey:@"payStatus"];
        [para setObject:@"IOS" forKey:@"tempStr10th"];
        NSLog(@"param:%@",para);
        NSString *url = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/user/addOrderRecord"];
        [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:url parameters:para success:^(NeighborsSimpleCuteResposeModel *response) {
            model.reRequestInt -= 1;
            [NeighborsSimpleCuteUserModel setLocaOrderInfo:[model mj_JSONObject]];
        }failure:^(NSError *error) {
            [SVProgressHUD showErrorWithStatus:error.domain];
            return;
        }];
    }else{
        [NeighborsSimpleCuteUserModel removeUpgradatelocaOrderInfo];
    }
}

@end

@interface ZFBananerCollectionViewCell : KJBannerViewCell

@property (nonatomic,strong)UIImageView *bgImg;

@property (nonatomic,strong)UILabel *titleLab;

@property (nonatomic,strong)UILabel *subTitleLab;

@end

@implementation ZFBananerCollectionViewCell

- (UIImageView *)bgImg
{
    if (!_bgImg) {
        _bgImg = [[UIImageView alloc]init];
        _bgImg.image = [UIImage imageNamed:@"upgrdate_huiyuan1"];
        _bgImg.contentMode = UIViewContentModeScaleAspectFill;
    }
    return _bgImg;
}
- (UILabel *)titleLab
{
    if (!_titleLab) {
        _titleLab = [[UILabel alloc]init];
        _titleLab.text = @"Unlimited reply voice";
        _titleLab.font = [UIFont systemFontOfSize:18];
        _titleLab.textColor = RGB(243, 165, 29);
        _titleLab.textAlignment = NSTextAlignmentCenter;
    }
    return _titleLab;
}
- (UILabel *)subTitleLab
{
    if (!_subTitleLab) {
        _subTitleLab = [[CusLabel alloc]init];
        _subTitleLab.text = @"Reply voice to everyone";
        _subTitleLab.font = [UIFont systemFontOfSize:15];
        _subTitleLab.textColor = RGB(243, 165, 29);
        _subTitleLab.textAlignment = NSTextAlignmentCenter;
    }
    return _subTitleLab;
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.backgroundColor = [UIColor clearColor];
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self.contentView addSubview:self.bgImg];
    [self.bgImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentView);
        make.top.offset(20);
        make.height.width.offset(70);
    }];
    [self.contentView addSubview:self.titleLab];
    [self.titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentView);
        make.top.mas_equalTo(self.bgImg.mas_bottom).offset(10);
    }];
    [self addSubview:self.subTitleLab];
    [self.subTitleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentView);
        make.top.mas_equalTo(self.titleLab.mas_bottom).offset(10);
    }];
}
- (void)setModel:(NSObject *)model
{
    KJBananerModel *mmodel = (KJBananerModel*)model;
    self.bgImg.image = [UIImage imageNamed:TUIKitResource(mmodel.iconImg)];
    self.titleLab.text = mmodel.titleStr;
    self.subTitleLab.text = mmodel.subTitleStr;
}

@end


@interface ZFBananerCollectionOtherViewCell : KJBannerViewCell

@property (nonatomic,strong)UIImageView *bgImg;

@property (nonatomic,strong)CusLabel *titleLab;

@property (nonatomic,strong)CusLabel *subTitleLab;

@end

@implementation ZFBananerCollectionOtherViewCell

- (UIImageView *)bgImg
{
    if (!_bgImg) {
        _bgImg = [[UIImageView alloc]init];
        _bgImg.image = [UIImage imageNamed:@"upgrdate_huiyuan1"];
        _bgImg.contentMode = UIViewContentModeScaleAspectFill;
    }
    return _bgImg;
}
- (CusLabel *)titleLab
{
    if (!_titleLab) {
        _titleLab = [[CusLabel alloc]init];
        _titleLab.text = @"Unlimited reply voice";
        _titleLab.font = [UIFont fontWithName:@"Times-Bold" size:18];
        _titleLab.textAlignment = NSTextAlignmentCenter;
    }
    return _titleLab;
}
- (CusLabel *)subTitleLab
{
    if (!_subTitleLab) {
        _subTitleLab = [[CusLabel alloc]init];
        _subTitleLab.text = @"Reply voice to everyone";
        _subTitleLab.font = [UIFont fontWithName:@"Times-Bold" size:15];
        _subTitleLab.textAlignment = NSTextAlignmentCenter;
    }
    return _subTitleLab;
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.backgroundColor = [UIColor clearColor];
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self.contentView addSubview:self.bgImg];
    [self.bgImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentView);
        make.top.offset(20);
        make.height.width.offset(70);
    }];
    [self.contentView addSubview:self.titleLab];
    [self.titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentView);
        make.top.mas_equalTo(self.bgImg.mas_bottom).offset(10);
    }];
    [self addSubview:self.subTitleLab];
    [self.subTitleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentView);
        make.top.mas_equalTo(self.titleLab.mas_bottom).offset(10);
    }];
}
- (void)setModel:(NSObject *)model
{
    KJBananerModel *mmodel = (KJBananerModel*)model;
    self.bgImg.image = [UIImage imageNamed:TUIKitResource(mmodel.iconImg)];
    self.titleLab.text = mmodel.titleStr;
    self.subTitleLab.text = mmodel.subTitleStr;
}

@end

@interface ZFUpgradteOtherBottomProlicyViewCell()<UITextViewDelegate>

@property (nonatomic, strong) UITextView *prolicyTextView;

@end

@implementation ZFUpgradteOtherBottomProlicyViewCell
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    self.prolicyTextView = [[UITextView alloc] init];
    self.prolicyTextView.linkTextAttributes = @{};
    NSDictionary *normalAttributes = @{NSFontAttributeName: [UIFont fontWithName:@"ArialMT" size:12], NSForegroundColorAttributeName: HEXCOLOR(0xA1A0A0)};
    NSMutableAttributedString *totalStr = [[NSMutableAttributedString alloc] initWithString:@"  Your payment will be charged to your iTunes account. Your subscription will automatically renew, for the same price and length of time, unless you cancel it in Settings in the iTunes Store at east 24 hours before the end of the current period. If you cancel, your subscription will stop at the end of your subscription billing cycle. By purchasing, you agree to our " attributes:normalAttributes];
    NSDictionary *userAgreementAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize:12], NSForegroundColorAttributeName: HEXCOLOR(0xFC8038), NSLinkAttributeName: @"privacy://"};
    NSAttributedString *userAgreementStr = [[NSAttributedString alloc] initWithString:@"Privacy Policy" attributes:userAgreementAttributes];
    [totalStr appendAttributedString:userAgreementStr];
    NSAttributedString *andStr = [[NSAttributedString alloc] initWithString:@" the " attributes:normalAttributes];
    [totalStr appendAttributedString:andStr];
    NSDictionary *privacyAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize:12], NSForegroundColorAttributeName: HEXCOLOR(0xFC8038), NSLinkAttributeName: @"service://"};
    NSAttributedString *privacyPolicyStr = [[NSAttributedString alloc] initWithString:@"Terms of Service" attributes:privacyAttributes];
    [totalStr appendAttributedString:privacyPolicyStr];
    NSAttributedString *endStr = [[NSAttributedString alloc] initWithString:@"." attributes:normalAttributes];
    [totalStr appendAttributedString:endStr];
    self.prolicyTextView.attributedText = totalStr;
    self.prolicyTextView.delegate = self;
    self.prolicyTextView.editable = NO;
    self.prolicyTextView.scrollEnabled = NO;
    self.prolicyTextView.textContainerInset = UIEdgeInsetsZero;
    self.prolicyTextView.backgroundColor = [UIColor clearColor];
    self.prolicyTextView.textContainer.lineFragmentPadding = 0;
    [self.contentView addSubview:self.prolicyTextView];
    [self.prolicyTextView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.equalTo(@20);
        make.right.equalTo(@-20);
        make.top.equalTo(@10);
        make.bottom.equalTo(@-10);
    }];
}
- (BOOL)textView:(UITextView *)textView shouldInteractWithURL:(NSURL *)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction {
    if ([[URL scheme] isEqualToString:@"service"]) {
        NeighborsSimpleCuteBaseWebController *vc = [[NeighborsSimpleCuteBaseWebController alloc]init];
        vc.isShowHidden = YES;
        vc.webTitle = @"Terms of Service";
        vc.URLString = @"http://www.pokivoice.cn/terms.html";
        vc.loadType = WKWebLoadTypeWebURLString;
        [self.mm_viewController.navigationController pushViewController:vc animated:YES];
        return NO;
    } else if ([[URL scheme] isEqualToString:@"privacy"]) {
        NeighborsSimpleCuteBaseWebController *vc = [[NeighborsSimpleCuteBaseWebController alloc]init];
        vc.webTitle = @"Privacy Policy";
        vc.URLString = @"http://www.pokivoice.cn/privacy.html";
        vc.isShowHidden = YES;
        vc.loadType = WKWebLoadTypeWebURLString;
        [self.mm_viewController.navigationController pushViewController:vc animated:YES];
        return NO;
    }
    return YES;
}
@end

@interface ZFUpgradteBottomProlicyViewCell ()<UITextViewDelegate>
@property (nonatomic, strong) UITextView *prolicyTextView;
@end

@implementation ZFUpgradteBottomProlicyViewCell
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    self.prolicyTextView = [[UITextView alloc] init];
    self.prolicyTextView.linkTextAttributes = @{};
    NSDictionary *normalAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize:12], NSForegroundColorAttributeName: HEXCOLOR(0xA1A0A0)};
    NSMutableAttributedString *totalStr = [[NSMutableAttributedString alloc] initWithString:@"  Your payment will be charged to your iTunes account. Your subscription will automatically renew, for the same price and length of time, unless you cancel it in Settings in the iTunes Store at east 24 hours before the end of the current period. If you cancel, your subscription will stop at the end of your subscription billing cycle. By purchasing, you agree to our " attributes:normalAttributes];
    NSDictionary *userAgreementAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize:12], NSForegroundColorAttributeName: HEXCOLOR(0xFC7D38), NSLinkAttributeName: @"privacy://"};
    NSAttributedString *userAgreementStr = [[NSAttributedString alloc] initWithString:@"Privacy Policy" attributes:userAgreementAttributes];
    [totalStr appendAttributedString:userAgreementStr];
    NSAttributedString *andStr = [[NSAttributedString alloc] initWithString:@" the " attributes:normalAttributes];
    [totalStr appendAttributedString:andStr];
    NSDictionary *privacyAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize:12], NSForegroundColorAttributeName: HEXCOLOR(0xFC7D38), NSLinkAttributeName: @"service://"};
    NSAttributedString *privacyPolicyStr = [[NSAttributedString alloc] initWithString:@"Terms of Service" attributes:privacyAttributes];
    [totalStr appendAttributedString:privacyPolicyStr];
    NSAttributedString *endStr = [[NSAttributedString alloc] initWithString:@"." attributes:normalAttributes];
    [totalStr appendAttributedString:endStr];
    self.prolicyTextView.attributedText = totalStr;
    self.prolicyTextView.delegate = self;
    self.prolicyTextView.editable = NO;
    self.prolicyTextView.scrollEnabled = NO;
    self.prolicyTextView.textContainerInset = UIEdgeInsetsZero;
    self.prolicyTextView.backgroundColor = [UIColor clearColor];
    self.prolicyTextView.textContainer.lineFragmentPadding = 0;
    [self.contentView addSubview:self.prolicyTextView];
    [self.prolicyTextView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.equalTo(@20);
        make.right.equalTo(@-20);
        make.top.equalTo(@10);
        make.bottom.equalTo(@-10);
    }];
}
- (BOOL)textView:(UITextView *)textView shouldInteractWithURL:(NSURL *)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction {
    if ([[URL scheme] isEqualToString:@"service"]) {
        NeighborsSimpleCuteBaseWebController *vc = [[NeighborsSimpleCuteBaseWebController alloc]init];
        vc.isShowHidden = YES;
        vc.webTitle = @"Terms of Service";
        vc.URLString = @"http://www.pokivoice.cn/terms.html";
        vc.loadType = WKWebLoadTypeWebURLString;
        [self.mm_viewController.navigationController pushViewController:vc animated:YES];
        return NO;
    } else if ([[URL scheme] isEqualToString:@"privacy"]) {
        NeighborsSimpleCuteBaseWebController *vc = [[NeighborsSimpleCuteBaseWebController alloc]init];
        vc.webTitle = @"Privacy Policy";
        vc.URLString = @"http://www.pokivoice.cn/privacy.html";
        vc.isShowHidden = YES;
        vc.loadType = WKWebLoadTypeWebURLString;
        [self.mm_viewController.navigationController pushViewController:vc animated:YES];
        return NO;
    }
    return YES;
}

@end
//CONTINECE
@interface ZFUpgradteOtherCommitBuyViewCell()

@end

@implementation ZFUpgradteOtherCommitBuyViewCell

- (UIButton *)contiue_btn
{
    if (!_contiue_btn) {
        _contiue_btn = [[UIButton alloc]init];
        [_contiue_btn setTitle:@"CONTINUE" forState:UIControlStateNormal];
        [_contiue_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _contiue_btn.titleLabel.font = [UIFont fontWithName:@"Times-Bold" size:18];
        _contiue_btn.layer.cornerRadius = 25.0f;
        _contiue_btn.layer.masksToBounds = YES;
        [_contiue_btn addTarget:self action:@selector(actionContiueBtn:) forControlEvents:UIControlEventTouchUpInside];
       [_contiue_btn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH-80), 50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _contiue_btn;
}

-(void)actionContiueBtn:(UIButton *)btn
{
    NSLog(@"actionContiueBtn Other btn");
    if (self.ZFUpgradteCommitBuyViewCellContinueBlock) {
        self.ZFUpgradteCommitBuyViewCellContinueBlock();
    }
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self.contentView addSubview:self.contiue_btn];
    [self.contiue_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.contentView);
        make.height.offset(50);
        make.left.offset(40);
        make.right.offset(-40);
    }];
}

@end



@interface ZFUpgradteCommitBuyViewCell ()

@end


@implementation ZFUpgradteCommitBuyViewCell

- (UIButton *)contiue_btn
{
    if (!_contiue_btn) {
        _contiue_btn = [[UIButton alloc]init];
        [_contiue_btn setTitle:@"Continue" forState:UIControlStateNormal];
        [_contiue_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _contiue_btn.titleLabel.font = [UIFont systemFontOfSize:16];
        _contiue_btn.layer.cornerRadius = 10.0f;
        _contiue_btn.layer.masksToBounds = YES;
        [_contiue_btn addTarget:self action:@selector(actionContiueBtn:) forControlEvents:UIControlEventTouchUpInside];
       [_contiue_btn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH-40), 50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _contiue_btn;
}

-(void)actionContiueBtn:(UIButton *)btn
{
    NSLog(@"actionContiueBtn btn");
    if (self.ZFUpgradteCommitBuyViewCellContinueBlock) {
        self.ZFUpgradteCommitBuyViewCellContinueBlock();
    }
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self.contentView addSubview:self.contiue_btn];
    [self.contiue_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.contentView);
        make.height.offset(50);
        make.left.offset(20);
        make.right.offset(-20);
    }];
}

@end

//新的内购的界面功能
@interface ZFUpgradteOtherContentViewCell()


@end

@implementation ZFUpgradteOtherContentViewCell

- (UIButton *)bg_view
{
    if (!_bg_view) {
        _bg_view = [[UIButton alloc]init];
        _bg_view.backgroundColor = RGB(55, 55, 55);
    }
    return _bg_view;
}

- (UIView *)bg_view2

{
    if (!_bg_view2) {
        _bg_view2 = [[UIView alloc]init];
        _bg_view2.backgroundColor = RGB(55, 55, 55);
    }
    return _bg_view2;
}

- (CusLabel *)middle_lab
{
    if (!_middle_lab) {
        _middle_lab = [[CusLabel alloc]init];
        _middle_lab.text = @"$58.99";
        _middle_lab.textAlignment = NSTextAlignmentCenter;
        _middle_lab.font  = [UIFont fontWithName:@"Times-Roman" size:18];
    }
    return _middle_lab;
}

- (UILabel *)top_lab
{
    if (!_top_lab) {
        _top_lab = [[UILabel alloc]init];
        _top_lab.text = @"6  /n months";
        _top_lab.textColor = RGB(178, 171, 157);
        _top_lab.textAlignment = NSTextAlignmentCenter;
        _top_lab.numberOfLines = 2;
        _top_lab.font = [UIFont fontWithName:@"Times-Roman" size:15];
    }
    return _top_lab;
}

- (UILabel *)bottom_lab
{
    if (!_bottom_lab) {
        _bottom_lab = [[UILabel alloc]init];
        _bottom_lab.text = @"8.99 / month";
        _bottom_lab.textColor = RGB(178, 171, 157);
        _bottom_lab.textAlignment = NSTextAlignmentCenter;
        _bottom_lab.font = [UIFont fontWithName:@"Times-Roman" size:14];
    }
    return _bottom_lab;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self.contentView addSubview:self.bg_view];
    [self.bg_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    
    [self.contentView addSubview:self.bg_view2];
    [self.bg_view2 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(4);
        make.top.offset(4);
        make.right.offset(-4);
        make.bottom.offset(-4);
    }];
    
    [self.contentView addSubview:self.middle_lab];
    [self.middle_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.contentView);
    }];
    
    [self.contentView addSubview:self.top_lab];
    [self.top_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentView);
        make.bottom.mas_equalTo(self.middle_lab.mas_top).offset(-15);
    }];
    
    [self.contentView addSubview:self.bottom_lab];
    [self.bottom_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentView);
        make.top.mas_equalTo(self.middle_lab.mas_bottom).offset(15);
    }];
}
@end

@interface ZFUpgradteContentViewCell  ()

@end

@implementation ZFUpgradteContentViewCell


- (UIButton *)bg_view
{
    if (!_bg_view) {
        _bg_view = [[UIButton alloc]init];
        _bg_view.backgroundColor = RGB(55, 55, 55);
    }
    return _bg_view;
}

- (UIView *)bg_view2

{
    if (!_bg_view2) {
        _bg_view2 = [[UIView alloc]init];
        _bg_view2.backgroundColor = RGB(55, 55, 55);
    }
    return _bg_view2;
}

- (UILabel *)middle_lab
{
    if (!_middle_lab) {
        _middle_lab = [[UILabel alloc]init];
        _middle_lab.text = @"$58.99";
        _middle_lab.textColor = RGB(252, 133, 55);
        _middle_lab.font  = [UIFont boldSystemFontOfSize:18];
    }
    return _middle_lab;
}

- (UILabel *)top_lab
{
    if (!_top_lab) {
        _top_lab = [[UILabel alloc]init];
        _top_lab.text = @"6 months";
        _top_lab.textColor = RGB(176, 171, 157);
        _top_lab.font = [UIFont systemFontOfSize:15];
    }
    return _top_lab;
}

- (UILabel *)bottom_lab
{
    if (!_bottom_lab) {
        _bottom_lab = [[UILabel alloc]init];
        _bottom_lab.text = @"8.99 / month";
        _bottom_lab.textColor = RGB(176, 171, 157);
        _bottom_lab.font = [UIFont systemFontOfSize:15];
    }
    return _bottom_lab;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self.contentView addSubview:self.bg_view];
    [self.bg_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    
    [self.contentView addSubview:self.bg_view2];
    [self.bg_view2 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(4);
        make.top.offset(4);
        make.right.offset(-4);
        make.bottom.offset(-4);
    }];
    
    [self.contentView addSubview:self.middle_lab];
    [self.middle_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.contentView);
    }];
    
    [self.contentView addSubview:self.top_lab];
    [self.top_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentView);
        make.bottom.mas_equalTo(self.middle_lab.mas_top).offset(-15);
    }];
    
    [self.contentView addSubview:self.bottom_lab];
    [self.bottom_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.contentView);
        make.top.mas_equalTo(self.middle_lab.mas_bottom).offset(15);
    }];
}
@end

//#define UpgradeSecret2 @"0bfb984514a14ba8a89198f5911fc1fa" //共享数据
#define UpgradeSecret2 @"7eaa3bdfd9fd4685bb1f879e09997011" //poki


// 新会员功能
@interface ZFMemberUpgrdeOtherController()<UICollectionViewDelegate,UICollectionViewDataSource,KJBannerViewDelegate,KJBannerViewDataSource>
@property (nonatomic,strong)UIButton *restoreOtherBtn;
@property (nonatomic,strong)UIView *bottomOtherView;
@property (nonatomic,strong)KJBannerView *bannerOther;
@property (nonatomic,assign)BOOL isSelectOther;
@property (nonatomic,assign)NSInteger upgradeSelectRowOther;
@property (nonatomic,copy)NSString *upgrdateCurrentProductIDOther;
@property (nonatomic,strong)NSMutableArray *bannerListArrOther;
@property (nonatomic,strong)NSMutableArray *productListArrOther;
@property (nonatomic,strong)NSMutableArray *identityListArrOther;
@property (nonatomic,strong)UICollectionView *productCollectionViewOther;
@end
@implementation ZFMemberUpgrdeOtherController
- (UICollectionView *)productCollectionViewOther
{
    if (!_productCollectionViewOther) {
        UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc]init];
        flow.scrollDirection = UICollectionViewScrollDirectionVertical;
        flow.minimumLineSpacing = 10;
        flow.minimumInteritemSpacing = 10;
        _productCollectionViewOther = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flow];
        _productCollectionViewOther.backgroundColor = [UIColor clearColor];
        _productCollectionViewOther.delegate = self;
        _productCollectionViewOther.dataSource = self;
        [_productCollectionViewOther registerClass:[ZFUpgradteOtherContentViewCell class] forCellWithReuseIdentifier:@"ZFUpgradteOtherContentViewCell"];
        [_productCollectionViewOther registerClass:[ZFUpgradteOtherCommitBuyViewCell class] forCellWithReuseIdentifier:@"ZFUpgradteOtherCommitBuyViewCell"];
        [_productCollectionViewOther registerClass:[ZFUpgradteOtherBottomProlicyViewCell class] forCellWithReuseIdentifier:@"ZFUpgradteOtherBottomProlicyViewCell"];
    }
    return _productCollectionViewOther;
}

- (NSMutableArray *)identityListArrOther
{
    if (!_identityListArrOther) {
        //_identityListArrOther = [NSMutableArray arrayWithObjects:@"cooil_1_month",@"cooil_3_months",@"cooil_6_months",@"cooil_12_months",nil];
        _identityListArrOther = [NSMutableArray arrayWithObjects:@"poki_1month",@"poki_3months",@"poki_6months",@"poki_12months",nil];
    }
    return _identityListArrOther;
}
- (NSMutableArray *)productListArrOther
{
    if (!_productListArrOther) {
        _productListArrOther = [NSMutableArray array];
    }
    return _productListArrOther;
}
- (NSMutableArray *)bannerListArrOther
{
    if (!_bannerListArrOther) {
        _bannerListArrOther = [NSMutableArray array];
    }
    return _bannerListArrOther;
}
- (UIView *)bottomOtherView
{
    if (!_bottomOtherView) {
        _bottomOtherView = [[UIView alloc]init];
        _bottomOtherView.backgroundColor = [UIColor clearColor];
        //RGBColor(55, 55, 55);
    }
    return _bottomOtherView;
}
- (UIButton *)restoreOtherBtn
{
    if (!_restoreOtherBtn) {
        _restoreOtherBtn = [UIButton buttonWithType:UIButtonTypeSystem];
        [_restoreOtherBtn setTitle:@"Restore" forState:UIControlStateNormal];
        [_restoreOtherBtn setTitleColor:RGB(252, 246, 224) forState:UIControlStateNormal];
        _restoreOtherBtn.titleLabel.font = [UIFont systemFontOfSize:14];
        _restoreOtherBtn.imageEdgeInsets = UIEdgeInsetsMake(0.0, 4.0, 0.0, -4.0);
        [_restoreOtherBtn addTarget:self action:@selector(setOtherCxshareldstaretlRightBtn:) forControlEvents:UIControlEventTouchUpInside];
        [_restoreOtherBtn sizeToFit];
    }
    return _restoreOtherBtn;
}

-(void)setOtherCxshareldstaretlRightBtn:(UIButton *)btn
{
    NSLog(@"setCxshareldstaretlRightBtn");
    
     NSLog(@"Restore btn");
     [SVProgressHUD setDefaultMaskType:SVProgressHUDMaskTypeClear];
     [SVProgressHUD show];
     [[IAPShare sharedHelper].iap restoreProductsWithCompletion:^(SKPaymentQueue *payment, NSError *error) {
         NSLog(@"payment.transactions.count:%lu", (unsigned long)payment.transactions.count);
         if (!error && payment.transactions.count) {
             if (![NeighborsSimpleCuteUserModel locaOrderInfo].allValues.count) {
                 NSData *data = [NSData dataWithContentsOfURL:[[NSBundle mainBundle] appStoreReceiptURL]];
                 [[IAPShare sharedHelper].iap checkReceipt:data AndSharedSecret:UpgradeSecret2 onCompletion:^(NSString *response, NSError *error) {
                     NSDictionary *dics = [response getCxshareldstaretlToDictionary];
                     NSLog(@"dics:%@",dics);
                     if ([dics[@"status"] intValue] == 21007) {
                         [IAPShare sharedHelper].iap.production = YES;
                         [[IAPShare sharedHelper].iap checkReceipt:data AndSharedSecret:UpgradeSecret2 onCompletion:^(NSString *response, NSError *error) {
                                 if (error) {
                                    [SVProgressHUD dismiss];
                                    [SVProgressHUD showInfoWithStatus:@"Restore purchase failed."];
                                 } else {
                                     [SVProgressHUD dismiss];
                                     [SVProgressHUD showInfoWithStatus:@"Restore purchase successed."];
                                     [self actionAddRecordWithResposeoneData:response];
                                 }
                         }];
                     } else {
                         if (error) {
                            [SVProgressHUD dismiss];
                            [SVProgressHUD showInfoWithStatus:@"Restore purchase failed."];
                         } else {
                             [SVProgressHUD dismiss];
                             [SVProgressHUD showInfoWithStatus:@"Restore purchase successed."];
                             [self actionAddRecordWithResposeoneData:response];
                         }
                     }
                 }];
             } else {
                 [SVProgressHUD dismiss];
                 [SVProgressHUD showInfoWithStatus:@"Restore purchase successed."];
                 //update local data
                 NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
                 userModel.userInfo.memberLevel = 1;
                 [NeighborsSimpleCuteUserModel save:userModel];
             }
         } else {
             [SVProgressHUD dismiss];
             [SVProgressHUD showInfoWithStatus:@"Please select membership"];
         }
     }];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.upgradeSelectRowOther = 100;
    self.navigationItem.title = @"Upgrade";
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:self.restoreOtherBtn];
    [self setupBanerData];
    [self setupUpgradeTopView];
    [[ZFMemberUpgradeIAPModel new] actionRequestAddPurchaseUpgradeRecord];
    [self setupStoreInfoData];
}
-(void)setupBanerData
{
    [self.bannerListArrOther removeAllObjects];
    KJBananerModel *model = [[KJBananerModel alloc]init];
    model.iconImg = @"huiyuan2";
    model.titleStr = @"Unlimited Communication";
    model.subTitleStr = @"Send private messages to anyone!";
    [self.bannerListArrOther addObject:model];
    KJBananerModel *model2 = [[KJBananerModel alloc]init];
    model2.iconImg = @"huiyuan2";
    model2.titleStr = @"Like You";
    model2.subTitleStr = @"Find out just who might like you!";//这个是复杂版显示的文字
    [self.bannerListArrOther addObject:model2];
}
-(void)setupUpgradeTopView
{
    KJBannerView *banner = [[KJBannerView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width,180)];
    banner.delegate = self;
    banner.dataSource = self;

    [banner registerClass:[ZFBananerCollectionOtherViewCell class] forCellWithReuseIdentifier:@"ZFBananerCollectionOtherViewCell"];
    banner.itemSpace = 10;
    banner.delegate = self;
    banner.itemWidth = self.view.frame.size.width;
    banner.rollType = KJBannerViewRollDirectionTypeRightToLeft;
    [self.view addSubview:banner];
    [banner reloadData];
}
#pragma mark - KJBannerViewDelegate
- (void)kj_bannerView:(KJBannerView *)banner didSelectItemAtIndex:(NSInteger)index
{
    
}
- (void)kj_bannerView:(KJBannerView *)banner loopScrolledItemAtIndex:(NSInteger)index
{
    
}
#pragma mark - KJBannerViewDataSource

- (NSInteger)kj_numberOfItemsInBannerView:(KJBannerView *)banner
{
    return self.bannerListArrOther.count;
}
- (__kindof KJBannerViewCell *)kj_bannerView:(KJBannerView *)banner cellForItemAtIndex:(NSInteger)index {
    ZFBananerCollectionOtherViewCell *cell = [banner dequeueReusableCellWithReuseIdentifier:@"ZFBananerCollectionOtherViewCell" forIndex:index];
    KJBananerModel *model  = self.bannerListArrOther[index];
    cell.titleLab.text = model.titleStr;
    cell.subTitleLab.text = model.subTitleStr;
    cell.bgImg.image = [UIImage imageNamed:TUIKitResource(model.iconImg)];
    return cell;
}
- (nullable NSString *)kj_bannerView:(KJBannerView *)banner nextPreRenderedImageItemAtIndex:(NSInteger)index{
    return nil;
}
- (void)kj_bannerView:(KJBannerView *)banner preRenderedImage:(UIImage *)image{
    
}
/// 获取苹果商店的东西
-(void)setupStoreInfoData
{
    [SVProgressHUD show];
    NSSet* dataSet = [[NSSet alloc] initWithArray:self.self.identityListArrOther];
    [IAPShare sharedHelper].iap = [[IAPHelper alloc] initWithProductIdentifiers:dataSet];
    [IAPShare sharedHelper].iap.production = YES;
    [[IAPShare sharedHelper].iap requestProductsWithCompletion:^(SKProductsRequest *request, SKProductsResponse *response) {
        if (response.products.count >0) {
            dispatch_async(dispatch_get_main_queue(), ^{
                [SVProgressHUD dismiss];
                NSLog(@"setupStoreInfoData:count:%lu",(unsigned long)response.products.count);
                [self.productListArrOther removeAllObjects];
                NSMutableArray *array = [NSMutableArray array];
                [array addObjectsFromArray:response.products];
                [array enumerateObjectsUsingBlock:^(SKProduct  *_Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                    if ([obj.productIdentifier isEqualToString:@"poki_1month"]) {
                        [self.productListArrOther addObject:obj];
                        *stop = YES;
                    }
                }];
                [response.products enumerateObjectsUsingBlock:^(SKProduct  *_Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                    if ([obj.productIdentifier isEqualToString:@"poki_3months"]) {
                        [self.productListArrOther addObject:obj];
                        *stop = YES;
                    }
                }];
                [response.products enumerateObjectsUsingBlock:^(SKProduct  *_Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                    if ([obj.productIdentifier isEqualToString:@"poki_6months"]) {
                        [self.productListArrOther addObject:obj];
                        *stop = YES;
                    }
                }];
                [response.products enumerateObjectsUsingBlock:^(SKProduct  *_Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                    if ([obj.productIdentifier isEqualToString:@"poki_12months"]) {
                        [self.productListArrOther addObject:obj];
                        *stop = YES;
                    }
                }];
                dispatch_async(dispatch_get_main_queue(), ^{
                    [SVProgressHUD dismiss];
                    [self showAnimationMethod];
                });
            });
        }else{
            dispatch_async(dispatch_get_main_queue(), ^{
                [SVProgressHUD dismiss];
            });
        }
    }];
}
- (void)showAnimationMethod {
    
    [self.view addSubview:self.bottomOtherView];
    [self.bottomOtherView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.bottom.offset(0);
        make.top.offset(180);
    }];
    UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:CGRectMake(0, 0, SCREEN_WIDTH, Screen_Height- 180) byRoundingCorners:UIRectCornerTopLeft | UIRectCornerTopRight cornerRadii:CGSizeMake(15, 15)];
    CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];
    maskLayer.frame = self.bottomOtherView.bounds;
    maskLayer.path = maskPath.CGPath;
    self.bottomOtherView.layer.mask = maskLayer;
    [self.bottomOtherView addSubview:self.productCollectionViewOther];
    [self.productCollectionViewOther mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [UIView animateWithDuration:1.0
                          delay:0.0
         usingSpringWithDamping:0.4
          initialSpringVelocity:10
                        options:UIViewAnimationOptionCurveEaseInOut
                     animations:^{
        [self.view layoutIfNeeded];
    }
                     completion:^(BOOL finished) {
                    
    }];
}
#pragma mark -- ZFMemberUpgrdeController | UICollectionViewDelegate,UICollectionViewDataSource
-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 3;
}
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    if (section == 0) {
        return self.productListArrOther.count;
    }else{
        return 1;
    }
}
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    if (section == 0) {
        return UIEdgeInsetsMake(20, 20, 20, 20);
    }else{
        return UIEdgeInsetsZero;
    }
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
     if(indexPath.section == 0){
        return CGSizeMake((SCREEN_WIDTH-50)/2, 150);
    }else if(indexPath.section == 1){
        return CGSizeMake(SCREEN_WIDTH, 50);
    }else{
        return CGSizeMake(SCREEN_WIDTH, 200);
    }
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    if(indexPath.section == 0){
        ZFUpgradteOtherContentViewCell *contentCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"ZFUpgradteOtherContentViewCell" forIndexPath:indexPath];
        SKProduct *product = self.productListArrOther[indexPath.row];
        contentCell.middle_lab.text = [self formatter:product number:product.price];
        if (indexPath.row == 0) {
            contentCell.top_lab.text = @"1 \n month";
            NSString *doubleString = [NSString stringWithFormat:@"%lf", [product.price doubleValue]];
            NSDecimalNumber *decNumber = [NSDecimalNumber decimalNumberWithString:doubleString];
            contentCell.bottom_lab.text = [NSString stringWithFormat:@"%@/month",[self formatter:product number:decNumber]];
        }else if(indexPath.row == 1){
            contentCell.top_lab.text = @"3  \n months";
            NSString *doubleString = [NSString stringWithFormat:@"%lf", [product.price doubleValue]/3];
            NSDecimalNumber *decNumber = [NSDecimalNumber decimalNumberWithString:doubleString];
            contentCell.bottom_lab.text = [NSString stringWithFormat:@"%@/month",[self formatter:product number:decNumber]];
        }else if(indexPath.row == 2 ){
            contentCell.top_lab.text = @"6 \n months";
            NSString *doubleString = [NSString stringWithFormat:@"%lf", [product.price doubleValue]/6];
            NSDecimalNumber *decNumber = [NSDecimalNumber decimalNumberWithString:doubleString];
            contentCell.bottom_lab.text = [NSString stringWithFormat:@"%@/month",[self formatter:product number:decNumber]];
        }else{
            contentCell.top_lab.text = @"12 \n months";
            NSString *doubleString = [NSString stringWithFormat:@"%lf", [product.price doubleValue]/12];
            NSDecimalNumber *decNumber = [NSDecimalNumber decimalNumberWithString:doubleString];
            contentCell.bottom_lab.text = [NSString stringWithFormat:@"%@/month",[self formatter:product number:decNumber]];
        }
        if (indexPath.row == self.upgradeSelectRowOther) {
            [contentCell.bg_view gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH-50)/2, 130) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
            contentCell.bg_view.layer.cornerRadius = 6.0f;
            contentCell.bg_view.layer.masksToBounds = YES;
        }else{
            [contentCell.bg_view gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH-50)/2, 130) colorArray:@[(id)RGB(55,55,55),(id)RGB(55, 55, 55)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
            contentCell.bg_view.layer.cornerRadius = 0.0f;
            contentCell.bg_view.layer.masksToBounds = YES;
        }
        return contentCell;
    }else if(indexPath.section == 1){
        ZFUpgradteOtherCommitBuyViewCell *buyCommitCell  = [collectionView dequeueReusableCellWithReuseIdentifier:@"ZFUpgradteOtherCommitBuyViewCell" forIndexPath:indexPath];
        [buyCommitCell setZFUpgradteCommitBuyViewCellContinueBlock:^{
            //contiuebtn action
            [self actionUpgrdatePurcharAction];
        }];
        return buyCommitCell;
    }else{
        ZFUpgradteOtherBottomProlicyViewCell *prolicahBottomCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"ZFUpgradteOtherBottomProlicyViewCell" forIndexPath:indexPath];
        return prolicahBottomCell;
    }
}

//开始购买
-(void)actionUpgrdatePurcharAction
{
    if (self.isSelectOther == NO) {
        [SVProgressHUD showInfoWithStatus:@"Please select membership to purchas"];
        return;
    }
    //zf开发，zjf移植, 界面B，强制配置不能支付 start
    if ([[NeighborsSimpleCuteUserModel getUserInfo].userInfo.tempStr23th isEqualToString:@"1"]){
        [SVProgressHUD showInfoWithStatus:@"Your profile is pending and cannot be upgraded to a premium member."];
        return;
    }
    //zf开发，zjf移植, 界面B，强制配置不能支付 end
    [SVProgressHUD show];
    SKProduct *product = self.productListArrOther[self.upgradeSelectRowOther];
    [[IAPShare sharedHelper].iap buyProduct:product onCompletion:^(SKPaymentTransaction *transcation) {
        if (transcation.transactionState == SKPaymentTransactionStatePurchasing) {
            NSLog(@"SKPaymentTransactionStatePurchasing");
        }else if(transcation.transactionState == SKPaymentTransactionStatePurchased){
            NSLog(@"SKPaymentTransactionStatePurchased");
            if (transcation.originalTransaction) {
                if (![NeighborsSimpleCuteUserModel locaOrderInfo].allValues.count) {
                    NSData *data = [NSData dataWithContentsOfURL:[[NSBundle mainBundle] appStoreReceiptURL]];
                    [[IAPShare sharedHelper].iap checkReceipt:data AndSharedSecret:UpgradeSecret2 onCompletion:^(NSString *response, NSError *error) {
                        NSDictionary *dics = [response getCxshareldstaretlToDictionary];
                        if ([dics[@"status"] intValue] == 21007) {
                            [IAPShare sharedHelper].iap.production = YES;
                            [[IAPShare sharedHelper].iap checkReceipt:data onCompletion:^(NSString *response, NSError *error) {
                                if (error) {
                                    [SVProgressHUD dismiss];
                                    [SVProgressHUD showInfoWithStatus:@"Please restore to purchase"];
                                    return;
                                }else{
                                    [SVProgressHUD dismiss];
                                    [SVProgressHUD showInfoWithStatus:@"Purchase successed."];
                                    [self actionAddRecordWithResposeoneData:response];
                                }
                            }];
                        }else{
                            if (error) {
                                [SVProgressHUD dismiss];
                                [SVProgressHUD showInfoWithStatus:@"Please restore to purchase"];
                            }else{
                                [SVProgressHUD dismiss];
                                [SVProgressHUD showInfoWithStatus:@"Purchase successed."];
                                [self actionAddRecordWithResposeoneData:response];
                            }
                        }
                    }];
                }else{
                    ZFMemberUpgradeIAPModel *model = [ZFMemberUpgradeIAPModel mj_objectWithKeyValues:[NeighborsSimpleCuteUserModel locaOrderInfo]];
                    if (![model.goodsId isEqualToString:self.upgrdateCurrentProductIDOther]) {
                        model.goodsId = self.upgrdateCurrentProductIDOther;
                        model.reRequestInt = 5;
                        // 请求记录
                        [self actionRequestAddUpgredateOrderRecord];
                    } else {
                        [SVProgressHUD dismiss];
                        [SVProgressHUD showInfoWithStatus:@"Purchase successed."];
                        //这里记录下成功
                        NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
                        userModel.userInfo.memberLevel = 1;
                        [NeighborsSimpleCuteUserModel save:userModel];
                    }
                }
            }else{
                NSData *data = [NSData dataWithContentsOfURL:[[NSBundle mainBundle] appStoreReceiptURL]];
                [[IAPShare sharedHelper].iap checkReceipt:data AndSharedSecret:UpgradeSecret2 onCompletion:^(NSString *response, NSError *error) {
                    NSDictionary *dics = [response getCxshareldstaretlToDictionary];
                    if ([dics[@"status"] intValue] == 21007) {
                        [IAPShare sharedHelper].iap.production = YES;
                        [[IAPShare sharedHelper].iap checkReceipt:data AndSharedSecret:UpgradeSecret2 onCompletion:^(NSString *response, NSError *error) {
                            if (error) {
                                [SVProgressHUD dismiss];
                                [SVProgressHUD showInfoWithStatus:@"Purchase failed."];
                            }else{
                                [SVProgressHUD dismiss];
                                [SVProgressHUD showInfoWithStatus:@"Purchase successed."];
                                [self actionAddRecordWithResposeoneData:response];
                            }
                        }];
                    }else{
                        if (error) {
                            [SVProgressHUD dismiss];
                            [SVProgressHUD showInfoWithStatus:@"Purchase failed."];
                        }else{
                            [SVProgressHUD dismiss];
                            [SVProgressHUD showInfoWithStatus:@"Purchase successed."];
                            [self actionAddRecordWithResposeoneData:response];
                        }
                    }
                }];
            }
        }else if(transcation.transactionState == SKPaymentTransactionStateFailed){
            NSLog(@"SKPaymentTransactionStateFailed");
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:@"Purchase Cancel"];
        }else if(transcation.transactionState == SKPaymentTransactionStateRestored){
            NSLog(@"SKPaymentTransactionStateRestored");
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:@"Purchase Restored"];
        }else if(transcation.transactionState == SKPaymentTransactionStateDeferred){
            NSLog(@"SKPaymentTransactionStateDeferred");
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:@"Purchase Deferred"];
        }else{
            [SVProgressHUD dismiss];
        }
    }];
}
/// 添加记录功能
/// @param response 返回内容
-(void)actionAddRecordWithResposeoneData:(NSString *)response
{
    NSLog(@"responseresponseresponse:%@",response);
    //记录状态
    NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
    userModel.userInfo.memberLevel = 1;
    [NeighborsSimpleCuteUserModel save:userModel];
    //添加记录功能
    ZFMemberUpgradeIAPModel *upgrdateModel = [[ZFMemberUpgradeIAPModel alloc]init];
    upgrdateModel.reRequestInt = 5;
    NSDictionary *dic = [NSArray arrayWithArray:[response getCxshareldstaretlToDictionary][@"pending_renewal_info"]].lastObject;
    upgrdateModel.orderNum = [NSString stringWithFormat:@"GPA.IOS.(%ld)(%@)",(long)userModel.userInfo.userId,dic[@"original_transaction_id"]];
    upgrdateModel.goodsId = dic[@"product_id"];
    [NeighborsSimpleCuteUserModel setLocaOrderInfo:[upgrdateModel mj_JSONObject]];
    [self actionRequestAddUpgredateOrderRecord];
}
/// 调用接口给服务器返回数据
-(void)actionRequestAddUpgredateOrderRecord
{
    ZFMemberUpgradeIAPModel *model = [ZFMemberUpgradeIAPModel mj_objectWithKeyValues:[NeighborsSimpleCuteUserModel locaOrderInfo]];
    NSMutableDictionary *para = [NSMutableDictionary dictionaryWithDictionary:[model mj_JSONObject]];
    [para setObject:@"1" forKey:@"payStatus"];
    [para setObject:@"IOS" forKey:@"tempStr10th"];
    NSLog(@"param:%@",para);
    NSString *url = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/user/addOrderRecord"];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:url parameters:para success:^(NeighborsSimpleCuteResposeModel *response) {
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            ZFMemberUpgradeIAPModel *model = [ZFMemberUpgradeIAPModel mj_objectWithKeyValues:[NeighborsSimpleCuteUserModel locaOrderInfo]];
            model.reRequestInt -= 1;
            [NeighborsSimpleCuteUserModel setLocaOrderInfo:[model mj_JSONObject]];
            }
        } failure:^(NSError *error) {
            [SVProgressHUD showErrorWithStatus:error.domain];
            return;
    }];
}
-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
    self.isSelectOther = YES;
    self.upgradeSelectRowOther = (int)indexPath.row;
    self.upgrdateCurrentProductIDOther = self.identityListArrOther[indexPath.row];
    [self.productCollectionViewOther reloadData];
}
#pragma mark - KJBannerViewDelegate
//点击图片的代理
- (void)kj_BannerView:(KJBannerView *)banner SelectIndex:(NSInteger)index
{
    NSLog(@"index = %ld",(long)index);
}
- (NSString *)formatter:(SKProduct *)obj number:(NSDecimalNumber *)number{
    NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
    [numberFormatter setFormatterBehavior:NSNumberFormatterBehavior10_4];
    [numberFormatter setNumberStyle:NSNumberFormatterCurrencyStyle];
    [numberFormatter setLocale:obj.priceLocale];
    NSString *formattedPrice = [numberFormatter stringFromNumber:number];
    return formattedPrice;
}
@end
//#define UpgradeSecret @"0bfb984514a14ba8a89198f5911fc1fa"// cooil
#define UpgradeSecret @"7eaa3bdfd9fd4685bb1f879e09997011" // poki
@interface ZFMemberUpgrdeController ()<UICollectionViewDelegate,UICollectionViewDataSource,KJBannerViewDelegate,KJBannerViewDataSource>
@property (nonatomic,strong)UIButton *restoreBtn;
@property (nonatomic,strong)UIView *bottomView;
@property (nonatomic,strong)KJBannerView *banner;
@property (nonatomic,assign)BOOL isSelect;
@property (nonatomic,assign)NSInteger upgradeSelectRow;
@property (nonatomic,copy)NSString *upgrdateCurrentProductID;
@property (nonatomic,strong)NSMutableArray *bannerListArr;
@property (nonatomic,strong)NSMutableArray *productListArr;
@property (nonatomic,strong)NSMutableArray *identityListArr;
@property (nonatomic,strong)UICollectionView *productCollectionView;
@end

@implementation ZFMemberUpgrdeController
- (UICollectionView *)productCollectionView
{
    if (!_productCollectionView) {
        UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc]init];
        flow.scrollDirection = UICollectionViewScrollDirectionVertical;
        flow.minimumLineSpacing = 10;
        flow.minimumInteritemSpacing = 10;
        _productCollectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flow];
        _productCollectionView.backgroundColor = [UIColor clearColor];
        _productCollectionView.delegate = self;
        _productCollectionView.dataSource = self;
        [_productCollectionView registerClass:[ZFUpgradteContentViewCell class] forCellWithReuseIdentifier:@"ZFUpgradteContentViewCell"];
        [_productCollectionView registerClass:[ZFUpgradteCommitBuyViewCell class] forCellWithReuseIdentifier:@"ZFUpgradteCommitBuyViewCell"];
        //[_productCollectionView registerNib:[UINib nibWithNibName:@"ZFUpgradteContentViewCell" bundle:nil] forCellWithReuseIdentifier:@"ZFUpgradteContentViewCell"];
        //[_productCollectionView registerNib:[UINib nibWithNibName:@"ZFUpgradteCommitBuyViewCell" bundle:nil] forCellWithReuseIdentifier:@"ZFUpgradteCommitBuyViewCell"];
        [_productCollectionView registerClass:[ZFUpgradteBottomProlicyViewCell class] forCellWithReuseIdentifier:@"ZFUpgradteBottomProlicyViewCell"];
    }
    return _productCollectionView;
}
- (NSMutableArray *)identityListArr
{
    if (!_identityListArr) {
        //_identityListArr = [NSMutableArray arrayWithObjects:@"cooil_1_month",@"cooil_3_months",@"cooil_6_months",@"cooil_12_months",nil];
        _identityListArr = [NSMutableArray arrayWithObjects:@"poki_1month",@"poki_3months",@"poki_6months",@"poki_12months",nil];
    }
    return _identityListArr;
}
- (NSMutableArray *)productListArr
{
    if (!_productListArr) {
        _productListArr = [NSMutableArray array];
    }
    return _productListArr;
}
- (NSMutableArray *)bannerListArr
{
    if (!_bannerListArr) {
        _bannerListArr = [NSMutableArray array];
    }
    return _bannerListArr;
}
- (UIView *)bottomView
{
    if (!_bottomView) {
        _bottomView = [[UIView alloc]init];
        _bottomView.backgroundColor = [UIColor clearColor];
        //RGBColor(55, 55, 55);
    }
    return _bottomView;
}
- (UIButton *)restoreBtn
{
    if (!_restoreBtn) {
        _restoreBtn = [UIButton buttonWithType:UIButtonTypeSystem];
        [_restoreBtn setTitle:@"Restore" forState:UIControlStateNormal];
        [_restoreBtn setTitleColor:RGB(252, 246, 224) forState:UIControlStateNormal];
        _restoreBtn.titleLabel.font = [UIFont systemFontOfSize:14];
        _restoreBtn.imageEdgeInsets = UIEdgeInsetsMake(0.0, 4.0, 0.0, -4.0);
        [_restoreBtn addTarget:self action:@selector(setCxshareldstaretlRightBtn:) forControlEvents:UIControlEventTouchUpInside];
        [_restoreBtn sizeToFit];
    }
    return _restoreBtn;
}

-(void)setCxshareldstaretlRightBtn:(UIButton *)btn
{
    NSLog(@"setCxshareldstaretlRightBtn");
    
     NSLog(@"Restore btn");
     [SVProgressHUD setDefaultMaskType:SVProgressHUDMaskTypeClear];
     [SVProgressHUD show];
     [[IAPShare sharedHelper].iap restoreProductsWithCompletion:^(SKPaymentQueue *payment, NSError *error) {
         NSLog(@"payment.transactions.count:%lu", (unsigned long)payment.transactions.count);
         if (!error && payment.transactions.count) {
             if (![NeighborsSimpleCuteUserModel locaOrderInfo].allValues.count) {
                 NSData *data = [NSData dataWithContentsOfURL:[[NSBundle mainBundle] appStoreReceiptURL]];
                 [[IAPShare sharedHelper].iap checkReceipt:data AndSharedSecret:UpgradeSecret onCompletion:^(NSString *response, NSError *error) {
                     NSDictionary *dics = [response getCxshareldstaretlToDictionary];
                     NSLog(@"dics:%@",dics);
                     if ([dics[@"status"] intValue] == 21007) {
                         [IAPShare sharedHelper].iap.production = YES;
                         [[IAPShare sharedHelper].iap checkReceipt:data AndSharedSecret:UpgradeSecret onCompletion:^(NSString *response, NSError *error) {
                                 if (error) {
                                    [SVProgressHUD dismiss];
                                    [SVProgressHUD showInfoWithStatus:@"Restore purchase failed."];
                                 } else {
                                     [SVProgressHUD dismiss];
                                     [SVProgressHUD showInfoWithStatus:@"Restore purchase successed."];
                                     [self actionAddRecordWithResposeoneData:response];
                                }
                         }];
                     } else {
                         if (error) {
                            [SVProgressHUD dismiss];
                            [SVProgressHUD showInfoWithStatus:@"Restore purchase failed."];
                         } else {
                             [SVProgressHUD dismiss];
                             [SVProgressHUD showInfoWithStatus:@"Restore purchase successed."];
                             [self actionAddRecordWithResposeoneData:response];
                         }
                     }
                 }];
             } else {
                 [SVProgressHUD dismiss];
                 [SVProgressHUD showInfoWithStatus:@"Restore purchase successed."];
                 //update local data
                 NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
                 userModel.userInfo.memberLevel = 1;
                 [NeighborsSimpleCuteUserModel save:userModel];
             }
         } else {
             [SVProgressHUD dismiss];
             [SVProgressHUD showInfoWithStatus:@"Please select membership"];
         }
     }];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.upgradeSelectRow = 100;
    self.navigationItem.title = @"Upgrade";
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:self.restoreBtn];
    [self setupBanerData];
    [self setupUpgradeTopView];
    [[ZFMemberUpgradeIAPModel new] actionRequestAddPurchaseUpgradeRecord];
    [self setupStoreInfoData];
}

-(void)setupBanerData
{
    [self.bannerListArr removeAllObjects];
    KJBananerModel *model = [[KJBananerModel alloc]init];
    model.iconImg = @"upgrdate_huiyuan2";
    model.titleStr = @"Unlimited Reply Voice";
    model.subTitleStr = @"Reply Voice To Everyone Every Day";
    [self.bannerListArr addObject:model];
    KJBananerModel *model2 = [[KJBananerModel alloc]init];
    model2.iconImg = @"upgrdate_huiyuan1";
    model2.titleStr = @"Unlimited Send Voice";
    model2.subTitleStr = @"Send More Voice In The City Square.";//这个是单机版显示的文字
    [self.bannerListArr addObject:model2];
}
-(void)setupUpgradeTopView
{
    KJBannerView *banner = [[KJBannerView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width,180)];
    banner.delegate = self;
    banner.dataSource = self;

    [banner registerClass:[ZFBananerCollectionViewCell class] forCellWithReuseIdentifier:@"ZFBananerCollectionViewCell"];
    banner.itemSpace = 10;
    banner.delegate = self;
    banner.itemWidth = self.view.frame.size.width;
    banner.rollType = KJBannerViewRollDirectionTypeRightToLeft;
    [self.view addSubview:banner];
    [banner reloadData];
}
#pragma mark - KJBannerViewDelegate
- (void)kj_bannerView:(KJBannerView *)banner didSelectItemAtIndex:(NSInteger)index
{
}
- (void)kj_bannerView:(KJBannerView *)banner loopScrolledItemAtIndex:(NSInteger)index
{
}
#pragma mark - KJBannerViewDataSource
- (NSInteger)kj_numberOfItemsInBannerView:(KJBannerView *)banner
{
    return self.bannerListArr.count;
}
- (__kindof KJBannerViewCell *)kj_bannerView:(KJBannerView *)banner cellForItemAtIndex:(NSInteger)index
{
    ZFBananerCollectionViewCell *cell = [banner dequeueReusableCellWithReuseIdentifier:@"ZFBananerCollectionViewCell" forIndex:index];
    KJBananerModel *model  = self.bannerListArr[index];
    cell.titleLab.text = model.titleStr;
    cell.subTitleLab.text = model.subTitleStr;
    cell.bgImg.image = [UIImage imageNamed:TUIKitResource(model.iconImg)];
    return cell;
}
- (nullable NSString *)kj_bannerView:(KJBannerView *)banner nextPreRenderedImageItemAtIndex:(NSInteger)index{
    return nil;
}
- (void)kj_bannerView:(KJBannerView *)banner preRenderedImage:(UIImage *)image
{
    
}
/// 获取苹果商店的东西
-(void)setupStoreInfoData
{
    [SVProgressHUD show];
    NSSet* dataSet = [[NSSet alloc] initWithArray:self.self.identityListArr];
    [IAPShare sharedHelper].iap = [[IAPHelper alloc] initWithProductIdentifiers:dataSet];
    [IAPShare sharedHelper].iap.production = YES;
    [[IAPShare sharedHelper].iap requestProductsWithCompletion:^(SKProductsRequest *request, SKProductsResponse *response) {
        if (response.products.count >0) {
            dispatch_async(dispatch_get_main_queue(), ^{
                [SVProgressHUD dismiss];
                NSLog(@"setupStoreInfoData:count:%lu",(unsigned long)response.products.count);
                [self.productListArr removeAllObjects];
                NSMutableArray *array = [NSMutableArray array];
                [array addObjectsFromArray:response.products];
                [array enumerateObjectsUsingBlock:^(SKProduct  *_Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                    if ([obj.productIdentifier isEqualToString:@"poki_1month"]) {
                        [self.productListArr addObject:obj];
                        *stop = YES;
                    }
                }];
                [response.products enumerateObjectsUsingBlock:^(SKProduct  *_Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                    if ([obj.productIdentifier isEqualToString:@"poki_3months"]) {
                        [self.productListArr addObject:obj];
                        *stop = YES;
                    }
                }];
                [response.products enumerateObjectsUsingBlock:^(SKProduct  *_Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                    if ([obj.productIdentifier isEqualToString:@"poki_6months"]) {
                        [self.productListArr addObject:obj];
                        *stop = YES;
                    }
                }];
                [response.products enumerateObjectsUsingBlock:^(SKProduct  *_Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                    if ([obj.productIdentifier isEqualToString:@"poki_12months"]) {
                        [self.productListArr addObject:obj];
                        *stop = YES;
                    }
                }];
                dispatch_async(dispatch_get_main_queue(), ^{
                    [SVProgressHUD dismiss];
                    [self showAnimationMethod];
                });
            });
        }else{
            dispatch_async(dispatch_get_main_queue(), ^{
                [SVProgressHUD dismiss];
            });
        }
    }];
}
- (void)showAnimationMethod {
    
    [self.view addSubview:self.bottomView];
    [self.bottomView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.bottom.offset(0);
        make.top.offset(180);
    }];
    UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:CGRectMake(0, 0, SCREEN_WIDTH, Screen_Height- 180) byRoundingCorners:UIRectCornerTopLeft | UIRectCornerTopRight cornerRadii:CGSizeMake(15, 15)];
    CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];
    maskLayer.frame = self.bottomView.bounds;
    maskLayer.path = maskPath.CGPath;
    self.bottomView.layer.mask = maskLayer;
    [self.bottomView addSubview:self.productCollectionView];
    [self.productCollectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [UIView animateWithDuration:1.0
                          delay:0.0
         usingSpringWithDamping:0.4
          initialSpringVelocity:10
                        options:UIViewAnimationOptionCurveEaseInOut
                     animations:^{
        [self.view layoutIfNeeded];
    }
                     completion:^(BOOL finished) {
                    
    }];
}
#pragma mark -- ZFMemberUpgrdeController | UICollectionViewDelegate,UICollectionViewDataSource
-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 3;
}
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    if (section == 0) {
        return self.productListArr.count;
    }else{
        return 1;
    }
}
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    if (section == 0) {
        return UIEdgeInsetsMake(20, 20, 20, 20);
    }else{
        return UIEdgeInsetsZero;
    }
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
     if(indexPath.section == 0){
        return CGSizeMake((SCREEN_WIDTH-50)/2, 130);
    }else if(indexPath.section == 1){
        return CGSizeMake(SCREEN_WIDTH, 50);
    }else{
        return CGSizeMake(SCREEN_WIDTH, 200);
    }
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    if(indexPath.section == 0){
        ZFUpgradteContentViewCell *contentCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"ZFUpgradteContentViewCell" forIndexPath:indexPath];
        SKProduct *product = self.productListArr[indexPath.row];
        contentCell.middle_lab.text = [self formatter:product number:product.price];
        if (indexPath.row == 0) {
            contentCell.top_lab.text = @"1 month";
            NSString *doubleString = [NSString stringWithFormat:@"%lf", [product.price doubleValue]];
            NSDecimalNumber *decNumber = [NSDecimalNumber decimalNumberWithString:doubleString];
            contentCell.bottom_lab.text = [NSString stringWithFormat:@"%@/month",[self formatter:product number:decNumber]];
        }else if(indexPath.row == 1){
            contentCell.top_lab.text = @"3 months";
            NSString *doubleString = [NSString stringWithFormat:@"%lf", [product.price doubleValue]/3];
            NSDecimalNumber *decNumber = [NSDecimalNumber decimalNumberWithString:doubleString];
            contentCell.bottom_lab.text = [NSString stringWithFormat:@"%@/month",[self formatter:product number:decNumber]];
        }else if(indexPath.row == 2 ){
            contentCell.top_lab.text = @"6 months";
            NSString *doubleString = [NSString stringWithFormat:@"%lf", [product.price doubleValue]/6];
            NSDecimalNumber *decNumber = [NSDecimalNumber decimalNumberWithString:doubleString];
            contentCell.bottom_lab.text = [NSString stringWithFormat:@"%@/month",[self formatter:product number:decNumber]];
        }else{
            contentCell.top_lab.text = @"12 months";
            NSString *doubleString = [NSString stringWithFormat:@"%lf", [product.price doubleValue]/12];
            NSDecimalNumber *decNumber = [NSDecimalNumber decimalNumberWithString:doubleString];
            contentCell.bottom_lab.text = [NSString stringWithFormat:@"%@/month",[self formatter:product number:decNumber]];
        }
        if (indexPath.row == self.upgradeSelectRow) {
            [contentCell.bg_view gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH-50)/2, 130) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
            contentCell.bg_view.layer.cornerRadius = 6.0f;
            contentCell.bg_view.layer.masksToBounds = YES;
        }else{
            [contentCell.bg_view gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH-50)/2, 130) colorArray:@[(id)RGB(55,55,55),(id)RGB(55, 55, 55)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
            contentCell.bg_view.layer.cornerRadius = 0.0f;
            contentCell.bg_view.layer.masksToBounds = YES;
        }
        return contentCell;
    }else if(indexPath.section == 1){
        ZFUpgradteCommitBuyViewCell *buyCommitCell  = [collectionView dequeueReusableCellWithReuseIdentifier:@"ZFUpgradteCommitBuyViewCell" forIndexPath:indexPath];
        [buyCommitCell setZFUpgradteCommitBuyViewCellContinueBlock:^{
            //contiuebtn action
            [self actionUpgrdatePurcharAction];
        }];
        return buyCommitCell;
    }else{
        ZFUpgradteBottomProlicyViewCell *prolicahBottomCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"ZFUpgradteBottomProlicyViewCell" forIndexPath:indexPath];
        return prolicahBottomCell;
    }
}

//开始购买
-(void)actionUpgrdatePurcharAction
{
    if (self.isSelect == NO) {
        [SVProgressHUD showInfoWithStatus:@"Please select membership to purchas"];
        return;
    }
    //zf开发，zjf移植, 界面a，强制配置不能支付 start
    if ([[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare8th isEqualToString:@"1"] || [[NeighborsSimpleCuteUserModel getUserInfo].userInfo.tempStr23th isEqualToString:@"1"]){
        [SVProgressHUD showInfoWithStatus:@"Your profile is pending and cannot be upgraded to a premium member."];
        return;
    }
    //zf开发，zjf移植, 界面a，强制配置不能支付 end
    
    [SVProgressHUD show];
    SKProduct *product = self.productListArr[self.upgradeSelectRow];
    [[IAPShare sharedHelper].iap buyProduct:product onCompletion:^(SKPaymentTransaction *transcation) {
        if (transcation.transactionState == SKPaymentTransactionStatePurchasing) {
            NSLog(@"SKPaymentTransactionStatePurchasing");
        }else if(transcation.transactionState == SKPaymentTransactionStatePurchased){
            NSLog(@"SKPaymentTransactionStatePurchased");
            if (transcation.originalTransaction) {
                if (![NeighborsSimpleCuteUserModel locaOrderInfo].allValues.count) {
                    NSData *data = [NSData dataWithContentsOfURL:[[NSBundle mainBundle] appStoreReceiptURL]];
                    [[IAPShare sharedHelper].iap checkReceipt:data AndSharedSecret:UpgradeSecret onCompletion:^(NSString *response, NSError *error) {
                        NSDictionary *dics = [response getCxshareldstaretlToDictionary];
                        if ([dics[@"status"] intValue] == 21007) {
                            [IAPShare sharedHelper].iap.production = YES;
                            [[IAPShare sharedHelper].iap checkReceipt:data onCompletion:^(NSString *response, NSError *error) {
                                if (error) {
                                    [SVProgressHUD dismiss];
                                    [SVProgressHUD showInfoWithStatus:@"Please restore to purchase"];
                                    return;
                                }else{
                                    [SVProgressHUD dismiss];
                                    [SVProgressHUD showInfoWithStatus:@"Purchase successed."];
                                    [self actionAddRecordWithResposeoneData:response];
                                }
                            }];
                        }else{
                            if (error) {
                                [SVProgressHUD dismiss];
                                [SVProgressHUD showInfoWithStatus:@"Please restore to purchase"];
                            }else{
                                [SVProgressHUD dismiss];
                                [SVProgressHUD showInfoWithStatus:@"Purchase successed."];
                                [self actionAddRecordWithResposeoneData:response];
                            }
                        }
                    }];
                }else{
                    ZFMemberUpgradeIAPModel *model = [ZFMemberUpgradeIAPModel mj_objectWithKeyValues:[NeighborsSimpleCuteUserModel locaOrderInfo]];
                    if (![model.goodsId isEqualToString:self.upgrdateCurrentProductID]) {
                        model.goodsId = self.upgrdateCurrentProductID;
                        model.reRequestInt = 5;
                        // 请求记录
                        [self actionRequestAddUpgredateOrderRecord];
                    } else {
                        [SVProgressHUD dismiss];
                        [SVProgressHUD showInfoWithStatus:@"Purchase successed."];
                        //这里记录下成功
                        NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
                        userModel.userInfo.memberLevel = 1;
                        [NeighborsSimpleCuteUserModel save:userModel];
                    }
                }
            }else{
                NSData *data = [NSData dataWithContentsOfURL:[[NSBundle mainBundle] appStoreReceiptURL]];
                [[IAPShare sharedHelper].iap checkReceipt:data AndSharedSecret:UpgradeSecret onCompletion:^(NSString *response, NSError *error) {
                    NSDictionary *dics = [response getCxshareldstaretlToDictionary];
                    if ([dics[@"status"] intValue] == 21007) {
                        [IAPShare sharedHelper].iap.production = YES;
                        [[IAPShare sharedHelper].iap checkReceipt:data AndSharedSecret:UpgradeSecret onCompletion:^(NSString *response, NSError *error) {
                            if (error) {
                                [SVProgressHUD dismiss];
                                [SVProgressHUD showInfoWithStatus:@"Purchase failed."];
                            }else{
                                [SVProgressHUD dismiss];
                                [SVProgressHUD showInfoWithStatus:@"Purchase successed."];
                                [self actionAddRecordWithResposeoneData:response];
                            }
                        }];
                    }else{
                        if (error) {
                            [SVProgressHUD dismiss];
                            [SVProgressHUD showInfoWithStatus:@"Purchase failed."];
                        }else{
                            [SVProgressHUD dismiss];
                            [SVProgressHUD showInfoWithStatus:@"Purchase successed."];
                            [self actionAddRecordWithResposeoneData:response];
                        }
                    }
                }];
            }
        }else if(transcation.transactionState == SKPaymentTransactionStateFailed){
            NSLog(@"SKPaymentTransactionStateFailed");
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:@"Purchase Cancel"];
        }else if(transcation.transactionState == SKPaymentTransactionStateRestored){
            NSLog(@"SKPaymentTransactionStateRestored");
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:@"Purchase Restored"];
        }else if(transcation.transactionState == SKPaymentTransactionStateDeferred){
            NSLog(@"SKPaymentTransactionStateDeferred");
            [SVProgressHUD dismiss];
            [SVProgressHUD showInfoWithStatus:@"Purchase Deferred"];
        }else{
            [SVProgressHUD dismiss];
        }
    }];
}
/// 添加记录功能
/// @param response 返回内容
-(void)actionAddRecordWithResposeoneData:(NSString *)response
{   //记录状态
    NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
    userModel.userInfo.memberLevel = 1;
    [NeighborsSimpleCuteUserModel save:userModel];
    //添加记录功能
    ZFMemberUpgradeIAPModel *upgrdateModel = [[ZFMemberUpgradeIAPModel alloc]init];
    upgrdateModel.reRequestInt = 5;
    NSDictionary *dic = [NSArray arrayWithArray:[response getCxshareldstaretlToDictionary][@"pending_renewal_info"]].lastObject;
    upgrdateModel.orderNum = [NSString stringWithFormat:@"GPA.IOS.(%ld)(%@)",(long)userModel.userInfo.userId,dic[@"original_transaction_id"]];
    upgrdateModel.goodsId = dic[@"product_id"];
    [NeighborsSimpleCuteUserModel setLocaOrderInfo:[upgrdateModel mj_JSONObject]];
    [self actionRequestAddUpgredateOrderRecord];
}
/// 调用接口给服务器返回数据
-(void)actionRequestAddUpgredateOrderRecord
{
    ZFMemberUpgradeIAPModel *model = [ZFMemberUpgradeIAPModel mj_objectWithKeyValues:[NeighborsSimpleCuteUserModel locaOrderInfo]];
    NSMutableDictionary *para = [NSMutableDictionary dictionaryWithDictionary:[model mj_JSONObject]];
    [para setObject:@"1" forKey:@"payStatus"];
    [para setObject:@"IOS" forKey:@"tempStr10th"];
    NSLog(@"param:%@",para);
    NSString *url = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/user/addOrderRecord"];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:url parameters:para success:^(NeighborsSimpleCuteResposeModel *response) {
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            ZFMemberUpgradeIAPModel *model = [ZFMemberUpgradeIAPModel mj_objectWithKeyValues:[NeighborsSimpleCuteUserModel locaOrderInfo]];
            model.reRequestInt -= 1;
            [NeighborsSimpleCuteUserModel setLocaOrderInfo:[model mj_JSONObject]];
            }
        } failure:^(NSError *error) {
            [SVProgressHUD showErrorWithStatus:error.domain];
            return;
    }];
}
-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
    self.isSelect = YES;
    self.upgradeSelectRow = (int)indexPath.row;
    self.upgrdateCurrentProductID = self.identityListArr[indexPath.row];
    [self.productCollectionView reloadData];
}
#pragma mark - KJBannerViewDelegate
//点击图片的代理
- (void)kj_BannerView:(KJBannerView *)banner SelectIndex:(NSInteger)index
{
    NSLog(@"index = %ld",(long)index);
}
- (NSString *)formatter:(SKProduct *)obj number:(NSDecimalNumber *)number{
    NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
    [numberFormatter setFormatterBehavior:NSNumberFormatterBehavior10_4];
    [numberFormatter setNumberStyle:NSNumberFormatterCurrencyStyle];
    [numberFormatter setLocale:obj.priceLocale];
    NSString *formattedPrice = [numberFormatter stringFromNumber:number];
    return formattedPrice;
}

@end


@interface CusLabel ()

@end

@implementation CusLabel

- (void)drawRect:(CGRect)rect
{
    CGSize textSize = [self.text sizeWithAttributes:@{NSFontAttributeName : self.font}];
    CGRect textRect = (CGRect){0, 0, textSize};
    
    // 画文字(不做显示用, 主要作用是设置 layer 的 mask)
    CGContextRef context = UIGraphicsGetCurrentContext();
    [self.textColor set];
    
//    CGRect textRect;
    
    if (self.textAlignment == NSTextAlignmentLeft) {
        textRect = CGRectMake(rect.origin.x, rect.origin.y + (rect.size.height - textSize.height)/2.0, textSize.width, textSize.height);
    }
    else if (self.textAlignment == NSTextAlignmentCenter) {
        textRect = CGRectMake(rect.origin.x + (rect.size.width - textSize.width)/2.0, rect.origin.y + (rect.size.height - textSize.height)/2.0, textSize.width, textSize.height);
    }
    else {
        textRect = CGRectMake(rect.origin.x + (rect.size.width - textSize.width), rect.origin.y + (rect.size.height - textSize.height)/2.0, textSize.width, textSize.height);
    }
    
    [self.text drawWithRect:textRect options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName : self.font} context:NULL];
    
    // 坐标(只对设置后的画到 context 起作用, 之前画的文字不起作用)
    CGContextTranslateCTM(context, 0.0f, rect.size.height - (rect.size.height - textSize.height) * 0.5);
    CGContextScaleCTM(context, 1.0f, -1.0f);
    
    CGImageRef alphaMask = CGBitmapContextCreateImage(context);
    CGContextClearRect(context, rect); // 清除之前画的文字
    
    // 设置mask
    CGContextClipToMask(context, rect, alphaMask);
    
    // 画渐变色
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    self.colors = @[(id)(id)RGB(250, 204, 72).CGColor,(id)RGB(235, 142, 63).CGColor];
    //self.colors = @[(id)RGB(250, 166, 94).CGColor,(id)RGB(247, 189, 21).CGColor];
    CGGradientRef gradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)self.colors, NULL);
    CGPoint startPoint = CGPointMake(textRect.origin.x + textRect.size.width/2.0,
                                     textRect.origin.y + textRect.size.height);
    CGPoint endPoint = CGPointMake(textRect.origin.x + textRect.size.width/2.0,
                                   textRect.origin.y);
    CGContextDrawLinearGradient(context, gradient, startPoint, endPoint, kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
    
    // 释放内存
    CGColorSpaceRelease(colorSpace);
    CGGradientRelease(gradient);
    CFRelease(alphaMask);
}
    
//    CGContextRef context = UIGraphicsGetCurrentContext();
//
//    // 获取文字mask
//    [self.text drawInRect:self.bounds withAttributes:@{NSFontAttributeName : self.font}];
//    CGImageRef textMask = CGBitmapContextCreateImage(context);
//
//    // 清空画布
//    CGContextClearRect(context, rect);
//
//    // 设置蒙层
//    CGContextTranslateCTM(context, 0.0, self.bounds.size.height);
//    CGContextScaleCTM(context, 1.0, -1.0);
//    CGContextClipToMask(context, rect, textMask);
//
//    // 绘制渐变
//    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
//    CGFloat locations[] = {0,1};
//    CGFloat colors[] = {
//        247.0/255.0,189.0/255.0,21.0/255.0,1.0,
//        250.0/255.0,166.0/255.0,94.0/255.0,1.0
//        };
//    CGGradientRef gradient=CGGradientCreateWithColorComponents(colorSpace, colors, locations, 2);
//    CGPoint start = CGPointMake(0,0);
//    CGPoint end = CGPointMake(self.bounds.size.height/2,0);
//    CGContextDrawLinearGradient(context, gradient, start, end, kCGGradientDrawsBeforeStartLocation);
//
//    // 释放
//    CGColorSpaceRelease(colorSpace);
//    CGGradientRelease(gradient);
//    CGImageRelease(textMask);
//}

@end

@interface XSDKResourceUtil ()

@end

@implementation XSDKResourceUtil

+(float)measureMutilineStringHeight:(NSString*)str andFont:(UIFont*)wordFont andWidthSetup:(float)width{

    if (str == nil || width <= 0) return 0;

    CGSize measureSize;

    if([[UIDevice currentDevice].systemVersion floatValue] < 7.0){

        measureSize = [str sizeWithFont:wordFont constrainedToSize:CGSizeMake(width, MAXFLOAT) lineBreakMode:NSLineBreakByWordWrapping];

    }else{

        measureSize = [str boundingRectWithSize:CGSizeMake(width, MAXFLOAT) options:NSStringDrawingUsesLineFragmentOrigin attributes:[NSDictionary dictionaryWithObjectsAndKeys:wordFont, NSFontAttributeName, nil] context:nil].size;

    }

    return ceil(measureSize.height);

}

// 传一个字符串和字体大小来返回一个字符串所占的宽度

+(float)measureSinglelineStringWidth:(NSString*)str andFont:(UIFont*)wordFont{

    if (str == nil) return 0;

    CGSize measureSize;

    if([[UIDevice currentDevice].systemVersion floatValue] < 7.0){

        measureSize = [str sizeWithFont:wordFont constrainedToSize:CGSizeMake(MAXFLOAT, MAXFLOAT) lineBreakMode:NSLineBreakByWordWrapping];

    }else{

        measureSize = [str boundingRectWithSize:CGSizeMake(0, 0) options:NSStringDrawingUsesFontLeading attributes:[NSDictionary dictionaryWithObjectsAndKeys:wordFont, NSFontAttributeName, nil] context:nil].size;

    }

    return ceil(measureSize.width);

}

+(CGSize)measureSinglelineStringSize:(NSString*)str andFont:(UIFont*)wordFont

{

    if (str == nil) return CGSizeZero;

    CGSize measureSize;

    if([[UIDevice currentDevice].systemVersion floatValue] < 7.0){

        measureSize = [str sizeWithFont:wordFont constrainedToSize:CGSizeMake(MAXFLOAT, MAXFLOAT) lineBreakMode:NSLineBreakByWordWrapping];

    }else{

        measureSize = [str boundingRectWithSize:CGSizeMake(0, 0) options:NSStringDrawingUsesFontLeading attributes:[NSDictionary dictionaryWithObjectsAndKeys:wordFont, NSFontAttributeName, nil] context:nil].size;

    }

    return measureSize;

}

 

//+(UIImage*)imageAt:(NSString*)imgNamePath{

//    if (imgNamePath == nil || [[imgNamePath stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]length] == 0) {

//        return nil;

//    }

//    return [UIImage imageNamed:[ImageResourceBundleName stringByAppendingPathComponent:imgNamePath]];

//}

 

+(BOOL)xsdkcheckName:(NSString*)name{

    if([XSDKResourceUtil xsdkstringIsnilOrEmpty:name]){

        return NO;

    }else{

        if(name.length < 5){

            return NO;

        }

        

        if(name.length > 20){

            return NO;

        }

        

        NSPredicate * pred = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^[a-zA-Z][a-zA-Z0-9_]*$"];

        if(![pred evaluateWithObject:name]){

            return [XSDKResourceUtil xsdkcheckPhone:name];

        }

    }

    return YES;

}

 

+(BOOL)xsdkcheckPhone:(NSString *)userphone

{

    NSPredicate * phone = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", @"^1\\d{10}"];

    if (![phone evaluateWithObject:userphone]) {

        return NO;

    }

    return YES;

}
+(BOOL)xsdkstringIsnilOrEmpty:(NSString*)string{
    if (string == nil || [string isKindOfClass:[NSNull class]]  || [string isEqualToString:@""]) {
        return YES;
    }else{
        return NO;
    }
}
+(UIColor *)xsdkcolorWithHexString:(NSString *)color alpha:(CGFloat)alpha
{   //删除字符串中的空格
    NSString *cString = [[color stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] uppercaseString];
    // String should be 6 or 8 characters
    if ([cString length] < 6)

    {

        return [UIColor clearColor];

    }

    // strip 0X if it appears

    //如果是0x开头的，那么截取字符串，字符串从索引为2的位置开始，一直到末尾

    if ([cString hasPrefix:@"0X"])

    {

        cString = [cString substringFromIndex:2];

    }

    //如果是#开头的，那么截取字符串，字符串从索引为1的位置开始，一直到末尾

    if ([cString hasPrefix:@"#"])

    {

        cString = [cString substringFromIndex:1];

    }

    if ([cString length] != 6)

    {

        return [UIColor clearColor];

    }

    

    // Separate into r, g, b substrings

    NSRange range;

    range.location = 0;

    range.length = 2;

    //r

    NSString *rString = [cString substringWithRange:range];

    //g

    range.location = 2;

    NSString *gString = [cString substringWithRange:range];

    //b

    range.location = 4;

    NSString *bString = [cString substringWithRange:range];
    // Scan values
    unsigned int r, g, b;
    [[NSScanner scannerWithString:rString] scanHexInt:&r];
    [[NSScanner scannerWithString:gString] scanHexInt:&g];
    [[NSScanner scannerWithString:bString] scanHexInt:&b];
    return [UIColor colorWithRed:((float)r / 255.0f) green:((float)g / 255.0f) blue:((float)b / 255.0f) alpha:alpha];
}

+(BOOL)jsonFieldIsNull:(id)jsonField{
    return (jsonField == nil || [jsonField isKindOfClass:[NSNull class]]);
}

+(int)filterIntValue:(id)value withDefaultValue:(int)defaultValue{
    if (![XSDKResourceUtil jsonFieldIsNull:value]) {
        return [value intValue];
    }else{
        return defaultValue;
    }
}

+(NSString*)filterStringValue:(id)value withDefaultValue:(NSString*)defaultValue
{
    if ([value isKindOfClass:[NSString class]] && ![XSDKResourceUtil xsdkstringIsnilOrEmpty:value]) {
        return value;
    }else{
        return defaultValue;
    }
}
@end

//IM 聊天功能
@interface TCLoginParam()

@end

@implementation TCLoginParam

#define kLoginParamKey     @"kLoginParamKey"

+ (instancetype)shareInstance
{
    static TCLoginParam *mgr;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        if (mgr == nil) {
            NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
            if (defaults == nil) {
                defaults = [NSUserDefaults standardUserDefaults];
            }
            NSString *useridKey = [defaults objectForKey:kLoginParamKey];
            if (useridKey) {
                NSString *strLoginParam = [defaults objectForKey:useridKey];
                NSDictionary *dic = [TCUtil jsonData2Dictionary: strLoginParam];
                if (dic) {
                    mgr = [[TCLoginParam alloc] init];
                    mgr.tokenTime = [[dic objectForKey:@"tokenTime"] longValue];
                    mgr.identifier = [dic objectForKey:@"identifier"];
                    mgr.hashedPwd = [dic objectForKey:@"hashedPwd"];
                    mgr.isLastAppExt = [[dic objectForKey:@"isLastAppExt"] intValue];
                }
            }
        }
    });
    return mgr;
}


+ (instancetype)loadFromLocal {
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    if (defaults == nil) {
        defaults = [NSUserDefaults standardUserDefaults];
    }
    NSString *useridKey = [defaults objectForKey:kLoginParamKey];
    if (useridKey) {
        NSString *strLoginParam = [defaults objectForKey:useridKey];
        NSDictionary *dic = [TCUtil jsonData2Dictionary: strLoginParam];
        if (dic) {
            TCLoginParam *param = [[TCLoginParam alloc] init];
            param.tokenTime = [[dic objectForKey:@"tokenTime"] longValue];
            param.identifier = [dic objectForKey:@"identifier"];
            param.hashedPwd = [dic objectForKey:@"hashedPwd"];
            param.isLastAppExt = [[dic objectForKey:@"isLastAppExt"] intValue];
            return param;
        }
    }
    return [[TCLoginParam alloc] init];
}

- (void)saveToLocal {
    if (self.tokenTime == 0) {
        self.tokenTime = [[NSDate date] timeIntervalSince1970];
    }
    
    if (![self isValid]) {
        return;
    }
    
    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];
    [dic setObject:@(self.tokenTime) forKey:@"tokenTime"];
    [dic setObject:self.identifier forKey:@"identifier"];
    [dic setObject:self.hashedPwd forKey:@"hashedPwd"];
#if APP_EXT
    [dic setObject:@(1) forKey:@"isLastAppExt"];
#else
    [dic setObject:@(0) forKey:@"isLastAppExt"];
#endif
    
    NSData *data = [TCUtil dictionary2JsonData: dic];
    NSString *strLoginParam = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
    NSString *useridKey = [NSString stringWithFormat:@"%@_LoginParam", self.identifier];
    
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];;
    if (defaults == nil) {
        defaults = [NSUserDefaults standardUserDefaults];
    }
    
    [defaults setObject:useridKey forKey:kLoginParamKey];
    
    // save login param
    [defaults setObject:strLoginParam forKey:useridKey];
    [defaults synchronize];
}

- (BOOL)isExpired {
//    time_t curTime = [[NSDate date] timeIntervalSince1970];
//    if (curTime - self.tokenTime > 10 * 24 * 3600) {
//        return YES;
//    }
    return NO;
}

- (BOOL)isValid {
    if (self.identifier == nil || self.identifier.length == 0) {
        return NO;
    }
    if (self.hashedPwd == nil || self.hashedPwd.length == 0) {
        return NO;
    }
    if ([self isExpired]) {
        return NO;
    }
    return YES;
}

@end

@interface IMManagerUtil ()
@property (nonatomic,strong)V2TIMUserFullInfo *profile;
@end
@implementation IMManagerUtil
/// 单利模式功能
+ (instancetype)IMManagerSharedInstance
{
    static dispatch_once_t onceToken;
    static IMManagerUtil * instance = nil;
    dispatch_once(&onceToken, ^{
        instance = [IMManagerUtil new];
    });
    return instance;
}
/// 基本配置
- (void)IMManagerconfigIM
{
    NSLog(@"IMManagerconfigIM是的发送到发到沙发上发生的");
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(onGetUserStatus:) name:TUIKitNotification_TIMUserStatusListener object:nil];
    [[TUIKit sharedInstance] setupWithAppId:1400068127];
    [self IMconfigAppearUI];
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    NSLog(@"model.tempStr20th:%@",model.userInfo.tempStr20th);
    NSLog(@"model.area:%@",model.userInfo.area);
    [self  IMManagerWithlogin:model.userInfo.tempStr20th userSig:model.userInfo.area succ:^{
        NSLog(@"IM login success");
    } fail:^(int code, NSString *msg) {
        NSLog(@"IM login failutre");
    }];
}
/// 监听状态
/// @param noti 监听状态
-(void)onGetUserStatus:(NSNotification *)noti
{
    TUIUserStatus status = [noti.object integerValue];
    switch (status) {
        case TUser_Status_ForceOffline:
        {
            [self actionLogout];
        }
            break;
        case TUser_Status_ReConnFailed:
        {
            NSLog(@"连网失败");
        }
            break;
        case TUser_Status_SigExpired:
        {
            NSLog(@"userSig过期");
        }
            break;
        default:
            break;
    }
}
/// 设置界面Config
-(void)IMconfigAppearUI
{
    TUIKitConfig *config = [TUIKitConfig defaultConfig];
    config.avatarType = TAvatarTypeRounded;
    config.defaultAvatarImage = [UIImage imageNamed:@"im_default_head"];
    config.avatarCornerRadius = 5.0f;
}
/// 退出登录操作的功能
-(void)actionLogout
{
    [SVProgressHUD show];
    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
            dispatch_async(dispatch_get_main_queue(), ^{
                [SVProgressHUD dismiss];
                [SVProgressHUD showInfoWithStatus:@"Sign out successful"];
                [[NSUserDefaults standardUserDefaults]removeObjectForKey:NeighborsSimple_LoginUser];
                [[NSUserDefaults standardUserDefaults]removeObjectForKey:NeighborsSimple_LoginPWd];
                [[NSUserDefaults standardUserDefaults]synchronize];
                [[NSUserDefaults standardUserDefaults]removeObjectForKey:NeighborsSimple_LoginStatus];
                [[NSUserDefaults standardUserDefaults]synchronize];
                NeighborsSimpleCuteRootMainController *rootMainvc = [[NeighborsSimpleCuteRootMainController alloc]init];
                UINavigationController *nav = [[UINavigationController alloc]initWithRootViewController:rootMainvc];
                [UIApplication sharedApplication].keyWindow.rootViewController = nav;
                [NeighborsSimpleCuteUserModel logout];
        });
    });
}
/// 登陆服务器
/// @param identifier 标识
/// @param sig 签名
/// @param succ 成功
/// @param fail 失败
- (void)IMManagerWithlogin:(NSString *)identifier userSig:(NSString *)sig succ:(TSucc)succ fail:(TFail)fail
{
    [[TUIKit sharedInstance] login:identifier userSig:sig succ:^{
        NSLog(@"IM-----> 登录成功==identifier==%@",identifier);
        self.CxIMLoginStatus = 1;
        [self setupGetTotalUnreadCount];
        [self getUserInfoWithIdentiter:identifier];
        succ();
    } fail:^(int code, NSString *msg) {
        NSLog(@"IM-----> 登录失败==identifier==%@",identifier);
        self.CxIMLoginStatus = 0;
        fail(code, msg);
    }];
}
/// 设置头像显示功能
/// @param loginUser 设置头像显示
-(void)getUserInfoWithIdentiter:(NSString *)loginUser
{
    NSLog(@"loginUser.identitf:%@",loginUser);
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    NSLog(@"imgUrl:%@",model.userInfo.imgUrl);
    NSString *avtorUrl = [NSString stringWithFormat:@"%@/%@",model.appClient.spare17th,model.userInfo.imgUrl];
    NSLog(@"avtorUrl:%@",avtorUrl);
    [[V2TIMManager sharedInstance] getUsersInfo:@[loginUser] succ:^(NSArray<V2TIMUserFullInfo *> *infoList) {
        self.profile = infoList.firstObject;
    } fail:nil];
    V2TIMUserFullInfo *info = [[V2TIMUserFullInfo alloc] init];
    info.faceURL = avtorUrl;
    [[V2TIMManager sharedInstance] setSelfInfo:info succ:^{
        [self.profile setFaceURL:avtorUrl];
    } fail:^(int code, NSString *desc) {
        
    }];
}
/// 获取未读的的数据
-(void)setupGetTotalUnreadCount
{   __weak typeof(self) weakSelf = self;
    [V2TIMManager.sharedInstance getTotalUnreadMessageCount:^(UInt64 totalCount){
        NSNotification *notice = [NSNotification notificationWithName:TUIKitNotification_onTotalUnreadMessageCountChanged object:@(totalCount)];
        [weakSelf onTotalUnreadCountChanged:notice];
//        dispatch_async(dispatch_get_main_queue(), ^{
//            NSString *totalStr = [NSString stringWithFormat:@"%llu",totalCount];
//            NSLog(@"totalStr11111111111:%@",totalStr);
//            NSDictionary * dicNumber = @{@"TotalCount":totalStr};
//            [[NSNotificationCenter defaultCenter]postNotificationName:TUIKitNotification_onTotalUnreadMessageCountChanged object:nil userInfo:dicNumber];
//        });
    } fail:^(int code, NSString *desc) {
        
    }];
}
- (void)onTotalUnreadCountChanged:(NSNotification *)notice
{
    id object = notice.object;
    if (![object isKindOfClass:NSNumber.class]) {
        return;
    }
    NSUInteger total = [object integerValue];
    NSLog(@"有新消息---数量==%ld",total);
    BOOL isVPN = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_VPN];
    BOOL isCountry = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_COUNTRY];
    NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
    if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th isEqualToString:@"1"] || [userModel.appClient.spare13th isEqualToString:@"1"] || isVPN == YES  || isCountry == YES) {
        
    }else{
        UINavigationController *rootNav = (UINavigationController *)UIApplication.sharedApplication.delegate.window.rootViewController;
        if (total == 0){
            rootNav.childViewControllers[1].tabBarItem.badgeValue = nil;
        }else if(total > 99){
            rootNav.childViewControllers[1].tabBarItem.badgeValue = @"99+";
        }else{
            rootNav.childViewControllers[1].tabBarItem.badgeValue = [NSString stringWithFormat:@"%lu",(unsigned long)total];
        }
    }
}
@end
#define ASThemeColor [UIColor colorWithWhite:0.2 alpha:1.0]
#define ASWindowPadding 20

#pragma mark- ASFileItem

typedef enum : NSUInteger {
    ASFileItemUp,
    ASFileItemDirectory,
    ASFileItemFile,
} ASFileItemType;

@interface PAirSandbox ()
@property (nonatomic, strong) NSMutableArray*                   groupItems;
@end

@interface ASFileItem : NSObject
@property (nonatomic, copy) NSString*                 name;
@property (nonatomic, copy) NSString*                 path;
@property (nonatomic, assign) ASFileItemType          type;
@end

@implementation ASFileItem
@end

#pragma mark- ASTableViewCell
@interface PAirSandboxCell : UITableViewCell
@property (nonatomic, strong) UILabel*                 lbName;
@end

@implementation PAirSandboxCell

- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier
{
    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
    if (self)
    {
        self.selectionStyle = UITableViewCellSelectionStyleNone;
        int cellWidth = [UIScreen mainScreen].bounds.size.width - 2*ASWindowPadding;

        _lbName = [UILabel new];
        _lbName.backgroundColor = [UIColor clearColor];
        _lbName.font = [UIFont systemFontOfSize:13];
        _lbName.textAlignment = NSTextAlignmentLeft;
        _lbName.frame = CGRectMake(10, 30, cellWidth - 20, 15);
        _lbName.textColor = [UIColor blackColor];
        [self addSubview:_lbName];

        UIView* line = [UIView new];
        line.backgroundColor = ASThemeColor;
        line.frame = CGRectMake(10, 47, cellWidth - 20, 1);
        [self addSubview:line];
    }
    return self;
}

- (void)renderWithItem:(ASFileItem*)item
{
    _lbName.text = item.name;
}

@end

#pragma mark- ASViewController
@interface ASViewController : UIViewController <UITableViewDelegate, UITableViewDataSource>
@property (nonatomic, strong) UITableView*                 tableView;
@property (nonatomic, strong) UIButton*                    btnClose;
@property (nonatomic, strong) NSArray*                     items;
@property (nonatomic, copy) NSString*                      rootPath;
@end

@implementation ASViewController
- (void)viewDidLoad
{
    [super viewDidLoad];

    [self prepareCtrl];
    [self loadPath:nil];
}

- (void)prepareCtrl
{
    self.view.backgroundColor = [UIColor whiteColor];

    _btnClose = [UIButton new];
    [self.view addSubview:_btnClose];
    _btnClose.backgroundColor = ASThemeColor;
    [_btnClose setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    [_btnClose setTitle:@"Close" forState:UIControlStateNormal];
    [_btnClose addTarget:self action:@selector(btnCloseClick) forControlEvents:UIControlEventTouchUpInside];

    _tableView = [UITableView new];
    [self.view addSubview:_tableView];
    _tableView.backgroundColor = [UIColor whiteColor];
    _tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    _tableView.delegate = self;
    _tableView.dataSource = self;

    _items = @[];
    _rootPath = NSHomeDirectory();
}

- (void)viewWillLayoutSubviews
{
    [super viewWillLayoutSubviews];

    int viewWidth = [UIScreen mainScreen].bounds.size.width - 2*ASWindowPadding;
    int closeWidth = 60;
    int closeHeight = 28;

    _btnClose.frame = CGRectMake(viewWidth-closeWidth-4, 4, closeWidth, closeHeight);

    CGRect tableFrame = self.view.frame;
    tableFrame.origin.y += (closeHeight+4);
    tableFrame.size.height -= (closeHeight+4);
    _tableView.frame = tableFrame;
}

- (void)btnCloseClick
{
    self.view.window.hidden = true;
}

- (void)loadPath:(NSString*)filePath
{
    NSMutableArray* files = @[].mutableCopy;

    NSFileManager* fm = [NSFileManager defaultManager];
    NSArray *groupItems = [PAirSandbox sharedInstance].groupItems;
    for (ASFileItem *groupItem in groupItems) {
        NSString *parent = [groupItem.path stringByDeletingLastPathComponent];
        if ([parent isEqualToString:filePath]) {
            filePath = _rootPath;
            break;
        }
    }

    NSString* targetPath = filePath;
    if (targetPath.length == 0 || [targetPath isEqualToString:_rootPath]) {
        targetPath = _rootPath;
        [files addObjectsFromArray:groupItems];
    }
    else
    {
        ASFileItem* file = [ASFileItem new];
        file.name = @"🔙..";
        file.type = ASFileItemUp;
        file.path = filePath;
        [files addObject:file];
    }

    NSError* err = nil;
    NSArray* paths = [fm contentsOfDirectoryAtPath:targetPath error:&err];
    for (NSString* path in paths) {

        if ([[path lastPathComponent] hasPrefix:@"."]) {
            continue;
        }

        BOOL isDir = false;
        NSString* fullPath = [targetPath stringByAppendingPathComponent:path];
        [fm fileExistsAtPath:fullPath isDirectory:&isDir];

        ASFileItem* file = [ASFileItem new];
        file.path = fullPath;
        if (isDir) {
            file.type = ASFileItemDirectory;
            file.name = [NSString stringWithFormat:@"%@ %@", @"📁", path];
        }
        else
        {
            file.type = ASFileItemFile;
            file.name = [NSString stringWithFormat:@"%@ %@", @"📄", path];
        }
        [files addObject:file];

    }
    _items = files.copy;
    [_tableView reloadData];
}

#pragma mark- UITableViewDelegate
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return _items.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.row > _items.count-1) {
        return [UITableViewCell new];
    }

    ASFileItem* item = [_items objectAtIndex:indexPath.row];

    static NSString* cellIdentifier = @"PAirSandboxCell";
    PAirSandboxCell* cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];
    if (!cell) {
        cell = [[PAirSandboxCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier];
    }
    [cell renderWithItem:item];

    return cell;
}

#pragma mark- UITableViewDataSource
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return 48;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.row > _items.count-1) {
        return;
    }

    [tableView deselectRowAtIndexPath:indexPath animated:false];

    ASFileItem* item = [_items objectAtIndex:indexPath.row];
    if (item.type == ASFileItemUp) {
        [self loadPath:[item.path stringByDeletingLastPathComponent]];
    }
    else if(item.type == ASFileItemFile) {
        [self sharePath:item.path];
    }
    else if(item.type == ASFileItemDirectory) {
        [self loadPath:item.path];
    }
}

- (void)sharePath:(NSString*)path
{
    NSURL *url = [NSURL fileURLWithPath:path];
    NSArray *objectsToShare = @[url];

    UIActivityViewController *controller = [[UIActivityViewController alloc] initWithActivityItems:objectsToShare applicationActivities:nil];
    NSArray *excludedActivities = @[UIActivityTypePostToTwitter, UIActivityTypePostToFacebook,
                                    UIActivityTypePostToWeibo,
                                    UIActivityTypeMessage, UIActivityTypeMail,
                                    UIActivityTypePrint, UIActivityTypeCopyToPasteboard,
                                    UIActivityTypeAssignToContact, UIActivityTypeSaveToCameraRoll,
                                    UIActivityTypeAddToReadingList, UIActivityTypePostToFlickr,
                                    UIActivityTypePostToVimeo, UIActivityTypePostToTencentWeibo];
    controller.excludedActivityTypes = excludedActivities;

    if ([(NSString *)[UIDevice currentDevice].model hasPrefix:@"iPad"]) {
        controller.popoverPresentationController.sourceView = self.view;
        controller.popoverPresentationController.sourceRect = CGRectMake([UIScreen mainScreen].bounds.size.width * 0.5, [UIScreen mainScreen].bounds.size.height, 10, 10);
    }
    [self presentViewController:controller animated:YES completion:nil];
}

@end

#pragma mark- PAirSandbox
@interface PAirSandbox ()
@property (nonatomic, strong) UIWindow*                         window;
@property (nonatomic, strong) ASViewController*                 ctrl;
@end

@implementation PAirSandbox

+ (instancetype)sharedInstance
{
    static PAirSandbox* instance = nil;

    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        instance = [PAirSandbox new];
    });

    return instance;
}

- (void)enableSwipe
{
    UISwipeGestureRecognizer* swipeGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(onSwipeDetected:)];
    swipeGesture.numberOfTouchesRequired = 1;
    swipeGesture.direction = (UISwipeGestureRecognizerDirectionLeft);
    [[UIApplication sharedApplication].keyWindow addGestureRecognizer:swipeGesture];
}

- (void)onSwipeDetected:(UISwipeGestureRecognizer*)gs
{
    [self showSandboxBrowser];
}

- (void)showSandboxBrowser {
    if (_window == nil) {
        _window = [UIWindow new];
        CGRect keyFrame = [UIScreen mainScreen].bounds;
        keyFrame.origin.y += 64;
        keyFrame.size.height -= 64;
        _window.frame = CGRectInset(keyFrame, ASWindowPadding, ASWindowPadding);
        _window.backgroundColor = [UIColor whiteColor];
        _window.layer.borderColor = ASThemeColor.CGColor;
        _window.layer.borderWidth = 2.0;
        _window.windowLevel = UIWindowLevelStatusBar;

        _ctrl = [ASViewController new];
        _window.rootViewController = _ctrl;
    }
    _window.hidden = false;
}

- (void)addAppGroup:(NSString *)groupId {
    if (_groupItems == nil) {
        _groupItems = @[].mutableCopy;
    }

    NSURL *groupURL = [[NSFileManager defaultManager]
                       containerURLForSecurityApplicationGroupIdentifier:groupId];

    ASFileItem* file = [ASFileItem new];
    file.path = groupURL.relativePath;
    file.type = ASFileItemDirectory;
    file.name = [NSString stringWithFormat:@"%@ %@", @"📁", groupId];
    [_groupItems addObject:file];
}
@end
#import "NSString+TUICommon.h"
#import <mach/mach.h>
#import <Accelerate/Accelerate.h>
#import <mach/mach.h>
#import <sys/types.h>
#import <sys/sysctl.h>
//#import "TCLoginParam.h"
//#import "TCConstants.h"
#import <CommonCrypto/CommonDigest.h>
@interface TCUtil ()
@end
@implementation TCUtil
+ (NSData *)dictionary2JsonData:(NSDictionary *)dict
{
    // 转成Json数据
    if ([NSJSONSerialization isValidJSONObject:dict])
    {
        NSError *error = nil;
        NSData *data = [NSJSONSerialization dataWithJSONObject:dict options:0 error:&error];
        if(error)
        {
            NSLog(@"[%@] Post Json Error", [self class]);
        }
        return data;
    }
    else
    {
        NSLog(@"[%@] Post Json is not valid", [self class]);
    }
    return nil;
}

+ (NSString *)dictionary2JsonStr:(NSDictionary *)dict {
    return [[NSString alloc] initWithData:[self dictionary2JsonData:dict] encoding:NSUTF8StringEncoding];;
}

+ (NSDictionary *)jsonSring2Dictionary:(NSString *)jsonString
{
    if (jsonString == nil) {
        return nil;
    }
    NSData *data = [jsonString dataUsingEncoding:NSUTF8StringEncoding];
    NSError *err = nil;
    NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableContainers error:&err];
    if (err || ![dic isKindOfClass:[NSDictionary class]]) {
        NSLog(@"Json parse failed: %@", jsonString);
        return nil;
    }
    return dic;
}

+ (NSDictionary *)jsonData2Dictionary:(NSData *)jsonData
{
    if (jsonData == nil) {
        return nil;
    }
    NSError *err = nil;
    NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableContainers error:&err];
    if (err || ![dic isKindOfClass:[NSDictionary class]]) {
        NSLog(@"Json parse failed");
        return nil;
    }
    return dic;
}

+ (NSString *)getFileCachePath:(NSString *)fileName
{
    if (nil == fileName)
    {
        return nil;
    }

    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);
    NSString *cacheDirectory = [paths objectAtIndex:0];

    NSString *fileFullPath = [cacheDirectory stringByAppendingPathComponent:fileName];
    return fileFullPath;
}


//通过分别计算中文和其他字符来计算长度
+ (NSUInteger)getContentLength:(NSString*)content
{
    size_t length = 0;
    for (int i = 0; i < [content length]; i++)
    {
        unichar ch = [content characterAtIndex:i];
        if (0x4e00 < ch  && ch < 0x9fff)
        {
            length += 2;
        }
        else
        {
            length++;
        }
    }

    return length;
}
+ (NSString *)md5Hash:(NSData *)data {
    unsigned char result[CC_MD5_DIGEST_LENGTH];
    CC_MD5([data bytes], (CC_LONG)[data length], result);

    return [NSString stringWithFormat:
            @"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",
            result[0], result[1], result[2], result[3], result[4], result[5], result[6], result[7],
            result[8], result[9], result[10], result[11], result[12], result[13], result[14],
            result[15]
            ];
}

+ (void)asyncSendHttpRequest:(NSString*)command token:(NSString*)token params:(NSDictionary*)params handler:(void (^)(int resultCode, NSString* message, NSDictionary* resultDict))handler
{
    dispatch_async(dispatch_get_global_queue(0, 0), ^{
        NSData* data = [TCUtil dictionary2JsonData:params];
        if (data == nil)
        {
            NSLog(@"sendHttpRequest failed，参数转成json格式失败");
            dispatch_async(dispatch_get_main_queue(), ^{
                handler(kError_ConvertJsonFailed, @"参数错误", nil);
            });
            return;
        }

        NSString* urlString = [kHttpServerAddr stringByAppendingPathComponent:command];
        NSMutableString *strUrl = [[NSMutableString alloc] initWithString:urlString];

        NSURL *URL = [NSURL URLWithString:strUrl];
        NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:URL];

        if (data)
        {
            [request setValue:[NSString stringWithFormat:@"%ld",(long)[data length]] forHTTPHeaderField:@"Content-Length"];
            [request setHTTPMethod:@"POST"];
            [request setValue:@"application/json; charset=UTF-8" forHTTPHeaderField:@"Content-Type"];
            [request setValue:@"gzip" forHTTPHeaderField:@"Accept-Encoding"];
            if (token.length > 0) {

                NSString* sig = [[NSString stringWithFormat:@"%@%@", token, [self md5Hash:data]] md5];
                [request setValue:sig forHTTPHeaderField:@"Liteav-Sig"];
            }
            [request setHTTPBody:data];
        }

        [request setTimeoutInterval:kHttpTimeout];


        NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
            if (error != nil)
            {
                NSLog(@"internalSendRequest failed，NSURLSessionDataTask return error code:%d, des:%@", [error code], [error description]);
                dispatch_async(dispatch_get_main_queue(), ^{
                    handler(kError_HttpError, @"服务请求失败", nil);
                });
            }
            else
            {
                NSString *responseString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
                NSDictionary* resultDict = [TCUtil jsonSring2Dictionary:responseString];
                int errCode = -1;
                NSString* message = @"";
                NSDictionary* dataDict = nil;
                if (resultDict)
                {
                    if (resultDict[@"code"]) {
                        errCode = [resultDict[@"code"] intValue];
                    }

                    if (resultDict[@"message"]) {
                        message = resultDict[@"message"];
                    }

                    if (200 == errCode && resultDict[@"data"])
                    {
                        dataDict = resultDict[@"data"];
                    }
                }
                dispatch_async(dispatch_get_main_queue(), ^{
                    handler(errCode, message, dataDict);
                });
            }
        }];

        [task resume];
    });
}

+ (void)asyncSendHttpRequest:(NSString*)command params:(NSDictionary*)params handler:(void (^)(int resultCode, NSString* message, NSDictionary* resultDict))handler
{
    [self asyncSendHttpRequest:command token:nil params:params handler:handler];
}


+ (void)asyncSendHttpRequest:(NSDictionary*)param handler:(void (^)(int result, NSDictionary* resultDict))handler
{
    dispatch_async(dispatch_get_global_queue(0, 0), ^{
        NSData* data = [TCUtil dictionary2JsonData:param];
        if (data == nil)
        {
            NSLog(@"sendHttpRequest failed，参数转成json格式失败");
            dispatch_async(dispatch_get_main_queue(), ^{
                handler(kError_ConvertJsonFailed, nil);
            });
            return;
        }

        NSMutableString *strUrl = [[NSMutableString alloc] initWithString:kHttpServerAddr];

        NSURL *URL = [NSURL URLWithString:strUrl];
        NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:URL];

        if (data)
        {
            [request setValue:[NSString stringWithFormat:@"%ld",(long)[data length]] forHTTPHeaderField:@"Content-Length"];
            [request setHTTPMethod:@"POST"];
            [request setValue:@"application/json; charset=UTF-8" forHTTPHeaderField:@"Content-Type"];
            [request setValue:@"gzip" forHTTPHeaderField:@"Accept-Encoding"];

            [request setHTTPBody:data];
        }

        [request setTimeoutInterval:kHttpTimeout];


        NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
            if (error != nil)
            {
                NSLog(@"internalSendRequest failed，NSURLSessionDataTask return error code:%d, des:%@", [error code], [error description]);
                dispatch_async(dispatch_get_main_queue(), ^{
                    handler(kError_HttpError, nil);
                });
            }
            else
            {
                NSString *responseString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
                NSDictionary* resultDict = [TCUtil jsonSring2Dictionary:responseString];
                int errCode = -1;
                NSDictionary* dataDict = nil;
                if (resultDict)
                {
                    if (resultDict[@"returnValue"])
                        errCode = [resultDict[@"returnValue"] intValue];

                    if (0 == errCode && resultDict[@"returnData"])
                    {
                        dataDict = resultDict[@"returnData"];
                    }
                }
                dispatch_async(dispatch_get_main_queue(), ^{
                    handler(errCode, dataDict);
                });
            }
        }];

        [task resume];
    });
}


+ (NSString *)transImageURL2HttpsURL:(NSString *)httpURL
{
    if (httpURL.length == 0) {
        return nil;
    }
    if ([NSURL URLWithString:httpURL] == nil) {
        return nil;
    }
    NSString * httpsURL = httpURL;
    if ([httpURL hasPrefix:@"http:"]) {
        httpsURL = [httpURL stringByReplacingOccurrencesOfString:@"http:" withString:@"https:"];
    }else{
        httpsURL = [NSString stringWithFormat:@"https:%@",httpURL];
    }
    return httpsURL;
}


+ (void)report:(NSString *)action actionSub:(NSString *)actionSub code:(NSNumber *)code  msg:(NSString *)msg {
    // to do
}
@end

//#import "Aspects.h"
#import <libkern/OSAtomic.h>
#import <objc/runtime.h>
#import <objc/message.h>

#define AspectLog(...)
//#define AspectLog(...) do { NSLog(__VA_ARGS__); }while(0)
#define AspectLogError(...) do { NSLog(__VA_ARGS__); }while(0)

// Block internals.
typedef NS_OPTIONS(int, AspectBlockFlags) {
    AspectBlockFlagsHasCopyDisposeHelpers = (1 << 25),
    AspectBlockFlagsHasSignature          = (1 << 30)
};
typedef struct _AspectBlock {
    __unused Class isa;
    AspectBlockFlags flags;
    __unused int reserved;
    void (__unused *invoke)(struct _AspectBlock *block, ...);
    struct {
        unsigned long int reserved;
        unsigned long int size;
        // requires AspectBlockFlagsHasCopyDisposeHelpers
        void (*copy)(void *dst, const void *src);
        void (*dispose)(const void *);
        // requires AspectBlockFlagsHasSignature
        const char *signature;
        const char *layout;
    } *descriptor;
    // imported variables
} *AspectBlockRef;

@interface AspectInfo : NSObject <AspectInfo>
- (id)initWithInstance:(__unsafe_unretained id)instance invocation:(NSInvocation *)invocation;
@property (nonatomic, unsafe_unretained, readonly) id instance;
@property (nonatomic, strong, readonly) NSArray *arguments;
@property (nonatomic, strong, readonly) NSInvocation *originalInvocation;
@end

// Tracks a single aspect.
@interface AspectIdentifier : NSObject
+ (instancetype)identifierWithSelector:(SEL)selector object:(id)object options:(AspectOptions)options block:(id)block error:(NSError **)error;
- (BOOL)invokeWithInfo:(id<AspectInfo>)info;
@property (nonatomic, assign) SEL selector;
@property (nonatomic, strong) id block;
@property (nonatomic, strong) NSMethodSignature *blockSignature;
@property (nonatomic, weak) id object;
@property (nonatomic, assign) AspectOptions options;
@end

// Tracks all aspects for an object/class.
@interface AspectsContainer : NSObject
- (void)addAspect:(AspectIdentifier *)aspect withOptions:(AspectOptions)injectPosition;
- (BOOL)removeAspect:(id)aspect;
- (BOOL)hasAspects;
@property (atomic, copy) NSArray *beforeAspects;
@property (atomic, copy) NSArray *insteadAspects;
@property (atomic, copy) NSArray *afterAspects;
@end

@interface AspectTracker : NSObject
- (id)initWithTrackedClass:(Class)trackedClass;
@property (nonatomic, strong) Class trackedClass;
@property (nonatomic, readonly) NSString *trackedClassName;
@property (nonatomic, strong) NSMutableSet *selectorNames;
@property (nonatomic, strong) NSMutableDictionary *selectorNamesToSubclassTrackers;
- (void)addSubclassTracker:(AspectTracker *)subclassTracker hookingSelectorName:(NSString *)selectorName;
- (void)removeSubclassTracker:(AspectTracker *)subclassTracker hookingSelectorName:(NSString *)selectorName;
- (BOOL)subclassHasHookedSelectorName:(NSString *)selectorName;
- (NSSet *)subclassTrackersHookingSelectorName:(NSString *)selectorName;
@end

@interface NSInvocation (Aspects)
- (NSArray *)aspects_arguments;
@end

#define AspectPositionFilter 0x07

#define AspectError(errorCode, errorDescription) do { \
AspectLogError(@"Aspects: %@", errorDescription); \
if (error) { *error = [NSError errorWithDomain:AspectErrorDomain code:errorCode userInfo:@{NSLocalizedDescriptionKey: errorDescription}]; }}while(0)

NSString *const AspectErrorDomain = @"AspectErrorDomain";
static NSString *const AspectsSubclassSuffix = @"_Aspects_";
static NSString *const AspectsMessagePrefix = @"aspects_";

@implementation NSObject (Aspects)

///////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - Public Aspects API

+ (id<AspectToken>)aspect_hookSelector:(SEL)selector
                      withOptions:(AspectOptions)options
                       usingBlock:(id)block
                            error:(NSError **)error {
    return aspect_add((id)self, selector, options, block, error);
}

/// @return A token which allows to later deregister the aspect.
- (id<AspectToken>)aspect_hookSelector:(SEL)selector
                      withOptions:(AspectOptions)options
                       usingBlock:(id)block
                            error:(NSError **)error {
    return aspect_add(self, selector, options, block, error);
}

///////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - Private Helper

static id aspect_add(id self, SEL selector, AspectOptions options, id block, NSError **error) {
    NSCParameterAssert(self);
    NSCParameterAssert(selector);
    NSCParameterAssert(block);

    __block AspectIdentifier *identifier = nil;
    aspect_performLocked(^{
        if (aspect_isSelectorAllowedAndTrack(self, selector, options, error)) {
            AspectsContainer *aspectContainer = aspect_getContainerForObject(self, selector);
            identifier = [AspectIdentifier identifierWithSelector:selector object:self options:options block:block error:error];
            if (identifier) {
                [aspectContainer addAspect:identifier withOptions:options];

                // Modify the class to allow message interception.
                aspect_prepareClassAndHookSelector(self, selector, error);
            }
        }
    });
    return identifier;
}

static BOOL aspect_remove(AspectIdentifier *aspect, NSError **error) {
    NSCAssert([aspect isKindOfClass:AspectIdentifier.class], @"Must have correct type.");

    __block BOOL success = NO;
    aspect_performLocked(^{
        id self = aspect.object; // strongify
        if (self) {
            AspectsContainer *aspectContainer = aspect_getContainerForObject(self, aspect.selector);
            success = [aspectContainer removeAspect:aspect];

            aspect_cleanupHookedClassAndSelector(self, aspect.selector);
            // destroy token
            aspect.object = nil;
            aspect.block = nil;
            aspect.selector = NULL;
        }else {
            NSString *errrorDesc = [NSString stringWithFormat:@"Unable to deregister hook. Object already deallocated: %@", aspect];
            AspectError(AspectErrorRemoveObjectAlreadyDeallocated, errrorDesc);
        }
    });
    return success;
}

static void aspect_performLocked(dispatch_block_t block) {
    static OSSpinLock aspect_lock = OS_SPINLOCK_INIT;
    OSSpinLockLock(&aspect_lock);
    block();
    OSSpinLockUnlock(&aspect_lock);
}

static SEL aspect_aliasForSelector(SEL selector) {
    NSCParameterAssert(selector);
    return NSSelectorFromString([AspectsMessagePrefix stringByAppendingFormat:@"_%@", NSStringFromSelector(selector)]);
}

static NSMethodSignature *aspect_blockMethodSignature(id block, NSError **error) {
    AspectBlockRef layout = (__bridge void *)block;
    if (!(layout->flags & AspectBlockFlagsHasSignature)) {
        NSString *description = [NSString stringWithFormat:@"The block %@ doesn't contain a type signature.", block];
        AspectError(AspectErrorMissingBlockSignature, description);
        return nil;
    }
    void *desc = layout->descriptor;
    desc += 2 * sizeof(unsigned long int);
    if (layout->flags & AspectBlockFlagsHasCopyDisposeHelpers) {
        desc += 2 * sizeof(void *);
    }
    if (!desc) {
        NSString *description = [NSString stringWithFormat:@"The block %@ doesn't has a type signature.", block];
        AspectError(AspectErrorMissingBlockSignature, description);
        return nil;
    }
    const char *signature = (*(const char **)desc);
    return [NSMethodSignature signatureWithObjCTypes:signature];
}

static BOOL aspect_isCompatibleBlockSignature(NSMethodSignature *blockSignature, id object, SEL selector, NSError **error) {
    NSCParameterAssert(blockSignature);
    NSCParameterAssert(object);
    NSCParameterAssert(selector);

    BOOL signaturesMatch = YES;
    NSMethodSignature *methodSignature = [[object class] instanceMethodSignatureForSelector:selector];
    if (blockSignature.numberOfArguments > methodSignature.numberOfArguments) {
        signaturesMatch = NO;
    }else {
        if (blockSignature.numberOfArguments > 1) {
            const char *blockType = [blockSignature getArgumentTypeAtIndex:1];
            if (blockType[0] != '@') {
                signaturesMatch = NO;
            }
        }
        // Argument 0 is self/block, argument 1 is SEL or id<AspectInfo>. We start comparing at argument 2.
        // The block can have less arguments than the method, that's ok.
        if (signaturesMatch) {
            for (NSUInteger idx = 2; idx < blockSignature.numberOfArguments; idx++) {
                const char *methodType = [methodSignature getArgumentTypeAtIndex:idx];
                const char *blockType = [blockSignature getArgumentTypeAtIndex:idx];
                // Only compare parameter, not the optional type data.
                if (!methodType || !blockType || methodType[0] != blockType[0]) {
                    signaturesMatch = NO; break;
                }
            }
        }
    }

    if (!signaturesMatch) {
        NSString *description = [NSString stringWithFormat:@"Block signature %@ doesn't match %@.", blockSignature, methodSignature];
        AspectError(AspectErrorIncompatibleBlockSignature, description);
        return NO;
    }
    return YES;
}

///////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - Class + Selector Preparation

static BOOL aspect_isMsgForwardIMP(IMP impl) {
    return impl == _objc_msgForward
#if !defined(__arm64__)
    || impl == (IMP)_objc_msgForward_stret
#endif
    ;
}

static IMP aspect_getMsgForwardIMP(NSObject *self, SEL selector) {
    IMP msgForwardIMP = _objc_msgForward;
#if !defined(__arm64__)
    // As an ugly internal runtime implementation detail in the 32bit runtime, we need to determine of the method we hook returns a struct or anything larger than id.
    // https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/LowLevelABI/000-Introduction/introduction.html
    // https://github.com/ReactiveCocoa/ReactiveCocoa/issues/783
    // http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042e/IHI0042E_aapcs.pdf (Section 5.4)
    Method method = class_getInstanceMethod(self.class, selector);
    const char *encoding = method_getTypeEncoding(method);
    BOOL methodReturnsStructValue = encoding[0] == _C_STRUCT_B;
    if (methodReturnsStructValue) {
        @try {
            NSUInteger valueSize = 0;
            NSGetSizeAndAlignment(encoding, &valueSize, NULL);

            if (valueSize == 1 || valueSize == 2 || valueSize == 4 || valueSize == 8) {
                methodReturnsStructValue = NO;
            }
        } @catch (__unused NSException *e) {}
    }
    if (methodReturnsStructValue) {
        msgForwardIMP = (IMP)_objc_msgForward_stret;
    }
#endif
    return msgForwardIMP;
}

static void aspect_prepareClassAndHookSelector(NSObject *self, SEL selector, NSError **error) {
    NSCParameterAssert(selector);
    Class klass = aspect_hookClass(self, error);
    Method targetMethod = class_getInstanceMethod(klass, selector);
    IMP targetMethodIMP = method_getImplementation(targetMethod);
    if (!aspect_isMsgForwardIMP(targetMethodIMP)) {
        // Make a method alias for the existing method implementation, it not already copied.
        const char *typeEncoding = method_getTypeEncoding(targetMethod);
        SEL aliasSelector = aspect_aliasForSelector(selector);
        if (![klass instancesRespondToSelector:aliasSelector]) {
            __unused BOOL addedAlias = class_addMethod(klass, aliasSelector, method_getImplementation(targetMethod), typeEncoding);
            NSCAssert(addedAlias, @"Original implementation for %@ is already copied to %@ on %@", NSStringFromSelector(selector), NSStringFromSelector(aliasSelector), klass);
        }

        // We use forwardInvocation to hook in.
        class_replaceMethod(klass, selector, aspect_getMsgForwardIMP(self, selector), typeEncoding);
        AspectLog(@"Aspects: Installed hook for -[%@ %@].", klass, NSStringFromSelector(selector));
    }
}

// Will undo the runtime changes made.
static void aspect_cleanupHookedClassAndSelector(NSObject *self, SEL selector) {
    NSCParameterAssert(self);
    NSCParameterAssert(selector);

    Class klass = object_getClass(self);
    BOOL isMetaClass = class_isMetaClass(klass);
    if (isMetaClass) {
        klass = (Class)self;
    }

    // Check if the method is marked as forwarded and undo that.
    Method targetMethod = class_getInstanceMethod(klass, selector);
    IMP targetMethodIMP = method_getImplementation(targetMethod);
    if (aspect_isMsgForwardIMP(targetMethodIMP)) {
        // Restore the original method implementation.
        const char *typeEncoding = method_getTypeEncoding(targetMethod);
        SEL aliasSelector = aspect_aliasForSelector(selector);
        Method originalMethod = class_getInstanceMethod(klass, aliasSelector);
        IMP originalIMP = method_getImplementation(originalMethod);
        NSCAssert(originalMethod, @"Original implementation for %@ not found %@ on %@", NSStringFromSelector(selector), NSStringFromSelector(aliasSelector), klass);

        class_replaceMethod(klass, selector, originalIMP, typeEncoding);
        AspectLog(@"Aspects: Removed hook for -[%@ %@].", klass, NSStringFromSelector(selector));
    }

    // Deregister global tracked selector
    aspect_deregisterTrackedSelector(self, selector);

    // Get the aspect container and check if there are any hooks remaining. Clean up if there are not.
    AspectsContainer *container = aspect_getContainerForObject(self, selector);
    if (!container.hasAspects) {
        // Destroy the container
        aspect_destroyContainerForObject(self, selector);

        // Figure out how the class was modified to undo the changes.
        NSString *className = NSStringFromClass(klass);
        if ([className hasSuffix:AspectsSubclassSuffix]) {
            Class originalClass = NSClassFromString([className stringByReplacingOccurrencesOfString:AspectsSubclassSuffix withString:@""]);
            NSCAssert(originalClass != nil, @"Original class must exist");
            object_setClass(self, originalClass);
            AspectLog(@"Aspects: %@ has been restored.", NSStringFromClass(originalClass));

            // We can only dispose the class pair if we can ensure that no instances exist using our subclass.
            // Since we don't globally track this, we can't ensure this - but there's also not much overhead in keeping it around.
            //objc_disposeClassPair(object.class);
        }else {
            // Class is most likely swizzled in place. Undo that.
            if (isMetaClass) {
                aspect_undoSwizzleClassInPlace((Class)self);
            }else if (self.class != klass) {
                aspect_undoSwizzleClassInPlace(klass);
            }
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - Hook Class

static Class aspect_hookClass(NSObject *self, NSError **error) {
    NSCParameterAssert(self);
    Class statedClass = self.class;
    Class baseClass = object_getClass(self);
    NSString *className = NSStringFromClass(baseClass);

    // Already subclassed
    if ([className hasSuffix:AspectsSubclassSuffix]) {
        return baseClass;

        // We swizzle a class object, not a single object.
    }else if (class_isMetaClass(baseClass)) {
        return aspect_swizzleClassInPlace((Class)self);
        // Probably a KVO'ed class. Swizzle in place. Also swizzle meta classes in place.
    }else if (statedClass != baseClass) {
        return aspect_swizzleClassInPlace(baseClass);
    }

    // Default case. Create dynamic subclass.
    const char *subclassName = [className stringByAppendingString:AspectsSubclassSuffix].UTF8String;
    Class subclass = objc_getClass(subclassName);

    if (subclass == nil) {
        subclass = objc_allocateClassPair(baseClass, subclassName, 0);
        if (subclass == nil) {
            NSString *errrorDesc = [NSString stringWithFormat:@"objc_allocateClassPair failed to allocate class %s.", subclassName];
            AspectError(AspectErrorFailedToAllocateClassPair, errrorDesc);
            return nil;
        }

        aspect_swizzleForwardInvocation(subclass);
        aspect_hookedGetClass(subclass, statedClass);
        aspect_hookedGetClass(object_getClass(subclass), statedClass);
        objc_registerClassPair(subclass);
    }

    object_setClass(self, subclass);
    return subclass;
}

static NSString *const AspectsForwardInvocationSelectorName = @"__aspects_forwardInvocation:";
static void aspect_swizzleForwardInvocation(Class klass) {
    NSCParameterAssert(klass);
    // If there is no method, replace will act like class_addMethod.
    IMP originalImplementation = class_replaceMethod(klass, @selector(forwardInvocation:), (IMP)__ASPECTS_ARE_BEING_CALLED__, "v@:@");
    if (originalImplementation) {
        class_addMethod(klass, NSSelectorFromString(AspectsForwardInvocationSelectorName), originalImplementation, "v@:@");
    }
    AspectLog(@"Aspects: %@ is now aspect aware.", NSStringFromClass(klass));
}

static void aspect_undoSwizzleForwardInvocation(Class klass) {
    NSCParameterAssert(klass);
    Method originalMethod = class_getInstanceMethod(klass, NSSelectorFromString(AspectsForwardInvocationSelectorName));
    Method objectMethod = class_getInstanceMethod(NSObject.class, @selector(forwardInvocation:));
    // There is no class_removeMethod, so the best we can do is to retore the original implementation, or use a dummy.
    IMP originalImplementation = method_getImplementation(originalMethod ?: objectMethod);
    class_replaceMethod(klass, @selector(forwardInvocation:), originalImplementation, "v@:@");

    AspectLog(@"Aspects: %@ has been restored.", NSStringFromClass(klass));
}

static void aspect_hookedGetClass(Class class, Class statedClass) {
    NSCParameterAssert(class);
    NSCParameterAssert(statedClass);
    Method method = class_getInstanceMethod(class, @selector(class));
    IMP newIMP = imp_implementationWithBlock(^(id self) {
        return statedClass;
    });
    class_replaceMethod(class, @selector(class), newIMP, method_getTypeEncoding(method));
}

///////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - Swizzle Class In Place

static void _aspect_modifySwizzledClasses(void (^block)(NSMutableSet *swizzledClasses)) {
    static NSMutableSet *swizzledClasses;
    static dispatch_once_t pred;
    dispatch_once(&pred, ^{
        swizzledClasses = [NSMutableSet new];
    });
    @synchronized(swizzledClasses) {
        block(swizzledClasses);
    }
}

static Class aspect_swizzleClassInPlace(Class klass) {
    NSCParameterAssert(klass);
    NSString *className = NSStringFromClass(klass);

    _aspect_modifySwizzledClasses(^(NSMutableSet *swizzledClasses) {
        if (![swizzledClasses containsObject:className]) {
            aspect_swizzleForwardInvocation(klass);
            [swizzledClasses addObject:className];
        }
    });
    return klass;
}

static void aspect_undoSwizzleClassInPlace(Class klass) {
    NSCParameterAssert(klass);
    NSString *className = NSStringFromClass(klass);

    _aspect_modifySwizzledClasses(^(NSMutableSet *swizzledClasses) {
        if ([swizzledClasses containsObject:className]) {
            aspect_undoSwizzleForwardInvocation(klass);
            [swizzledClasses removeObject:className];
        }
    });
}

///////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - Aspect Invoke Point

// This is a macro so we get a cleaner stack trace.
#define aspect_invoke(aspects, info) \
for (AspectIdentifier *aspect in aspects) {\
    [aspect invokeWithInfo:info];\
    if (aspect.options & AspectOptionAutomaticRemoval) { \
        aspectsToRemove = [aspectsToRemove?:@[] arrayByAddingObject:aspect]; \
    } \
}

// This is the swizzled forwardInvocation: method.
static void __ASPECTS_ARE_BEING_CALLED__(__unsafe_unretained NSObject *self, SEL selector, NSInvocation *invocation) {
    NSCParameterAssert(self);
    NSCParameterAssert(invocation);
    SEL originalSelector = invocation.selector;
    SEL aliasSelector = aspect_aliasForSelector(invocation.selector);
    invocation.selector = aliasSelector;
    AspectsContainer *objectContainer = objc_getAssociatedObject(self, aliasSelector);
    AspectsContainer *classContainer = aspect_getContainerForClass(object_getClass(self), aliasSelector);
    AspectInfo *info = [[AspectInfo alloc] initWithInstance:self invocation:invocation];
    NSArray *aspectsToRemove = nil;

    // Before hooks.
    aspect_invoke(classContainer.beforeAspects, info);
    aspect_invoke(objectContainer.beforeAspects, info);

    // Instead hooks.
    BOOL respondsToAlias = YES;
    if (objectContainer.insteadAspects.count || classContainer.insteadAspects.count) {
        aspect_invoke(classContainer.insteadAspects, info);
        aspect_invoke(objectContainer.insteadAspects, info);
    }else {
        Class klass = object_getClass(invocation.target);
        do {
            if ((respondsToAlias = [klass instancesRespondToSelector:aliasSelector])) {
                [invocation invoke];
                break;
            }
        }while (!respondsToAlias && (klass = class_getSuperclass(klass)));
    }

    // After hooks.
    aspect_invoke(classContainer.afterAspects, info);
    aspect_invoke(objectContainer.afterAspects, info);

    // If no hooks are installed, call original implementation (usually to throw an exception)
    if (!respondsToAlias) {
        invocation.selector = originalSelector;
        SEL originalForwardInvocationSEL = NSSelectorFromString(AspectsForwardInvocationSelectorName);
        if ([self respondsToSelector:originalForwardInvocationSEL]) {
            ((void( *)(id, SEL, NSInvocation *))objc_msgSend)(self, originalForwardInvocationSEL, invocation);
        }else {
            [self doesNotRecognizeSelector:invocation.selector];
        }
    }

    // Remove any hooks that are queued for deregistration.
    [aspectsToRemove makeObjectsPerformSelector:@selector(remove)];
}
#undef aspect_invoke

///////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - Aspect Container Management

// Loads or creates the aspect container.
static AspectsContainer *aspect_getContainerForObject(NSObject *self, SEL selector) {
    NSCParameterAssert(self);
    SEL aliasSelector = aspect_aliasForSelector(selector);
    AspectsContainer *aspectContainer = objc_getAssociatedObject(self, aliasSelector);
    if (!aspectContainer) {
        aspectContainer = [AspectsContainer new];
        objc_setAssociatedObject(self, aliasSelector, aspectContainer, OBJC_ASSOCIATION_RETAIN);
    }
    return aspectContainer;
}

static AspectsContainer *aspect_getContainerForClass(Class klass, SEL selector) {
    NSCParameterAssert(klass);
    AspectsContainer *classContainer = nil;
    do {
        classContainer = objc_getAssociatedObject(klass, selector);
        if (classContainer.hasAspects) break;
    }while ((klass = class_getSuperclass(klass)));

    return classContainer;
}

static void aspect_destroyContainerForObject(id<NSObject> self, SEL selector) {
    NSCParameterAssert(self);
    SEL aliasSelector = aspect_aliasForSelector(selector);
    objc_setAssociatedObject(self, aliasSelector, nil, OBJC_ASSOCIATION_RETAIN);
}

///////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - Selector Blacklist Checking

static NSMutableDictionary *aspect_getSwizzledClassesDict() {
    static NSMutableDictionary *swizzledClassesDict;
    static dispatch_once_t pred;
    dispatch_once(&pred, ^{
        swizzledClassesDict = [NSMutableDictionary new];
    });
    return swizzledClassesDict;
}

static BOOL aspect_isSelectorAllowedAndTrack(NSObject *self, SEL selector, AspectOptions options, NSError **error) {
    static NSSet *disallowedSelectorList;
    static dispatch_once_t pred;
    dispatch_once(&pred, ^{
        disallowedSelectorList = [NSSet setWithObjects:@"retain", @"release", @"autorelease", @"forwardInvocation:", nil];
    });

    // Check against the blacklist.
    NSString *selectorName = NSStringFromSelector(selector);
    if ([disallowedSelectorList containsObject:selectorName]) {
        NSString *errorDescription = [NSString stringWithFormat:@"Selector %@ is blacklisted.", selectorName];
        AspectError(AspectErrorSelectorBlacklisted, errorDescription);
        return NO;
    }

    // Additional checks.
    AspectOptions position = options&AspectPositionFilter;
    if ([selectorName isEqualToString:@"dealloc"] && position != AspectPositionBefore) {
        NSString *errorDesc = @"AspectPositionBefore is the only valid position when hooking dealloc.";
        AspectError(AspectErrorSelectorDeallocPosition, errorDesc);
        return NO;
    }

    if (![self respondsToSelector:selector] && ![self.class instancesRespondToSelector:selector]) {
        NSString *errorDesc = [NSString stringWithFormat:@"Unable to find selector -[%@ %@].", NSStringFromClass(self.class), selectorName];
        AspectError(AspectErrorDoesNotRespondToSelector, errorDesc);
        return NO;
    }

    // Search for the current class and the class hierarchy IF we are modifying a class object
    if (class_isMetaClass(object_getClass(self))) {
        Class klass = [self class];
        NSMutableDictionary *swizzledClassesDict = aspect_getSwizzledClassesDict();
        Class currentClass = [self class];

        AspectTracker *tracker = swizzledClassesDict[currentClass];
        if ([tracker subclassHasHookedSelectorName:selectorName]) {
            NSSet *subclassTracker = [tracker subclassTrackersHookingSelectorName:selectorName];
            NSSet *subclassNames = [subclassTracker valueForKey:@"trackedClassName"];
            NSString *errorDescription = [NSString stringWithFormat:@"Error: %@ already hooked subclasses: %@. A method can only be hooked once per class hierarchy.", selectorName, subclassNames];
            AspectError(AspectErrorSelectorAlreadyHookedInClassHierarchy, errorDescription);
            return NO;
        }

        do {
            tracker = swizzledClassesDict[currentClass];
            if ([tracker.selectorNames containsObject:selectorName]) {
                if (klass == currentClass) {
                    // Already modified and topmost!
                    return YES;
                }
                NSString *errorDescription = [NSString stringWithFormat:@"Error: %@ already hooked in %@. A method can only be hooked once per class hierarchy.", selectorName, NSStringFromClass(currentClass)];
                AspectError(AspectErrorSelectorAlreadyHookedInClassHierarchy, errorDescription);
                return NO;
            }
        } while ((currentClass = class_getSuperclass(currentClass)));

        // Add the selector as being modified.
        currentClass = klass;
        AspectTracker *subclassTracker = nil;
        do {
            tracker = swizzledClassesDict[currentClass];
            if (!tracker) {
                tracker = [[AspectTracker alloc] initWithTrackedClass:currentClass];
                swizzledClassesDict[(id<NSCopying>)currentClass] = tracker;
            }
            if (subclassTracker) {
                [tracker addSubclassTracker:subclassTracker hookingSelectorName:selectorName];
            } else {
                [tracker.selectorNames addObject:selectorName];
            }

            // All superclasses get marked as having a subclass that is modified.
            subclassTracker = tracker;
        }while ((currentClass = class_getSuperclass(currentClass)));
    } else {
        return YES;
    }

    return YES;
}

static void aspect_deregisterTrackedSelector(id self, SEL selector) {
    if (!class_isMetaClass(object_getClass(self))) return;

    NSMutableDictionary *swizzledClassesDict = aspect_getSwizzledClassesDict();
    NSString *selectorName = NSStringFromSelector(selector);
    Class currentClass = [self class];
    AspectTracker *subclassTracker = nil;
    do {
        AspectTracker *tracker = swizzledClassesDict[currentClass];
        if (subclassTracker) {
            [tracker removeSubclassTracker:subclassTracker hookingSelectorName:selectorName];
        } else {
            [tracker.selectorNames removeObject:selectorName];
        }
        if (tracker.selectorNames.count == 0 && tracker.selectorNamesToSubclassTrackers) {
            [swizzledClassesDict removeObjectForKey:currentClass];
        }
        subclassTracker = tracker;
    }while ((currentClass = class_getSuperclass(currentClass)));
}

@end

@implementation AspectTracker

- (id)initWithTrackedClass:(Class)trackedClass {
    if (self = [super init]) {
        _trackedClass = trackedClass;
        _selectorNames = [NSMutableSet new];
        _selectorNamesToSubclassTrackers = [NSMutableDictionary new];
    }
    return self;
}

- (BOOL)subclassHasHookedSelectorName:(NSString *)selectorName {
    return self.selectorNamesToSubclassTrackers[selectorName] != nil;
}

- (void)addSubclassTracker:(AspectTracker *)subclassTracker hookingSelectorName:(NSString *)selectorName {
    NSMutableSet *trackerSet = self.selectorNamesToSubclassTrackers[selectorName];
    if (!trackerSet) {
        trackerSet = [NSMutableSet new];
        self.selectorNamesToSubclassTrackers[selectorName] = trackerSet;
    }
    [trackerSet addObject:subclassTracker];
}
- (void)removeSubclassTracker:(AspectTracker *)subclassTracker hookingSelectorName:(NSString *)selectorName {
    NSMutableSet *trackerSet = self.selectorNamesToSubclassTrackers[selectorName];
    [trackerSet removeObject:subclassTracker];
    if (trackerSet.count == 0) {
        [self.selectorNamesToSubclassTrackers removeObjectForKey:selectorName];
    }
}
- (NSSet *)subclassTrackersHookingSelectorName:(NSString *)selectorName {
    NSMutableSet *hookingSubclassTrackers = [NSMutableSet new];
    for (AspectTracker *tracker in self.selectorNamesToSubclassTrackers[selectorName]) {
        if ([tracker.selectorNames containsObject:selectorName]) {
            [hookingSubclassTrackers addObject:tracker];
        }
        [hookingSubclassTrackers unionSet:[tracker subclassTrackersHookingSelectorName:selectorName]];
    }
    return hookingSubclassTrackers;
}
- (NSString *)trackedClassName {
    return NSStringFromClass(self.trackedClass);
}

- (NSString *)description {
    return [NSString stringWithFormat:@"<%@: %@, trackedClass: %@, selectorNames:%@, subclass selector names: %@>", self.class, self, NSStringFromClass(self.trackedClass), self.selectorNames, self.selectorNamesToSubclassTrackers.allKeys];
}

@end

///////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - NSInvocation (Aspects)

@implementation NSInvocation (Aspects)

// Thanks to the ReactiveCocoa team for providing a generic solution for this.
- (id)aspect_argumentAtIndex:(NSUInteger)index {
    const char *argType = [self.methodSignature getArgumentTypeAtIndex:index];
    // Skip const type qualifier.
    if (argType[0] == _C_CONST) argType++;

#define WRAP_AND_RETURN(type) do { type val = 0; [self getArgument:&val atIndex:(NSInteger)index]; return @(val); } while (0)
    if (strcmp(argType, @encode(id)) == 0 || strcmp(argType, @encode(Class)) == 0) {
        __autoreleasing id returnObj;
        [self getArgument:&returnObj atIndex:(NSInteger)index];
        return returnObj;
    } else if (strcmp(argType, @encode(SEL)) == 0) {
        SEL selector = 0;
        [self getArgument:&selector atIndex:(NSInteger)index];
        return NSStringFromSelector(selector);
    } else if (strcmp(argType, @encode(Class)) == 0) {
        __autoreleasing Class theClass = Nil;
        [self getArgument:&theClass atIndex:(NSInteger)index];
        return theClass;
        // Using this list will box the number with the appropriate constructor, instead of the generic NSValue.
    } else if (strcmp(argType, @encode(char)) == 0) {
        WRAP_AND_RETURN(char);
    } else if (strcmp(argType, @encode(int)) == 0) {
        WRAP_AND_RETURN(int);
    } else if (strcmp(argType, @encode(short)) == 0) {
        WRAP_AND_RETURN(short);
    } else if (strcmp(argType, @encode(long)) == 0) {
        WRAP_AND_RETURN(long);
    } else if (strcmp(argType, @encode(long long)) == 0) {
        WRAP_AND_RETURN(long long);
    } else if (strcmp(argType, @encode(unsigned char)) == 0) {
        WRAP_AND_RETURN(unsigned char);
    } else if (strcmp(argType, @encode(unsigned int)) == 0) {
        WRAP_AND_RETURN(unsigned int);
    } else if (strcmp(argType, @encode(unsigned short)) == 0) {
        WRAP_AND_RETURN(unsigned short);
    } else if (strcmp(argType, @encode(unsigned long)) == 0) {
        WRAP_AND_RETURN(unsigned long);
    } else if (strcmp(argType, @encode(unsigned long long)) == 0) {
        WRAP_AND_RETURN(unsigned long long);
    } else if (strcmp(argType, @encode(float)) == 0) {
        WRAP_AND_RETURN(float);
    } else if (strcmp(argType, @encode(double)) == 0) {
        WRAP_AND_RETURN(double);
    } else if (strcmp(argType, @encode(BOOL)) == 0) {
        WRAP_AND_RETURN(BOOL);
    } else if (strcmp(argType, @encode(bool)) == 0) {
        WRAP_AND_RETURN(BOOL);
    } else if (strcmp(argType, @encode(char *)) == 0) {
        WRAP_AND_RETURN(const char *);
    } else if (strcmp(argType, @encode(void (^)(void))) == 0) {
        __unsafe_unretained id block = nil;
        [self getArgument:&block atIndex:(NSInteger)index];
        return [block copy];
    } else {
        NSUInteger valueSize = 0;
        NSGetSizeAndAlignment(argType, &valueSize, NULL);

        unsigned char valueBytes[valueSize];
        [self getArgument:valueBytes atIndex:(NSInteger)index];

        return [NSValue valueWithBytes:valueBytes objCType:argType];
    }
    return nil;
#undef WRAP_AND_RETURN
}

- (NSArray *)aspects_arguments {
    NSMutableArray *argumentsArray = [NSMutableArray array];
    for (NSUInteger idx = 2; idx < self.methodSignature.numberOfArguments; idx++) {
        [argumentsArray addObject:[self aspect_argumentAtIndex:idx] ?: NSNull.null];
    }
    return [argumentsArray copy];
}

@end

///////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - AspectIdentifier

@implementation AspectIdentifier

+ (instancetype)identifierWithSelector:(SEL)selector object:(id)object options:(AspectOptions)options block:(id)block error:(NSError **)error {
    NSCParameterAssert(block);
    NSCParameterAssert(selector);
    NSMethodSignature *blockSignature = aspect_blockMethodSignature(block, error); // TODO: check signature compatibility, etc.
    if (!aspect_isCompatibleBlockSignature(blockSignature, object, selector, error)) {
        return nil;
    }

    AspectIdentifier *identifier = nil;
    if (blockSignature) {
        identifier = [AspectIdentifier new];
        identifier.selector = selector;
        identifier.block = block;
        identifier.blockSignature = blockSignature;
        identifier.options = options;
        identifier.object = object; // weak
    }
    return identifier;
}

- (BOOL)invokeWithInfo:(id<AspectInfo>)info {
    NSInvocation *blockInvocation = [NSInvocation invocationWithMethodSignature:self.blockSignature];
    NSInvocation *originalInvocation = info.originalInvocation;
    NSUInteger numberOfArguments = self.blockSignature.numberOfArguments;

    // Be extra paranoid. We already check that on hook registration.
    if (numberOfArguments > originalInvocation.methodSignature.numberOfArguments) {
        AspectLogError(@"Block has too many arguments. Not calling %@", info);
        return NO;
    }

    // The `self` of the block will be the AspectInfo. Optional.
    if (numberOfArguments > 1) {
        [blockInvocation setArgument:&info atIndex:1];
    }

    void *argBuf = NULL;
    for (NSUInteger idx = 2; idx < numberOfArguments; idx++) {
        const char *type = [originalInvocation.methodSignature getArgumentTypeAtIndex:idx];
        NSUInteger argSize;
        NSGetSizeAndAlignment(type, &argSize, NULL);

        if (!(argBuf = reallocf(argBuf, argSize))) {
            AspectLogError(@"Failed to allocate memory for block invocation.");
            return NO;
        }

        [originalInvocation getArgument:argBuf atIndex:idx];
        [blockInvocation setArgument:argBuf atIndex:idx];
    }

    [blockInvocation invokeWithTarget:self.block];

    if (argBuf != NULL) {
        free(argBuf);
    }
    return YES;
}

- (NSString *)description {
    return [NSString stringWithFormat:@"<%@: %p, SEL:%@ object:%@ options:%tu block:%@ (#%tu args)>", self.class, self, NSStringFromSelector(self.selector), self.object, self.options, self.block, self.blockSignature.numberOfArguments];
}

- (BOOL)remove {
    return aspect_remove(self, NULL);
}

@end

///////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - AspectsContainer

@implementation AspectsContainer

- (BOOL)hasAspects {
    return self.beforeAspects.count > 0 || self.insteadAspects.count > 0 || self.afterAspects.count > 0;
}

- (void)addAspect:(AspectIdentifier *)aspect withOptions:(AspectOptions)options {
    NSParameterAssert(aspect);
    NSUInteger position = options&AspectPositionFilter;
    switch (position) {
        case AspectPositionBefore:  self.beforeAspects  = [(self.beforeAspects ?:@[]) arrayByAddingObject:aspect]; break;
        case AspectPositionInstead: self.insteadAspects = [(self.insteadAspects?:@[]) arrayByAddingObject:aspect]; break;
        case AspectPositionAfter:   self.afterAspects   = [(self.afterAspects  ?:@[]) arrayByAddingObject:aspect]; break;
    }
}

- (BOOL)removeAspect:(id)aspect {
    for (NSString *aspectArrayName in @[NSStringFromSelector(@selector(beforeAspects)),
                                        NSStringFromSelector(@selector(insteadAspects)),
                                        NSStringFromSelector(@selector(afterAspects))]) {
        NSArray *array = [self valueForKey:aspectArrayName];
        NSUInteger index = [array indexOfObjectIdenticalTo:aspect];
        if (array && index != NSNotFound) {
            NSMutableArray *newArray = [NSMutableArray arrayWithArray:array];
            [newArray removeObjectAtIndex:index];
            [self setValue:newArray forKey:aspectArrayName];
            return YES;
        }
    }
    return NO;
}

- (NSString *)description {
    return [NSString stringWithFormat:@"<%@: %p, before:%@, instead:%@, after:%@>", self.class, self, self.beforeAspects, self.insteadAspects, self.afterAspects];
}

@end

///////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - AspectInfo

@implementation AspectInfo

@synthesize arguments = _arguments;

- (id)initWithInstance:(__unsafe_unretained id)instance invocation:(NSInvocation *)invocation {
    NSCParameterAssert(instance);
    NSCParameterAssert(invocation);
    if (self = [super init]) {
        _instance = instance;
        _originalInvocation = invocation;
    }
    return self;
}

- (NSArray *)arguments {
    // Lazily evaluate arguments, boxing is expensive.
    if (!_arguments) {
        _arguments = self.originalInvocation.aspects_arguments;
    }
    return _arguments;
}

@end

// 聊天cell的界面功能

@interface GroupCreateCellData ()

@end

@implementation GroupCreateCellData

@end

@interface MyCustomCellData ()

@end
 
@implementation MyCustomCellData
- (CGSize)contentSize
{
    CGRect rect = [self.text boundingRectWithSize:CGSizeMake(300, MAXFLOAT) options:NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading attributes:@{ NSFontAttributeName : [UIFont systemFontOfSize:15] } context:nil];
    CGSize size = CGSizeMake(ceilf(rect.size.width)+1, ceilf(rect.size.height));

    // 加上气泡边距
    size.height += 60;
    size.width += 20;

    return size;
}
@end

@interface MyCustomCell ()


@end

@implementation MyCustomCell

- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier
{
    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
    if (self) {
        self.container.backgroundColor = [UIColor d_colorWithColorLight:TCell_Nomal dark:TCell_Nomal_Dark];
        
        _myTextLabel = [[UILabel alloc] init];
        _myTextLabel.numberOfLines = 0;
        _myTextLabel.font = [UIFont systemFontOfSize:15];
        _myTextLabel.textColor = [UIColor d_colorWithColorLight:TText_Color dark:TText_Color_Dark];
        [self.container addSubview:_myTextLabel];

        _myLinkLabel = [[UILabel alloc] initWithFrame:CGRectZero];
        _myLinkLabel.text = NSLocalizedString(@"MoreCustomViewDetails", nil); // @"查看详情>>";
        _myLinkLabel.font = [UIFont systemFontOfSize:15];
        _myLinkLabel.textColor = [UIColor d_systemBlueColor];
        [self.container addSubview:_myLinkLabel];

        [self.container.layer setMasksToBounds:YES];
        [self.container.layer setBorderColor:[UIColor d_systemGrayColor].CGColor];
        [self.container.layer setBorderWidth:1];
        [self.container.layer setCornerRadius:5];
    }
    return self;
}

- (void)fillWithData:(MyCustomCellData *)data;
{
    [super fillWithData:data];
    self.customData = data;
    self.myTextLabel.text = data.text;
}

- (void)layoutSubviews
{
    [super layoutSubviews];
    self.myTextLabel.mm_top(10).mm_left(10).mm_flexToRight(10).mm_flexToBottom(50);
    self.myLinkLabel.mm_sizeToFit().mm_left(10).mm_bottom(10);
}

@end

@interface GroupCreateCell()

@end

@implementation GroupCreateCell

- (void)fillWithData:(GroupCreateCellData *)data;
{
    [super fillWithData:data];
}
@end


// 聊天界面用到的Controller
@implementation TUIInputBar (Cxshareldstaretl)

- (void)defaultLayout {
    self.lineView.frame = CGRectMake(0, 0, 0, 0);
    CGSize buttonSize = TTextView_Button_Size;
    CGFloat buttonOriginY = (TTextView_Height - buttonSize.height) * 0.5;
    self.faceButton.frame = CGRectMake(Screen_Width - TTextView_Margin - buttonSize.width, buttonOriginY + 2, buttonSize.width, buttonSize.height);
    self.moreButton.frame = CGRectMake(Screen_Width - TTextView_Margin - buttonSize.width-40, buttonOriginY + 2, buttonSize.width, buttonSize.height);
    self.inputTextView.textColor = [UIColor whiteColor];
    self.inputTextView.frame = CGRectMake(TTextView_Margin, TTextView_Margin, Screen_Width - TTextView_Margin * 2 - buttonSize.width-60, TTextView_TextView_Height_Min);
    self.inputTextView.backgroundColor = RGB(50, 50, 50);
    self.inputTextView.textContainerInset = UIEdgeInsetsMake(10, 5, 10, 5);
    [self.inputTextView.layer setMasksToBounds:YES];
    [self.inputTextView.layer setCornerRadius:20];
    [self.inputTextView.layer setBorderWidth:0];
    UILabel *placeholderLabel = [[UILabel alloc] init];
    placeholderLabel.text = @"Message here...";
    placeholderLabel.font = [UIFont systemFontOfSize:15.f];
    placeholderLabel.textColor = RGB(157, 157, 157);
    placeholderLabel.numberOfLines = 0;
    [placeholderLabel sizeToFit];
    [self.inputTextView addSubview:placeholderLabel];
    [self.inputTextView setValue:placeholderLabel forKey:@"_placeholderLabel"];

    self.backgroundColor = [UIColor blackColor];
    
    [self.faceButton setImage:[UIImage imageNamed:TUIKitResource(@"im_send_all")] forState:UIControlStateNormal];
    [self.faceButton setImage:[UIImage imageNamed:TUIKitResource(@"im_send_all")] forState:UIControlStateHighlighted];
    
    [self.moreButton setImage:[UIImage imageNamed:TUIKitResource(@"im_send_picture")] forState:UIControlStateNormal];
    [self.moreButton setImage:[UIImage imageNamed:TUIKitResource(@"im_send_picture")] forState:UIControlStateHighlighted];
}

@end


@interface GroupInfoController ()<TGroupInfoControllerDelegate>

@end

@implementation GroupInfoController
- (void)viewDidLoad {
    [super viewDidLoad];
    TUIGroupInfoController *info = [[TUIGroupInfoController alloc] init];
    info.groupId = _groupId;
    info.delegate = self;
    info.view.frame = self.view.bounds;
    [self addChildViewController:info];
    [self.view addSubview:info.view];
    self.title = NSLocalizedString(@"ProfileDetails", nil); // @"详细资料";
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
}

/**
 *点击 群成员 按钮后的响应函数
 */
- (void)groupInfoController:(TUIGroupInfoController *)controller didSelectMembersInGroup:(NSString *)groupId
{
    GroupMemberController *membersController = [[GroupMemberController alloc] init];
    membersController.groupId = groupId;
    membersController.title = NSLocalizedString(@"GroupMember", nil); // @"群成员";
    [self.navigationController pushViewController:membersController animated:YES];
}

/**
 *点击添加群成员后的响应函数->进入添加群成员视图
 */
- (void)groupInfoController:(TUIGroupInfoController *)controller didAddMembersInGroup:(NSString *)groupId members:(NSArray<TGroupMemberCellData *> *)members
{
    TUIContactSelectController *vc = [[TUIContactSelectController alloc] initWithNibName:nil bundle:nil];
    vc.title = NSLocalizedString(@"GroupAddFirend", nil); // @"添加联系人";
    vc.viewModel.disableFilter = ^BOOL(TCommonContactSelectCellData *data) {
        for (TGroupMemberCellData *cd in members) {
            if ([cd.identifier isEqualToString:data.identifier])
                return YES;
        }
        return NO;
    };
    @weakify(self)
    [self.navigationController pushViewController:vc animated:YES];
    //添加成功后默认返回群组聊天界面
    vc.finishBlock = ^(NSArray<TCommonContactSelectCellData *> *selectArray) {
        @strongify(self)
        NSMutableArray *list = @[].mutableCopy;
        for (TCommonContactSelectCellData *data in selectArray) {
            [list addObject:data.identifier];
        }
        [self.navigationController popToViewController:self animated:YES];
        [self addGroupId:groupId memebers:list controller:controller];
    };
}

/**
 *点击删除群成员后的响应函数->进入删除群成员视图
 *删除群成员按钮为群成员头像队列后的 "-" 按钮
 */
- (void)groupInfoController:(TUIGroupInfoController *)controller didDeleteMembersInGroup:(NSString *)groupId members:(NSArray<TGroupMemberCellData *> *)members
{
    TUIContactSelectController *vc = [[TUIContactSelectController alloc] initWithNibName:nil bundle:nil];
    vc.title = NSLocalizedString(@"GroupDeleteFriend", nil); // @"删除联系人";
    NSMutableArray *ids = NSMutableArray.new;
    for (TGroupMemberCellData *cd in members) {
        if (![cd.identifier isEqualToString:[[V2TIMManager sharedInstance] getLoginUser]]) {
            [ids addObject:cd.identifier];
        }
    }
    [vc setSourceIds:ids];

    @weakify(self)
    [self.navigationController pushViewController:vc animated:YES];
    //删除成功后默认返回群组聊天界面
    vc.finishBlock = ^(NSArray<TCommonContactSelectCellData *> *selectArray) {
        @strongify(self)
        NSMutableArray *list = @[].mutableCopy;
        for (TCommonContactSelectCellData *data in selectArray) {
            [list addObject:data.identifier];
        }
        [self.navigationController popToViewController:self animated:YES];
        [self deleteGroupId:groupId memebers:list controller:controller];
    };
}

/**
 *确认添加群成员后的执行函数，函数内包含请求后的回调
 */
- (void)addGroupId:(NSString *)groupId memebers:(NSArray *)members controller:(TUIGroupInfoController *)controller
{
    [[V2TIMManager sharedInstance] inviteUserToGroup:_groupId userList:members succ:^(NSArray<V2TIMGroupMemberOperationResult *> *resultList) {
        [THelper makeToast:NSLocalizedString(@"add_success", nil)];
        [controller updateData];
    } fail:^(int code, NSString *desc) {
        [THelper makeToastError:code msg:desc];
    }];
}

/**
 *确认删除群成员后的执行函数，函数内包含请求后的回调
 */
- (void)deleteGroupId:(NSString *)groupId memebers:(NSArray *)members controller:(TUIGroupInfoController *)controller
{
    [[V2TIMManager sharedInstance] kickGroupMember:groupId memberList:members reason:@"" succ:^(NSArray<V2TIMGroupMemberOperationResult *> *resultList) {
        [THelper makeToast:NSLocalizedString(@"delete_success", nil)];
        [controller updateData];
    } fail:^(int code, NSString *desc) {
        [THelper makeToastError:code msg:desc];
    }];
}

/**
 *解散群组后执行的函数，默认回到上一界面
 */
- (void)groupInfoController:(TUIGroupInfoController *)controller didDeleteGroup:(NSString *)groupId
{
    [self.navigationController popToViewController:[self.navigationController.viewControllers firstObject] animated:YES];
}

/**
 *退出群组后执行的函数，默认回到上一界面
 */
- (void)groupInfoController:(TUIGroupInfoController *)controller didQuitGroup:(NSString *)groupId
{
    [self.navigationController popToViewController:[self.navigationController.viewControllers firstObject] animated:YES];
}

- (void)groupInfoController:(TUIGroupInfoController *)controller didSelectChangeAvatar:(NSString *)groupId
{
    UIAlertController *ac = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"choose_avatar_for_you", nil) message:nil preferredStyle:UIAlertControllerStyleAlert];
    [ac addAction:[UIAlertAction actionWithTitle:NSLocalizedString(@"OK", nil) style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        NSString *url = [THelper randAvatarUrl];
        V2TIMGroupInfo *info = [[V2TIMGroupInfo alloc] init];
        info.groupID = groupId;
        info.faceURL = url;
        [[V2TIMManager sharedInstance] setGroupInfo:info succ:^{
            [controller updateData];;
        } fail:^(int code, NSString *msg) {
            [THelper makeToastError:code msg:msg];
        }];
    }]];
    [self presentViewController:ac animated:YES completion:nil];
}

@end

@interface GroupMemberController () <TGroupMemberControllerDelegagte>
@end

@implementation GroupMemberController

- (void)viewDidLoad {
    [super viewDidLoad];
    TUIGroupMemberController *members = [[TUIGroupMemberController alloc] init];
    members.groupId = _groupId;
    members.delegate = self;
    [self addChildViewController:members];
    [self.view addSubview:members.view];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
}

- (void)didCancelInGroupMemberController:(TUIGroupMemberController *)controller
{
    [self.navigationController popViewControllerAnimated:YES];
}

- (void)groupMemberController:(TUIGroupMemberController *)controller didAddMembersInGroup:(NSString *)groupId hasMembers:(NSMutableArray *)members
{
    TUIContactSelectController *vc = [[TUIContactSelectController alloc] initWithNibName:nil bundle:nil];
    vc.title = NSLocalizedString(@"GroupAddFirend", nil); // @"添加联系人";
    vc.viewModel.disableFilter = ^BOOL(TCommonContactSelectCellData *data) {
        for (TGroupMemberCellData *cd in members) {
            if ([cd.identifier isEqualToString:data.identifier])
                return YES;
        }
        return NO;
    };
    @weakify(self)
    [self.navigationController pushViewController:vc animated:YES];
    vc.finishBlock = ^(NSArray<TCommonContactSelectCellData *> *selectArray) {
        @strongify(self)
        NSMutableArray *list = @[].mutableCopy;
        for (TCommonContactSelectCellData *data in selectArray) {
            [list addObject:data.identifier];
        }
        [self.navigationController popToViewController:self animated:YES];
        [self addGroupId:groupId memebers:list controller:controller];
    };
}

- (void)groupMemberController:(TUIGroupMemberController *)controller didDeleteMembersInGroup:(NSString *)groupId hasMembers:(NSMutableArray *)members
{
    TUIContactSelectController *vc = [[TUIContactSelectController alloc] initWithNibName:nil bundle:nil];
    vc.title = NSLocalizedString(@"GroupDeleteFriend", nil); // @"删除联系人";
    vc.viewModel.avaliableFilter = ^BOOL(TCommonContactSelectCellData *data) {
        for (TGroupMemberCellData *cd in members) {
            if ([cd.identifier isEqualToString:data.identifier])
                return YES;
        }
        return NO;
    };
    @weakify(self)
    [self.navigationController pushViewController:vc animated:YES];
    vc.finishBlock = ^(NSArray<TCommonContactSelectCellData *> *selectArray) {
        @strongify(self)
        NSMutableArray *list = @[].mutableCopy;
        for (TCommonContactSelectCellData *data in selectArray) {
            [list addObject:data.identifier];
        }
        [self.navigationController popToViewController:self animated:YES];
        [self deleteGroupId:groupId memebers:list controller:controller];
    };
}

- (void)addGroupId:(NSString *)groupId memebers:(NSArray *)members controller:(TUIGroupMemberController *)controller
{
    [[V2TIMManager sharedInstance] inviteUserToGroup:_groupId userList:members succ:^(NSArray<V2TIMGroupMemberOperationResult *> *resultList) {
        [THelper makeToast:NSLocalizedString(@"add_success", nil)];
        [controller updateData];
    } fail:^(int code, NSString *desc) {
        [THelper makeToastError:code msg:desc];
    }];
}

- (void)deleteGroupId:(NSString *)groupId memebers:(NSArray *)members controller:(TUIGroupMemberController *)controller
{
    [[V2TIMManager sharedInstance] kickGroupMember:groupId memberList:members reason:@"" succ:^(NSArray<V2TIMGroupMemberOperationResult *> *resultList) {
        [THelper makeToast:NSLocalizedString(@"delete_success", nil)];
        [controller updateData];
    } fail:^(int code, NSString *desc) {
        [THelper makeToastError:code msg:desc];
    }];
}
@end
@TCServiceRegister(TUIUserProfileControllerServiceProtocol, TUserProfileController)
@interface TUserProfileController()
@property NSMutableArray<NSArray *> *dataList;
@end

@implementation TUserProfileController
{
    V2TIMUserFullInfo *_userFullInfo;
    ProfileControllerAction _actionType;
    TUIGroupPendencyCellData *_groupPendency;
    TCommonPendencyCellData *_pendency;
}
@synthesize userFullInfo = _userFullInfo;
@synthesize actionType = _actionType;
@synthesize groupPendency = _groupPendency;
@synthesize pendency = _pendency;

- (instancetype)init
{
    self = [super initWithStyle:UITableViewStyleGrouped];
    return self;
}
- (void)willMoveToParentViewController:(nullable UIViewController *)parent
{
    [super willMoveToParentViewController:parent];
}

- (void)viewDidLoad {
    [super viewDidLoad];

    self.title = NSLocalizedString(@"ProfileDetails", nil); // @"详细资料";
    self.clearsSelectionOnViewWillAppear = YES;

    [self.tableView registerClass:[TCommonTextCell class] forCellReuseIdentifier:@"TextCell"];
    [self.tableView registerClass:[TUIProfileCardCell class] forCellReuseIdentifier:@"CardCell"];
    [self.tableView registerClass:[TUIButtonCell class] forCellReuseIdentifier:@"ButtonCell"];

    //如果不加这一行代码，依然可以实现点击反馈，但反馈会有轻微延迟，体验不好。
    self.tableView.delaysContentTouches = NO;

    [self loadData];
}


/**
 * 加载视图信息
 */
- (void)loadData
{
    NSMutableArray *list = @[].mutableCopy;
    [list addObject:({
        NSMutableArray *inlist = @[].mutableCopy;
        [inlist addObject:({
            TUIProfileCardCellData *personal = [[TUIProfileCardCellData alloc] init];
            personal.identifier = self.userFullInfo.userID;
            personal.avatarImage = DefaultAvatarImage;
            personal.avatarUrl = [NSURL URLWithString:self.userFullInfo.faceURL];
            personal.name = [self.userFullInfo showName];
            personal.genderString = [self.userFullInfo showGender];
            personal.signature = [self.userFullInfo showSignature];
            personal.reuseId = @"CardCell";
            personal;
        })];
        inlist;
    })];

    //当用户状态为请求添加好友/请求添加群组时，视图加载出验证消息模块
    if (self.pendency || self.groupPendency) {
        [list addObject:({
            NSMutableArray *inlist = @[].mutableCopy;
            [inlist addObject:({
                TCommonTextCellData *data = TCommonTextCellData.new;
                data.key = NSLocalizedString(@"FriendAddVerificationMessage",  nil); // @"验证消息";
                if (self.pendency) {
                    data.value = self.pendency.addWording;
                } else if (self.groupPendency) {
                    data.value = self.groupPendency.requestMsg;
                }
                data.reuseId = @"TextCell";
                data;
            })];
            inlist;
        })];
    }


    self.dataList = list;

    //当用户为陌生人时，在当前视图给出"加好友"按钮
    if (self.actionType == PCA_ADD_FRIEND) {
        [[V2TIMManager sharedInstance] checkFriend:@[self.userFullInfo.userID] checkType:V2TIM_FRIEND_TYPE_BOTH succ:^(NSArray<V2TIMFriendCheckResult *> *resultList) {
            if (resultList.count == 0) {
                return;
            }
            V2TIMFriendCheckResult *result = resultList.firstObject;
            if (result.relationType == V2TIM_FRIEND_RELATION_TYPE_IN_MY_FRIEND_LIST || result.relationType == V2TIM_FRIEND_RELATION_TYPE_BOTH_WAY) {
                return;
            }
            
            [self.dataList addObject:({
                NSMutableArray *inlist = @[].mutableCopy;
                [inlist addObject:({
                    TUIButtonCellData *data = TUIButtonCellData.new;
                    data.title = NSLocalizedString(@"FriendAddTitle", nil); // @"加好友";
                    data.style = ButtonGreen;
                    data.cbuttonSelector = @selector(onAddFriend);
                    data.reuseId = @"ButtonCell";
                    data;
                })];
                inlist;
            })];
            
            [self.tableView reloadData];
                    
        } fail:^(int code, NSString *desc) {
            NSLog(@"");
        }];
    }

    //当用户请求添加使用者为好友时，在当前视图给出"同意"、"拒绝"，使当前用户进行选择
    if (self.actionType == PCA_PENDENDY_CONFIRM) {
        [self.dataList addObject:({
            NSMutableArray *inlist = @[].mutableCopy;
            [inlist addObject:({
                TUIButtonCellData *data = TUIButtonCellData.new;
                data.title = NSLocalizedString(@"Accept", nil);
                data.style = ButtonGreen;
                data.cbuttonSelector = @selector(onAgreeFriend);
                data.reuseId = @"ButtonCell";
                data;
            })];
            [inlist addObject:({
                TUIButtonCellData *data = TUIButtonCellData.new;
                data.title = NSLocalizedString(@"Decline", nil);
                data.style = ButtonRedText;
                data.cbuttonSelector =  @selector(onRejectFriend);
                data.reuseId = @"ButtonCell";
                data;
            })];
            inlist;
        })];
    }

    //当用户请求加入群组时，在当前视图给出"同意"、"拒绝"，使当前群组管理员进行选择
    if (self.actionType == PCA_GROUP_CONFIRM) {
        [self.dataList addObject:({
            NSMutableArray *inlist = @[].mutableCopy;
            [inlist addObject:({
                TUIButtonCellData *data = TUIButtonCellData.new;
                data.title = @"同意";
                data.style = ButtonGreen;
                data.cbuttonSelector = @selector(onAgreeGroup);
                data.reuseId = @"ButtonCell";
                data;
            })];
            [inlist addObject:({
                TUIButtonCellData *data = TUIButtonCellData.new;
                data.title = @"拒绝";
                data.style = ButtonRedText;
                data.cbuttonSelector =  @selector(onRejectGroup);
                data.reuseId = @"ButtonCell";
                data;
            })];
            inlist;
        })];
    }

    [self.tableView reloadData];
}

#pragma mark - Table view data source
/**
 *  tableView数据源函数
 */

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return self.dataList.count;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return self.dataList[section].count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {

    TCommonCellData *data = self.dataList[indexPath.section][indexPath.row];
    TCommonTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:data.reuseId forIndexPath:indexPath];
    //如果是 profileCard 的话，添加委托。
    if([cell isKindOfClass:[TUIProfileCardCell class]]){
        TUIProfileCardCell *cardCell = (TUIProfileCardCell *)cell;
        cardCell.delegate = self;
        cell = cardCell;
    }
    [cell fillWithData:data];

    return cell;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(nonnull NSIndexPath *)indexPath
{
    TCommonCellData *data = self.dataList[indexPath.section][indexPath.row];
    return [data heightOfWidth:Screen_Width];
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
}

/**
 *  点击 发送信息 按钮后执行的函数
 */
- (void)onSendMessage
{
    TUIConversationCellData *data = [[TUIConversationCellData alloc] init];
    data.conversationID = [NSString stringWithFormat:@"c2c_%@",self.userFullInfo.userID];
    data.userID = self.userFullInfo.userID;
    data.title = [self.userFullInfo showName];
    ChatViewController *chat = [[ChatViewController alloc] init];
    chat.userId = self.userFullInfo.userID;
    chat.conversationData = data;
    [self.navigationController pushViewController:chat animated:YES];
}

/**
 *  点击 加好友 按钮后执行的函数
 */
- (void)onAddFriend
{
//    FriendRequestViewController *vc = [FriendRequestViewController new];
//    vc.profile = self.userFullInfo;
//    [self.navigationController pushViewController:vc animated:YES];
}

/**
 *  点击 同意(好友) 按钮后执行的函数
 */
- (void)onAgreeFriend
{
    [self.pendency agree];
}

- (void)onRejectFriend
{
    [self.pendency reject];
}

- (void)onAgreeGroup
{
    [self.groupPendency accept];
}

- (void)onRejectGroup
{
    [self.groupPendency reject];
}

- (UIView *)toastView
{
    return [UIApplication sharedApplication].keyWindow;
}

-(void)didSelectAvatar{
    TUIAvatarViewController *image = [[TUIAvatarViewController alloc] init];
    image.avatarData.avatarUrl = [NSURL URLWithString:self.userFullInfo.faceURL];
    NSArray *list = self.dataList;
    NSLog(@"%@",list);

    [self.navigationController pushViewController:image animated:YES];
}

/**
 *  点击头像查看大图的委托实现
 */
-(void)didTapOnAvatar:(TUIProfileCardCell *)cell{
    TUIAvatarViewController *image = [[TUIAvatarViewController alloc] init];
    image.avatarData = cell.cardData;
    [self.navigationController pushViewController:image animated:YES];
}
@end

// MLeaksFinder 会对这个类误报，这里需要关闭一下
@implementation UIImagePickerController (Leak)

- (BOOL)willDealloc {
    return NO;
}

@end

@interface ChatViewController ()
<
TUIChatControllerListener,
#if ENABLELIVE
TUILiveRoomAnchorDelegate,
#endif
UIImagePickerControllerDelegate,
UINavigationControllerDelegate,
UIDocumentPickerDelegate>
@property (nonatomic, strong) TUIChatController *chat;
@property (nonatomic,assign) BOOL isBlock;
@property (nonatomic,assign) BOOL isShow;
@property (nonatomic,strong)NSMutableArray *muteArr;
@property (nonatomic,strong)IMUpdateGrdateView *upgrdateView;
@end
@implementation ChatViewController
- (NSMutableArray *)muteArr
{
    if (!_muteArr) {
        _muteArr = [NSMutableArray array];
    }
    return _muteArr;
}
-(void)actionReciveMessageData
{
    NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
    NSString *content = [[NSUserDefaults standardUserDefaults]valueForKey:SendMessageContent];
    NSLog(@"content:%@",content);
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"appType"] = @"81";
    param[@"content"] = content;
    param[@"imgs"]    = @"";
    param[@"targetId"] = @"0";
    param[@"type"]     = @"101";
    param[@"userId"]   = [NSString stringWithFormat:@"%ld",(long)userModel.userInfo.userId];
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/feedback/add"];
    NSLog(@"param:%@",param);
    NSLog(@"urlStr:%@",urlStr);
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:urlStr parameters:param success:^(NeighborsSimpleCuteResposeModel *response) {
        NSLog(@"api/feedback/add:%@",response.data);
        BOOL flag = NO;
        if (response.code == 0) {
            NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
            if (IS_EMPTY(userModel.appClient.spare2nd)) {
                NSLog(@"为空了");
            }else{
                NSMutableArray *arry  = [NSMutableArray array];
                if ([userModel.appClient.spare2nd containsString:@";"]) {
                    [arry addObjectsFromArray:[userModel.appClient.spare2nd componentsSeparatedByString:@";"]];
                }else{
                    [arry addObject:userModel.appClient.spare2nd];
                }
                NSMutableArray *array = [NSMutableArray array];
                for (int i = 0; i < arry.count; i++) {
                    NSString *allStr = arry[i];
                    NSLog(@"allStr:%@",allStr);
                    [array addObject:allStr];
                }
                for (int j = 0 ; j < array.count; j++) {
                    NSMutableArray *otherArray = [NSMutableArray array];
                    NSString *contentStr = array[j];
                    NSLog(@"contentStr:%@",contentStr);
                    if ([contentStr containsString:@","]) {
                        [otherArray addObjectsFromArray:[contentStr componentsSeparatedByString:@","]];
                    }else{
                        [otherArray addObject:contentStr];
                    }
                    NSLog(@"otherArray:%lu",(unsigned long)otherArray.count);
                    BOOL  flag1 = NO;
                    for (int k = 0 ; k < otherArray.count; k++) {
                        NSString *compareStr = otherArray[k];
                        if ([content containsString:compareStr]) {
                            flag1 = YES;
                        }else{
                            flag1 = NO;
                            break;
                        }
                    }
                    if (flag1 == YES) {
                        flag = YES;
                    }
                }
            }
            if (flag == YES) {
                [[NSUserDefaults standardUserDefaults]setBool:YES forKey:CXSLocalMemberMute];
                [[NSUserDefaults standardUserDefaults]synchronize];
                [[CXSCommonTools sharedNetworkTool]acitonTimeWithtransactiontime];
                [self actionShowMuteAlterView];
            }else{
                [[NSNotificationCenter defaultCenter]postNotificationName:SendMessageSendedStatuas object:nil userInfo:nil];
            }
        }
    } failure:^(NSError *error) {
        [SVProgressHUD showInfoWithStatus:error.domain];
        return;
    }];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    [[TUIKitListenerManager sharedInstance] addChatControllerListener:self];
#if ENABLELIVE
    [[TUIKitLive shareInstance] setGroupLiveDelegate:self];
#endif
    _chat = [[TUIChatController alloc] init];
    [_chat setConversationData:self.conversationData];
    [self addChildViewController:_chat];
    [self.view addSubview:_chat.view];
    [_chat.view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.offset(0);
        make.bottom.offset(0);
        make.top.offset(0);
    }];
    _chat.messageController.view.backgroundColor = [UIColor blackColor];
    _chat.inputController.view.backgroundColor =  [UIColor blackColor];
    _chat.inputController.moreView.backgroundColor =  [UIColor blackColor];
    _chat.inputController.moreView.moreCollectionView.backgroundColor = [UIColor blackColor];;
    _chat.inputController.moreView.lineView.backgroundColor = [UIColor blackColor];

    NSMutableArray *array = [NSMutableArray arrayWithArray:_chat.moreMenus];
    [array removeLastObject]; // 删除最后一个菜单
    [array removeLastObject]; // 删除最后一个菜单
    [array removeLastObject]; // 删除最后一个菜单
    //[array removeLastObject]; // 删除最后一个菜单
    _chat.moreMenus = array;
    
    RAC(self, title) = [RACObserve(_conversationData, title) distinctUntilChanged];
    [self checkTitle:NO];

    // 导航栏
    [self setupNavigator];
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(onRefreshNotification:)
                                                 name:TUIKitNotification_TIMRefreshListener_Changed
                                               object:nil];

    //添加未读计数的监听
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(onChangeUnReadCount:)
                                                 name:TUIKitNotification_onTotalUnreadMessageCountChanged
                                               object:nil];
    //获取
    V2TIMMessageListGetOption *option = [[V2TIMMessageListGetOption alloc] init];
    option.getType = V2TIM_GET_LOCAL_OLDER_MSG;
    option.count = 10;
    option.userID = self.conversationData.userID;
    [V2TIMManager.sharedInstance getHistoryMessageList:option succ:^(NSArray<V2TIMMessage *> *msgs) {
        NSLog(@"msgs:%lu",(unsigned long)msgs.count);
        for (V2TIMMessage *str in msgs) {
            NSLog(@"str111111:%@",str.textElem.text);
        }
        if (msgs.count > 0) {
            [self actionShowFrandAlterViewWithArry:msgs];
        }
    } fail:^(int code, NSString *desc) {
        NSLog(@"descdescdesc:%@",desc);
    }];
    // 刷新未读数
    __weak typeof(self) weakSelf = self;
    [V2TIMManager.sharedInstance getTotalUnreadMessageCount:^(UInt64 totalCount) {
        NSNotification *notice = [[NSNotification alloc] initWithName:TUIKitNotification_onTotalUnreadMessageCountChanged
                                                               object:@(totalCount)
                                                             userInfo:nil];
        [weakSelf onChangeUnReadCount:notice];
    } fail:^(int code, NSString *desc) {
        
    }];
    [NSNotificationCenter.defaultCenter addObserver:self selector:@selector(onFriendInfoChanged:) name:@"FriendInfoChangedNotification" object:nil];
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(actionReciveMessageData) name:SendMessageSendingStatuas object:nil];
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(actionUpgradate) name:SendMessageUpgrade object:nil];
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(actionUpgradate2) name:SendMessageUpgrade2 object:nil];
}
-(void)actionUpgradate2
{
    NSLog(@"actionUpgradate2actionUpgradate2actionUpgradate2");
    NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
    WeakSelf
    self.upgrdateView = [[IMUpdateGrdateView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    [self.upgrdateView setIMUpdateGrdateViewUpgradeBlock:^{
        BOOL isVPN = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_VPN];
        BOOL isCountry = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_COUNTRY];
               if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th isEqualToString:@"1"] || [userModel.appClient.spare13th isEqualToString:@"1"] || isVPN == YES  || isCountry == YES) {
                   ZFMemberUpgrdeOtherController *zfothermembervc = [[ZFMemberUpgrdeOtherController alloc]init];
                    zfothermembervc.hidesBottomBarWhenPushed = YES;
                    [self.navigationController pushViewController:zfothermembervc animated:YES];
               }else{
                   //H5支付功能
                   NSString *spare12th = userModel.appClient.spare12th;
                   NSLog(@"spare12th:%@",spare12th);
                   NSString *ipContent = userModel.userInfo.ipContent;
                   NSLog(@"ipContent:%@",ipContent);
                   NSDictionary *dics = [ipContent getCxshareldstaretlToDictionary];
                   NSLog(@"ip:%@",dics[@"ip"]);
                   NSString *RealUrl = [NSString stringWithFormat:@"%@ip=%@?userid=%ld?token=%@",spare12th,dics[@"ip"],(long)userModel.userInfo.userId,userModel.tokenDto.token];
                   NSLog(@"RealUrl:%@",RealUrl);
                   
                   NeighborsSimpleCuteBaseWebController *vc = [[NeighborsSimpleCuteBaseWebController alloc]init];
                   vc.webTitle = @"Upgrade";
                   vc.loadType = WKWebLoadTypeWebURLString;
                   vc.URLString = RealUrl;
                   [weakSelf.navigationController pushViewController:vc animated:YES];
        }
    }];
    [self.upgrdateView setIMUpdateGrdateViewUpgradeDissmissBlock:^{
        
    }];
    NSCParameterAssert(window);
    [window addSubview:self.upgrdateView];
}

-(void)actionUpgradate
{
    NSLog(@"actionUpgradateactionUpgradateactionUpgradate");
    NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
    WeakSelf
    self.upgrdateView = [[IMUpdateGrdateView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    [self.upgrdateView setIMUpdateGrdateViewUpgradeBlock:^{
        BOOL isVPN = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_VPN];
        BOOL isCountry = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_COUNTRY];
               if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th isEqualToString:@"1"] || [userModel.appClient.spare13th isEqualToString:@"1"] || isVPN == YES  || isCountry == YES) {
                   ZFMemberUpgrdeOtherController *zfothermembervc = [[ZFMemberUpgrdeOtherController alloc]init];
                        zfothermembervc.hidesBottomBarWhenPushed = YES;
                        [self.navigationController pushViewController:zfothermembervc animated:YES];
                   
                   
               }else{
                   //H5支付功能
                   NSString *spare12th = userModel.appClient.spare12th;
                   NSLog(@"spare12th:%@",spare12th);
                   NSString *ipContent = userModel.userInfo.ipContent;
                   NSLog(@"ipContent:%@",ipContent);
                   NSDictionary *dics = [ipContent getCxshareldstaretlToDictionary];
                   NSLog(@"ip:%@",dics[@"ip"]);
                   NSString *RealUrl = [NSString stringWithFormat:@"%@ip=%@?userid=%ld?token=%@",spare12th,dics[@"ip"],(long)userModel.userInfo.userId,userModel.tokenDto.token];
                   NSLog(@"RealUrl:%@",RealUrl);
                   
                   NeighborsSimpleCuteBaseWebController *vc = [[NeighborsSimpleCuteBaseWebController alloc]init];
                   vc.webTitle = @"Upgrade";
                   vc.loadType = WKWebLoadTypeWebURLString;
                   vc.URLString = RealUrl;
                   [weakSelf.navigationController pushViewController:vc animated:YES];
        }
    }];
    [self.upgrdateView setIMUpdateGrdateViewUpgradeDissmissBlock:^{
    }];
    NSCParameterAssert(window);
    [window addSubview:self.upgrdateView];
}
/// 显示骗子的view
-(void)actionShowFrandAlterViewWithArry:(NSArray *)messageArr
{
    NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
    NSLog(@"loginModel.spare2nd:%@",userModel.appClient.spare2nd);
    if (IS_EMPTY(userModel.appClient.spare2nd)) {
        NSLog(@"为空了");
    }else{
        BOOL flag = NO;
        NSLog(@"loginModel.spare2nd:%@",userModel.appClient.spare2nd);
        if (IS_EMPTY(userModel.appClient.spare2nd)) {
            NSLog(@"为空了");
        }else{
            NSMutableArray *arry  = [NSMutableArray array];
            if ([userModel.appClient.spare2nd containsString:@";"]) {
                [arry addObjectsFromArray:[userModel.appClient.spare2nd componentsSeparatedByString:@";"]];
            }else{
                [arry addObject:userModel.appClient.spare2nd];
            }
            NSMutableArray *array = [NSMutableArray array];
            for (int i = 0; i < arry.count; i++) {
                NSString *allStr = arry[i];
                NSLog(@"allStr:%@",allStr);
                [array addObject:allStr];
            }
            for (int j = 0 ; j < array.count; j++) {
                NSMutableArray *otherArray = [NSMutableArray array];
                NSString *contentStr = array[j];
                NSLog(@"contentStr:%@",contentStr);
                if ([contentStr containsString:@","]) {
                    [otherArray addObjectsFromArray:[contentStr componentsSeparatedByString:@","]];
                }else{
                    [otherArray addObject:contentStr];
                }
                NSLog(@"otherArray:%lu",(unsigned long)otherArray.count);
                BOOL  flag1 = NO;
                for (int k = 0 ; k < otherArray.count; k++) {
                    NSString *compareStr = otherArray[k];
                    for (int h = 0; h<messageArr.count; h++) {
                        V2TIMMessage *message = messageArr[h];
                        if ([message.textElem.text containsString:compareStr]) {
                            flag1 = YES;
                        }else{
                            flag1 = NO;
                            break;
                        }
                    }
                    if (flag1 == YES) {
                        flag = YES;
                    }
                }
            }
        }
        if (flag == YES) {
            CXMessageFraudAlterView *fraudAlterView = [[CXMessageFraudAlterView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
            UIWindow *window = [UIApplication sharedApplication].keyWindow;
            [fraudAlterView setCXMessageFraudAlterViewOKBlock:^{
                [[TUIKitListenerManager sharedInstance] removeChatControllerListener:self];
                [[NSNotificationCenter defaultCenter] removeObserver:self];
                [[NSNotificationCenter defaultCenter]removeObserver:self name:SendMessageUpgrade object:nil];
                [[NSNotificationCenter defaultCenter]removeObserver:self name:SendMessageUpgrade2 object:nil];
                [[NSNotificationCenter defaultCenter]removeObserver:self name:SendMessageSendingStatuas object:nil];
                [self.navigationController popViewControllerAnimated:YES];
            }];
            NSCParameterAssert(window);
            [window addSubview:fraudAlterView];
        }
    }
}
/// 显示禁言的功能
-(void)actionShowMuteAlterView
{
    CXMessageMuteAlterView *muteAlterView = [[CXMessageMuteAlterView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    [muteAlterView setCXMessageMuteAlterViewFeedBackBlock:^{
        NSLog(@"Feedback");
        NeighborsSimpleCuteSettingFeedBackController *feedbackvc = [[NeighborsSimpleCuteSettingFeedBackController alloc]init];
        feedbackvc.hidesBottomBarWhenPushed = YES;
        feedbackvc.isisMute = YES;
        [self.navigationController pushViewController:feedbackvc animated:YES];
    }];
     NSCParameterAssert(window);
    [window addSubview:muteAlterView];
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    [IQKeyboardManager sharedManager].enable = NO;
    [IQKeyboardManager sharedManager].enableAutoToolbar = NO;
    BOOL isMemberMute  = [[NSUserDefaults standardUserDefaults]boolForKey:CXSLocalMemberMute];
    if (isMemberMute == YES) {
        [[CXSCommonTools sharedNetworkTool]acitonTimeWithtransactiontime];
        [self actionShowMuteAlterView];
    }
}
- (void)dealloc
{
    NSLog(@"deallocdealloc");
    [[TUIKitListenerManager sharedInstance] removeChatControllerListener:self];
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    [[NSNotificationCenter defaultCenter]removeObserver:self name:SendMessageUpgrade object:nil];
    [[NSNotificationCenter defaultCenter]removeObserver:self name:SendMessageUpgrade2 object:nil];
    [[NSNotificationCenter defaultCenter]removeObserver:self name:SendMessageSendingStatuas object:nil];
    [IQKeyboardManager sharedManager].enable = YES;
    [IQKeyboardManager sharedManager].enableAutoToolbar = YES;
}

- (void)setupNavigator
{
    _unRead = [[TUnReadView alloc] init];
    _unRead.hidden = YES;
    UIButton *leftBtn = [[UIButton alloc]init];
    [leftBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_back")] forState:UIControlStateNormal];
    [leftBtn addTarget:self action:@selector(actionChatLeftBtn:) forControlEvents:UIControlEventTouchUpInside];
    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:leftBtn];
    
    UIButton *rightBtn = [[UIButton alloc]init];
    [rightBtn setImage:[UIImage imageNamed:TUIKitResource(@"im_chat_block")] forState:UIControlStateNormal];
    [rightBtn addTarget:self action:@selector(actionChatRightBtn:) forControlEvents:UIControlEventTouchUpInside];
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:rightBtn];
}
-(void)actionChatLeftBtn:(UIButton *)btn
{
    [self.navigationController popViewControllerAnimated:YES];
}

/// block view
-(void)actionChatRightBtn:(UIButton *)btn
{
    [self.view endEditing:YES];
    NSLog(@"self.gorupId:%@",self.userId);
    if (IS_EMPTY(self.userId)){
        CXChatBlockMaterialAlertView *menuView = [[CXChatBlockMaterialAlertView alloc]init];
        if (self.isBlock == YES) {
            [menuView.chat_btn_1 setTitle:@"Unblock" forState:UIControlStateNormal];
        }
        [KWindow addSubview:menuView];
        [menuView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.edges.mas_equalTo(KWindow);
        }];
        MJWeakSelf;
        menuView.CXChatBlockAlertViewBtnsClickBlock = ^(NSInteger btnIndex) {
            if(btnIndex == 1001){
                if (self.isBlock == YES) {
                    
                }else{
                    [SVProgressHUD show];
                    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
                                dispatch_async(dispatch_get_main_queue(), ^{
                                        weakSelf.isBlock = YES;
                                        [SVProgressHUD dismiss];
                                        [SVProgressHUD showInfoWithStatus:@"Blocked"];
                                });
                        });
                }
            }else if(btnIndex == 1002){
                NSLog(@"targetId:%@",self.userId);
                NeighborsSimpleCuteSettingFeedBackController *feedbackvc = [[NeighborsSimpleCuteSettingFeedBackController alloc]init];
                feedbackvc.hidesBottomBarWhenPushed = YES;
                [self.navigationController pushViewController:feedbackvc animated:YES];
            }else if(btnIndex == 1003){
                
            }
        };
    }else{
        CXChatBlockAlertView *menuView = [[CXChatBlockAlertView alloc]init];
        if (self.isBlock == YES) {
            [menuView.chat_btn_1 setTitle:@"Unblock" forState:UIControlStateNormal];
        }
        [KWindow addSubview:menuView];
        [menuView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.edges.mas_equalTo(KWindow);
        }];
        MJWeakSelf;
        menuView.CXChatBlockAlertViewBtnsClickBlock = ^(NSInteger btnIndex) {
            if (btnIndex == 1000) {
               // view podfile
                NSCPersonMessageViewController *personMessageVC = [[NSCPersonMessageViewController alloc]init];
                personMessageVC.personUserId = [self.userId intValue];
                personMessageVC.tempStr20th = self.tempStr20th;
                personMessageVC.nickName = self.nickName;
                personMessageVC.hidesBottomBarWhenPushed = YES;
                [self.navigationController pushViewController:personMessageVC animated:NO];
            }else if(btnIndex == 1001){
                if (self.isBlock == YES) {
                    
                }else{
                    [SVProgressHUD show];
                    dispatch_queue_t queue  = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), queue, ^{
                                dispatch_async(dispatch_get_main_queue(), ^{
                                        weakSelf.isBlock = YES;
                                        [SVProgressHUD dismiss];
                                        [SVProgressHUD showInfoWithStatus:@"Blocked"];
                                });
                        });
                }
            }else if(btnIndex == 1002){
                NSLog(@"targetId:%@",self.userId);
                NeighborsSimpleCuteSettingFeedBackController *feedbackvc = [[NeighborsSimpleCuteSettingFeedBackController alloc]init];
                feedbackvc.hidesBottomBarWhenPushed = YES;
                [self.navigationController pushViewController:feedbackvc animated:YES];
            }else if(btnIndex == 1003){
                
            }
        };
    }
   
}
-(void)leftBarButtonClick
{
    [self.navigationController popViewControllerAnimated:YES];
}
- (NSString *)getReallyUserId:(NSString *)imUserId {
    if ([imUserId containsString:@"_"]) {
        NSArray *strArr = [imUserId componentsSeparatedByString:@"_"];
        if (strArr.count > 2) {
            return strArr[1];
        }
    }
    return @"";
}

- (void)willMoveToParentViewController:(UIViewController *)parent
{
    if (parent == nil) {
        [_chat saveDraft];
    }
}
// 聊天窗口标题由上层维护，需要自行设置标题
- (void)onRefreshNotification:(NSNotification *)notifi
{
    NSArray<V2TIMConversation *> *convs = notifi.object;
    for (V2TIMConversation *conv in convs) {
        if ([conv.conversationID isEqualToString:self.conversationData.conversationID]) {
            self.conversationData.title = conv.showName;
            break;
        }
    }
}

- (void) onChangeUnReadCount:(NSNotification *)notifi{
    id obj = notifi.object;
    if (![obj isKindOfClass:NSNumber.class]) {
        return;
    }
    
    // 此处异步的原因：当前聊天页面连续频繁收到消息，可能还没标记已读，此时也会收到未读数变更。理论上此时未读数不会包括当前会话的。
    __weak typeof(self) weakSelf = self;
    dispatch_async(dispatch_get_main_queue(), ^{
        [weakSelf.unRead setNum:[obj integerValue]];
    });
}

- (void)onFriendInfoChanged:(NSNotification *)notice
{
    [self checkTitle:YES];
}
- (void)checkTitle:(BOOL)force {
    if (force || _conversationData.title.length == 0) {
        if (_conversationData.userID.length > 0) {
            _conversationData.title = _conversationData.userID;
             @weakify(self)
            [[V2TIMManager sharedInstance] getFriendsInfo:@[_conversationData.userID] succ:^(NSArray<V2TIMFriendInfoResult *> *resultList) {
                @strongify(self)
                V2TIMFriendInfoResult *result = resultList.firstObject;
                if (result.friendInfo && result.friendInfo.friendRemark.length > 0) {
                    self.conversationData.title = result.friendInfo.friendRemark;
                } else {
                    [[V2TIMManager sharedInstance] getUsersInfo:@[self.conversationData.userID] succ:^(NSArray<V2TIMUserFullInfo *> *infoList) {
                        V2TIMUserFullInfo *info = infoList.firstObject;
                        if (info && info.nickName.length > 0) {
                            self.conversationData.title = info.nickName;
                        }
                    } fail:nil];
                }
            } fail:nil];
        }
        if (_conversationData.groupID.length > 0) {
            _conversationData.title = _conversationData.groupID;
             @weakify(self)
            [[V2TIMManager sharedInstance] getGroupsInfo:@[_conversationData.groupID] succ:^(NSArray<V2TIMGroupInfoResult *> *groupResultList) {
                @strongify(self)
                V2TIMGroupInfoResult *result = groupResultList.firstObject;
                if (result.info && result.info.groupName.length > 0) {
                    self.conversationData.title = result.info.groupName;
                }
            } fail:nil];
        }
    }
}

- (void)chatController:(TUIChatController *)controller didSendMessage:(TUIMessageCellData *)msgCellData
{
    NSLog(@"chatControllerchatControllerchatControllerchatControllerchatController send message");
    NSLog(@"msgCellData.content:%@",msgCellData.innerMessage.textElem.text);
    if ([_conversationData.groupID isEqualToString:@"im_demo_admin"] || [_conversationData.userID isEqualToString:@"im_demo_admin"]) {
        [TCUtil report:Action_Sendmsg2helper actionSub:@"" code:@(0) msg:@"sendmsg2helper"];
    }
    else if ([_conversationData.groupID isEqualToString:@"@TGS#33NKXK5FK"] || [_conversationData.userID isEqualToString:@"@TGS#33NKXK5FK"]) {
        [TCUtil report:Action_Sendmsg2defaultgrp actionSub:@"" code:@(0) msg:@"sendmsg2defaultgrp"];
    }
    if ([msgCellData isKindOfClass:[TUITextMessageCellData class]]) {
        [TCUtil report:Action_SendMsg actionSub:Action_Sub_Sendtext code:@(0) msg:@"sendtext"];
    }
    else if ([msgCellData isKindOfClass:[TUIVoiceMessageCellData class]]) {
        [TCUtil report:Action_SendMsg actionSub:Action_Sub_Sendaudio code:@(0) msg:@"sendaudio"];
    }
    else if ([msgCellData isKindOfClass:[TUIFaceMessageCellData class]]) {
        [TCUtil report:Action_SendMsg actionSub:Action_Sub_Sendface code:@(0) msg:@"sendface"];
    }
    else if ([msgCellData isKindOfClass:[TUIImageMessageCellData class]]) {
        [TCUtil report:Action_SendMsg actionSub:Action_Sub_Sendpicture code:@(0) msg:@"sendpicture"];
    }
    else if ([msgCellData isKindOfClass:[TUIVideoMessageCellData class]]) {
        [TCUtil report:Action_SendMsg actionSub:Action_Sub_Sendvideo code:@(0) msg:@"sendvideo"];
    }
    else if ([msgCellData isKindOfClass:[TUIFileMessageCellData class]]) {
        [TCUtil report:Action_SendMsg actionSub:Action_Sub_Sendfile code:@(0) msg:@"sendfile"];
    }
#if ENABLELIVE
    else if ([msgCellData isKindOfClass:[TUIGroupLiveMessageCell class]]) {
        [TCUtil report:Action_SendMsg actionSub:Action_Sub_Sendgrouplive code:@(0) msg:@"sendgrouplive"];
    }
#endif
}

- (NSArray <TUIInputMoreCellData *> *)chatController:(TUIChatController *)chatController onRegisterMoreCell:(MoreCellPriority *)priority {
    // 更多菜单
    NSMutableArray *moreMenus = [NSMutableArray array];
    [moreMenus addObject:({
        TUIInputMoreCellData *data = [TUIInputMoreCellData new];
        data.image = [UIImage tk_imageNamed:@"more_custom"];
        data.title = NSLocalizedString(@"MoreCustom", nil);
        data;
    })];
    *priority = MoreCellPriority_Nomal;
    return moreMenus;
}

- (void)chatController:(TUIChatController *)chatController onSelectMoreCell:(TUIInputMoreCell *)cell
{
    if ([cell.data.title isEqualToString:NSLocalizedString(@"MoreCustom", nil)]) {
        NSString *text = @"欢迎加入腾讯·云通信大家庭！";
        NSString *link = @"https://cloud.tencent.com/document/product/269/3794";
        MyCustomCellData *cellData = [[MyCustomCellData alloc] initWithDirection:MsgDirectionOutgoing];
        cellData.text = text;
        cellData.link = link;
        cellData.innerMessage = [[V2TIMManager sharedInstance] createCustomMessage:[TCUtil dictionary2JsonData:@{@"version": @(TextLink_Version),@"businessID": TextLink,@"text":text,@"link":link}]];
        [chatController sendMessage:cellData];
        
        if ([_conversationData.groupID isEqualToString:@"im_demo_admin"] || [_conversationData.userID isEqualToString:@"im_demo_admin"]) {
            [TCUtil report:Action_Sendmsg2helper actionSub:@"" code:@(0) msg:@"sendmsg2helper"];
        }
        else if ([_conversationData.groupID isEqualToString:@"@TGS#33NKXK5FK"] || [_conversationData.userID isEqualToString:@"@TGS#33NKXK5FK"]) {
            [TCUtil report:Action_Sendmsg2defaultgrp actionSub:@"" code:@(0) msg:@"sendmsg2defaultgrp"];
        }
        [TCUtil report:Action_SendMsg actionSub:Action_Sub_Sendcustom code:@(0) msg:@"sendcustom"];
    }
}

- (TUIMessageCellData *)chatController:(TUIChatController *)controller onNewMessage:(V2TIMMessage *)msg
{
    if (msg.elemType == V2TIM_ELEM_TYPE_CUSTOM) {
        NSDictionary *param = [TCUtil jsonData2Dictionary:msg.customElem.data];
        if (param != nil) {
            NSString *businessID = param[@"businessID"];
            if (![businessID isKindOfClass:[NSString class]]) {
                return nil;
            }
            // 判断是不是自定义跳转消息
            if ([businessID isEqualToString:TextLink] || ([(NSString *)param[@"text"] length] > 0 && [(NSString *)param[@"link"] length] > 0)) {
                MyCustomCellData *cellData = [[MyCustomCellData alloc] initWithDirection:msg.isSelf ? MsgDirectionOutgoing : MsgDirectionIncoming];
                cellData.innerMessage = msg;
                cellData.msgID = msg.msgID;
                cellData.text = param[@"text"];
                cellData.link = param[@"link"];
                cellData.avatarUrl = [NSURL URLWithString:msg.faceURL];
                return cellData;
            }
            // 判断是不是群创建自定义消息
            else if ([businessID isEqualToString:GroupCreate] || [param.allKeys containsObject:GroupCreate]) {
                GroupCreateCellData *cellData = [[GroupCreateCellData alloc] initWithDirection:msg.isSelf ? MsgDirectionOutgoing : MsgDirectionIncoming];
                cellData.content = [NSString stringWithFormat:@"\"%@\"%@",param[@"opUser"],param[@"content"]];
                return cellData;
            }
        }
    }
    return nil;
}

- (TUIMessageCell *)chatController:(TUIChatController *)controller onShowMessageData:(TUIMessageCellData *)data
{
    if ([data isKindOfClass:[MyCustomCellData class]]) {
        MyCustomCell *myCell = [[MyCustomCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"MyCell"];
        [myCell fillWithData:(MyCustomCellData *)data];
        return myCell;
    } else if ([data isKindOfClass:[GroupCreateCellData class]]) {
        GroupCreateCell *groupCell = [[GroupCreateCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"GroupCreateCell"];
        [groupCell fillWithData:(GroupCreateCellData *)data];
        return groupCell;
    }
    return nil;
}

- (void)chatController:(TUIChatController *)controller onSelectMessageContent:(TUIMessageCell *)cell
{
    if ([cell isKindOfClass:[MyCustomCell class]]) {
        MyCustomCellData *cellData = [(MyCustomCell *)cell customData];
        if (cellData.link) {
            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:cellData.link]];
        }
    }
}

- (NSString *)chatController:(TUIChatController *)controller onGetMessageAbstact:(V2TIMMessage *)msg {
    if (msg.elemType == V2TIM_ELEM_TYPE_CUSTOM) {
        NSDictionary *param = [TCUtil jsonData2Dictionary:msg.customElem.data];
        if (param != nil) {
            NSString *businessID = param[@"businessID"];
            // 判断是不是自定义跳转消息
            if ([businessID isEqualToString:TextLink] || ([(NSString *)param[@"text"] length] > 0 && [(NSString *)param[@"link"] length] > 0)) {
                return param[@"text"];
            }
            // 判断是不是群创建自定义消息
            else if ([businessID isEqualToString:GroupCreate] || [param.allKeys containsObject:GroupCreate]) {
                return [NSString stringWithFormat:@"\"%@\"%@",param[@"opUser"],param[@"content"]];
            }
        }
    }
    return nil;
}


- (void)chatController:(TUIChatController *)controller onSelectMessageAvatar:(TUIMessageCell *)cell {
#warning todo  点击头像进去个人主页他视
    
}

- (BOOL)messageController:(TUIMessageController *)controller willShowMenuInCell:(UIView *)view {
    return NO;
}
#if ENABLELIVE
#pragma mark - TUILiveRoomAnchorDelegate
- (void)onRoomCreate:(TRTCLiveRoomInfo *)roomInfo {
    [[TUILiveRoomManager sharedManager] createRoom:SDKAPPID type:@"groupLive" roomID:[NSString stringWithFormat:@"%@", roomInfo.roomId] success:^{
        NSLog(@"----> 业务层创建群直播房间成功: roomId:%@", roomInfo.roomId);
        [TUILiveHeartBeatManager.shareManager startWithType:@"groupLive" roomId:roomInfo.roomId];
    } failed:^(int code, NSString * _Nonnull errorMsg) {
        NSLog(@"----> 业务层创建群直播房间失败，%d, %@", code, errorMsg);
    }];

}

- (void)onRoomDestroy:(TRTCLiveRoomInfo *)roomInfo {
    [[TUILiveRoomManager sharedManager] destroyRoom:SDKAPPID type:@"groupLive" roomID:[NSString stringWithFormat:@"%@", roomInfo.roomId] success:^{
        NSLog(@"----> 业务层销毁群直播房间成功");
        [TUILiveHeartBeatManager.shareManager stop];
    } failed:^(int code, NSString * _Nonnull errorMsg) {
        NSLog(@"----> 业务层销毁群直播房间失败，%d, %@", code, errorMsg);
    }];
}

- (TUIGroupLiveMessageCellData *)groupLiveCellDataWith:(TRTCLiveRoomInfo *)roomInfo roomStatus:(NSInteger)status {
    TUIGroupLiveMessageCellData *cellData = [[TUIGroupLiveMessageCellData alloc] initWithDirection:MsgDirectionOutgoing];
    cellData.anchorName = roomInfo.ownerName?:@"";
    cellData.roomInfo = @{
        @"roomId":roomInfo.roomId?:@"",
        @"version":@(AVCall_Version),
        @"roomName":roomInfo.roomName?:@"",
        @"roomCover":roomInfo.coverUrl?:@"",
        @"roomType":@"liveRoom",
        @"roomStatus":@(status),
        @"anchorId":roomInfo.ownerId?:@"",
        @"anchorName":roomInfo.ownerName?:@""
    };
    cellData.status = Msg_Status_Init;
    return cellData;
}
#endif
@end

// 聊天界面用到的其他内容功能

@interface IMUpdateGrdateView()
@property (strong, nonatomic)  UIView *bg_view;
@property (strong, nonatomic)  UIButton *top_btn;
@property (strong, nonatomic)  UIButton *upgrade_btn;
@property (strong, nonatomic)  UIButton *cancel_btn;
@property (strong, nonatomic)  UIImageView *centerImage;
@property (strong, nonatomic)  UILabel *detail_lab;
@end
 
@implementation IMUpdateGrdateView

- (UIImageView *)centerImage
{
    if (!_centerImage) {
        _centerImage = [[UIImageView alloc]init];
        _centerImage.contentMode = UIViewContentModeScaleAspectFill;
        _centerImage.image = [UIImage imageNamed:TUIKitResource(@"im_updategrade")];
    }
    return _centerImage;
}

- (UIView *)bg_view
{
    if (!_bg_view) {
        _bg_view = [[UIView alloc]init];
        _bg_view.backgroundColor = RGB(50, 48, 49);
        _bg_view.layer.cornerRadius = 8.0f;
        _bg_view.layer.masksToBounds = YES;
    }
    return _bg_view;
}

- (UIButton *)top_btn
{
    if (!_top_btn) {
        _top_btn = [[UIButton alloc]init];
        _top_btn.layer.cornerRadius = 1.0f;
        _top_btn.layer.masksToBounds = YES;
        [_top_btn setTitle:@"Tips" forState:UIControlStateNormal];
        [_top_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _top_btn.titleLabel.font = [UIFont boldSystemFontOfSize:20];
        [_top_btn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 60),55) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _top_btn;
}

- (UIButton *)upgrade_btn
{
    if (!_upgrade_btn) {
        _upgrade_btn = [[UIButton alloc]init];
        _upgrade_btn.layer.cornerRadius = 8.0f;
        _upgrade_btn.layer.masksToBounds = YES;
        [_upgrade_btn setTitle:@"Upgrade" forState:UIControlStateNormal];
        [_upgrade_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _upgrade_btn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_upgrade_btn addTarget:self action:@selector(actionUpgradebtn:) forControlEvents:UIControlEventTouchUpInside];
        [_upgrade_btn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 100)/2,50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _upgrade_btn;
}
-(void)actionUpgradebtn:(UIButton *)btn
{
    NSLog(@"actionUpgradebtn btn");
    if(self.IMUpdateGrdateViewUpgradeBlock){
        self.IMUpdateGrdateViewUpgradeBlock();
    }
    [self removeFromSuperview];
}
- (UIButton *)cancel_btn
{
    if (!_cancel_btn) {
        _cancel_btn = [[UIButton alloc]init];
        _cancel_btn.layer.cornerRadius = 8.0f;
        _cancel_btn.layer.masksToBounds = YES;
        [_cancel_btn setTitle:@"Cancel" forState:UIControlStateNormal];
        [_cancel_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _cancel_btn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_cancel_btn addTarget:self action:@selector(actionDelCancelbtn:) forControlEvents:UIControlEventTouchUpInside];
        [_cancel_btn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 100)/2,50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _cancel_btn;
}
-(void)actionDelCancelbtn:(UIButton *)btn
{
    NSLog(@"actionDelCancelbtn btn");
    if(self.IMUpdateGrdateViewUpgradeDissmissBlock){
        self.IMUpdateGrdateViewUpgradeDissmissBlock();
    }
    [self removeFromSuperview];
}
- (UILabel *)detail_lab
{
    if (!_detail_lab) {
        _detail_lab = [[UILabel alloc]init];
        _detail_lab.text = @"Upgrade to Premium member to send messages unlimited.";
        _detail_lab.numberOfLines = 0 ;
        _detail_lab.textColor = [UIColor whiteColor];
        _detail_lab.textAlignment = NSTextAlignmentCenter;
    }
    return _detail_lab;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    self.backgroundColor =  [[UIColor blackColor] colorWithAlphaComponent:0.5];
    [self addSubview:self.bg_view];
    [self.bg_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.centerY.mas_equalTo(self).offset(-30);
        make.left.offset(30);
        make.right.offset(-30);
        make.height.offset(450);
    }];
        
    [self.bg_view addSubview:self.top_btn];
    [self.top_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.offset(0);
        make.height.offset(55);
    }];
    [self.bg_view addSubview:self.centerImage];
    [self.centerImage mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bg_view);
        make.centerY.mas_equalTo(self.bg_view);
    }];
    [self.bg_view addSubview:self.detail_lab];
    [self.detail_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bg_view);
        make.top.mas_equalTo(self.centerImage.mas_bottom).offset(10);
        make.left.offset(15);
        make.right.offset(-15);
    }];
    [self addSubview:self.cancel_btn];
    [self.cancel_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(30);
        make.top.mas_equalTo(self.bg_view.mas_bottom).offset(15);
        make.width.offset((IPHONE_WIDTH - 80)/2);
        make.height.offset(50);
    }];
    
    [self addSubview:self.upgrade_btn];
    [self.upgrade_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-30);
        make.top.mas_equalTo(self.bg_view.mas_bottom).offset(15);
        make.width.offset((IPHONE_WIDTH - 80)/2);
        make.height.offset(50);
    }];
}

- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
    CGPoint location = [[touches anyObject] locationInView:self];
    if (![self.bg_view pointInside:[self.bg_view convertPoint:location fromView:self.bg_view.window] withEvent:nil]){
        [self removeFromSuperview];
    }
}
@end

@interface CXMessageFraudAlterView ()
@property (strong, nonatomic)  UIView *bg_view;
@property (strong, nonatomic)  UIButton *top_btn;
@property (strong, nonatomic)  UILabel *detail_lab;
@property (strong, nonatomic)  UIButton *ok_btn;
@end

@implementation CXMessageFraudAlterView
- (UIView *)bg_view
{
    if (!_bg_view) {
        _bg_view = [[UIView alloc]init];
        _bg_view.backgroundColor = RGB(50, 48, 49);
        _bg_view.layer.cornerRadius = 8.0f;
        _bg_view.layer.masksToBounds = YES;
    }
    return _bg_view;
}

- (UIButton *)top_btn
{
    if (!_top_btn) {
        _top_btn = [[UIButton alloc]init];
        _top_btn.layer.cornerRadius = 1.0f;
        _top_btn.layer.masksToBounds = YES;
        [_top_btn setTitle:@"Tips" forState:UIControlStateNormal];
        [_top_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _top_btn.titleLabel.font = [UIFont boldSystemFontOfSize:20];
        [_top_btn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 60),55) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _top_btn;
}

- (UILabel *)detail_lab
{
    if(!_detail_lab){
        _detail_lab = [[UILabel alloc]init];
        _detail_lab.text = @"Intelligent system has detected that this member has sent fraud message. This member's account has been suspended. Please don't believe any message of this member.";
        _detail_lab.numberOfLines = 0 ;
        _detail_lab.textColor = [UIColor whiteColor];
        _detail_lab.textAlignment = NSTextAlignmentCenter;
    }
    return _detail_lab;
}

- (UIButton *)ok_btn
{
    if (!_ok_btn) {
        _ok_btn = [[UIButton alloc]init];
        _ok_btn.layer.cornerRadius = 8.0f;
        _ok_btn.layer.masksToBounds = YES;
        [_ok_btn setTitle:@"OK" forState:UIControlStateNormal];
        [_ok_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _ok_btn.titleLabel.font = [UIFont boldSystemFontOfSize:18];
        [_ok_btn addTarget:self action:@selector(actionDelCancelbtn:) forControlEvents:UIControlEventTouchUpInside];
        [_ok_btn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 100)/2,50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _ok_btn;
}

-(void)actionDelCancelbtn:(UIButton *)btn
{
    if (self.CXMessageFraudAlterViewOKBlock) {
        self.CXMessageFraudAlterViewOKBlock();
    }
    [self removeFromSuperview];
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    self.backgroundColor =  [[UIColor blackColor] colorWithAlphaComponent:0.5];
    [self addSubview:self.bg_view];
    [self.bg_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.centerY.mas_equalTo(self);
        make.left.offset(30);
        make.right.offset(-30);
        make.height.offset(450);
    }];
        
    [self.bg_view addSubview:self.top_btn];
    [self.top_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.offset(0);
        make.height.offset(55);
    }];
    [self.bg_view addSubview:self.detail_lab];
    [self.detail_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bg_view);
        make.centerY.mas_equalTo(self.bg_view).offset(-20);
        make.left.offset(15);
        make.right.offset(-15);
    }];
    [self addSubview:self.ok_btn];
    [self.ok_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.bottom.offset(40);
        make.centerX.mas_equalTo(self.bg_view);
        make.width.offset(200);
        make.height.offset(55);
    }];
}
@end


@interface CXMessageMuteAlterView ()
@property (strong, nonatomic)  UIView *bg_view;
@property (strong, nonatomic)  UIButton *top_btn;
@property (strong, nonatomic)  UILabel *detail_lab;
@property (strong, nonatomic)  UIButton *feedback_btn;
@end

@implementation CXMessageMuteAlterView
- (UIView *)bg_view
{
    if (!_bg_view) {
        _bg_view = [[UIView alloc]init];
        _bg_view.backgroundColor = RGB(50, 48, 49);
        _bg_view.layer.cornerRadius = 8.0f;
        _bg_view.layer.masksToBounds = YES;
    }
    return _bg_view;
}

- (UIButton *)top_btn
{
    if (!_top_btn) {
        _top_btn = [[UIButton alloc]init];
        _top_btn.layer.cornerRadius = 1.0f;
        _top_btn.layer.masksToBounds = YES;
        [_top_btn setTitle:@"Tips" forState:UIControlStateNormal];
        [_top_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _top_btn.titleLabel.font = [UIFont boldSystemFontOfSize:20];
        [_top_btn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 60),55) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _top_btn;
}

- (UILabel *)detail_lab
{
    if(!_detail_lab){
        _detail_lab = [[UILabel alloc]init];
        _detail_lab.text = @"Intelligent system detects that you have violated the rules. We will suspend your account for 24 hours, please use your account after 24 hours. The review team will review your account as soon as possible, if you send fraud message, we will permanently ban your account.";
        _detail_lab.numberOfLines = 0 ;
        _detail_lab.textColor = [UIColor whiteColor];
        _detail_lab.textAlignment = NSTextAlignmentCenter;
    }
    return _detail_lab;
}

- (UIButton *)feedback_btn
{
    if (!_feedback_btn) {
        _feedback_btn = [[UIButton alloc]init];
        _feedback_btn.layer.cornerRadius = 8.0f;
        _feedback_btn.layer.masksToBounds = YES;
        [_feedback_btn setTitle:@"Feedback" forState:UIControlStateNormal];
        [_feedback_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _feedback_btn.titleLabel.font = [UIFont boldSystemFontOfSize:18];
        [_feedback_btn addTarget:self action:@selector(actionFeedBackbtn:) forControlEvents:UIControlEventTouchUpInside];
        [_feedback_btn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 100)/2,50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _feedback_btn;
}

-(void)actionFeedBackbtn:(UIButton *)btn
{
    if(self.CXMessageMuteAlterViewFeedBackBlock){
        self.CXMessageMuteAlterViewFeedBackBlock();
    }
    [self removeFromSuperview];
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    self.backgroundColor =  [[UIColor blackColor] colorWithAlphaComponent:0.5];
    [self addSubview:self.bg_view];
    [self.bg_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.centerY.mas_equalTo(self);
        make.left.offset(30);
        make.right.offset(-30);
        make.height.offset(450);
    }];
        
    [self.bg_view addSubview:self.top_btn];
    [self.top_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.offset(0);
        make.height.offset(55);
    }];
    [self.bg_view addSubview:self.detail_lab];
    [self.detail_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bg_view);
        make.centerY.mas_equalTo(self.bg_view).offset(-20);
        make.left.offset(15);
        make.right.offset(-15);
    }];
    [self addSubview:self.feedback_btn];
    [self.feedback_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.bottom.offset(40);
        make.centerX.mas_equalTo(self.bg_view);
        make.width.offset(200);
        make.height.offset(55);
    }];
}

@end

@interface VerifyAccountUpdateView()
@property (strong, nonatomic)  UIView *bgView;
@property (strong, nonatomic)  UIButton *top_btn;
@property (strong, nonatomic)  UIButton *messageBtn;
@property (strong, nonatomic)  UIButton *cancelBtn;
@property (strong, nonatomic)  UILabel *conentLab;
@property (strong, nonatomic)  UIImageView *centerImage;
@end

@implementation VerifyAccountUpdateView

- (UIImageView *)centerImage
{
    if (!_centerImage) {
        _centerImage = [[UIImageView alloc]init];
        _centerImage.contentMode = UIViewContentModeScaleAspectFill;
        _centerImage.image = [UIImage imageNamed:TUIKitResource(@"account_ke")];
    }
    return _centerImage;
}

- (UIView *)bgView
{
    if (!_bgView) {
        _bgView = [[UIView alloc]init];
        _bgView.backgroundColor = RGB(50, 48, 49);
        _bgView.layer.cornerRadius = 8.0f;
        _bgView.layer.masksToBounds = YES;
    }
    return _bgView;
}

- (UIButton *)top_btn
{
    if (!_top_btn) {
        _top_btn = [[UIButton alloc]init];
        _top_btn.layer.cornerRadius = 1.0f;
        _top_btn.layer.masksToBounds = YES;
        [_top_btn setTitle:@"Verify Account" forState:UIControlStateNormal];
        [_top_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _top_btn.titleLabel.font = [UIFont boldSystemFontOfSize:20];
        [_top_btn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 60),55) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _top_btn;
}

- (UIButton *)messageBtn
{
    if (!_messageBtn) {
        _messageBtn = [[UIButton alloc]init];
        _messageBtn.layer.cornerRadius = 8.0f;
        _messageBtn.layer.masksToBounds = YES;
        [_messageBtn setTitle:@"Message" forState:UIControlStateNormal];
        [_messageBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _messageBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_messageBtn addTarget:self action:@selector(actionMessagebtn:) forControlEvents:UIControlEventTouchUpInside];
        [_messageBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 100)/2,50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _messageBtn;
}
-(void)actionMessagebtn:(UIButton *)btn
{
    NSLog(@"actionMessagebtn btn");
    [self removeFromSuperview];
}
- (UIButton *)cancelBtn
{
    if (!_cancelBtn) {
        _cancelBtn = [[UIButton alloc]init];
        _cancelBtn.layer.cornerRadius = 8.0f;
        _cancelBtn.layer.masksToBounds = YES;
        [_cancelBtn setTitle:@"Cancel" forState:UIControlStateNormal];
        [_cancelBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _cancelBtn.titleLabel.font = [UIFont systemFontOfSize:16];
        [_cancelBtn addTarget:self action:@selector(actionCancelbtn:) forControlEvents:UIControlEventTouchUpInside];
        [_cancelBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH - 100)/2,50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    return _cancelBtn;
}
-(void)actionCancelbtn:(UIButton *)btn
{
    NSLog(@"actionDelCancelbtn btn");
    [self removeFromSuperview];
}

- (UILabel *)conentLab
{
    if (!_conentLab) {
        _conentLab = [[UILabel alloc]init];
        _conentLab.text = @"Seeking is a serious dating app. Please add a supporting customer service account for authentication.Only authenticated accounts can use this function. Whatsapp: +123456789012 snapchat: sahdfjhfsfjh instagram：gdsjhdgsf facebook：sjsdkjdfad";
        _conentLab.numberOfLines = 0 ;
        _conentLab.textColor = [UIColor whiteColor];
        _conentLab.textAlignment = NSTextAlignmentCenter;
    }
    return _conentLab;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

- (void)setTitleStr:(NSString *)titleStr
{
    _titleStr = titleStr;
    self.conentLab.text = titleStr;
    CGFloat ContentHeigth = [self GetLSwLabelHeightWithText:titleStr width:IPHONE_WIDTH-60 font:15];
    CGFloat totalHight =  ContentHeigth + 360;
    if (totalHight >IPHONE_HEIGHT-50) {
        totalHight = IPHONE_HEIGHT-50;
    }else{
        totalHight = totalHight;
    }
    [self.bgView mas_updateConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.centerY.mas_equalTo(self).offset(0);
        make.left.offset(30);
        make.right.offset(-30);
        make.height.offset(totalHight);
    }];
}

-(float)GetLSwLabelHeightWithText:(NSString *)text width:(float)width font: (float)font
{
    CGRect rect = [text boundingRectWithSize:CGSizeMake(width, MAXFLOAT) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:font]} context:nil];
    return rect.size.height;
}

-(void)setupUI
{
    self.backgroundColor =  [[UIColor blackColor] colorWithAlphaComponent:0.5];
    [self addSubview:self.bgView];
    [self.bgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.centerY.mas_equalTo(self).offset(0);
        make.left.offset(30);
        make.right.offset(-30);
        make.height.offset(450);
    }];
        
    [self.bgView addSubview:self.top_btn];
    [self.top_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.offset(0);
        make.height.offset(55);
    }];
    [self.bgView addSubview:self.centerImage];
    [self.centerImage mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bgView);
        make.top.mas_equalTo(self.top_btn.mas_bottom).offset(20);
    }];
    [self.bgView addSubview:self.cancelBtn];
    [self.cancelBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.bottom.offset(-15);
        make.width.offset((IPHONE_WIDTH - 100)/2);
        make.height.offset(50);
    }];

    [self.bgView addSubview:self.messageBtn];
    [self.messageBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-15);
        make.bottom.offset(-15);
        make.width.offset((IPHONE_WIDTH - 100)/2);
        make.height.offset(50);
    }];
    [self.bgView addSubview:self.conentLab];
    [self.conentLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.bottom.mas_equalTo(self.cancelBtn.mas_top).offset(-15);
        make.top.mas_equalTo(self.centerImage.mas_bottom).offset(15);
        make.left.offset(15);
        make.right.offset(-15);
    }];
}
/*
 CGFloat ContentHeigth = [aView GetLSwLabelHeightWithText:titleStr width:KscreenW-60 font:15];
 CGFloat totalHight =  ContentHeigth + 360;
 if (totalHight >KscreenH-50) {
     totalHight = KscreenH-50;
 }else{
     totalHight = totalHight;
 }
 */
@end

@interface CXMessageConversationViewCell ()

@end

@implementation CXMessageConversationViewCell

- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier
{
    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
    if (self) {
        
        _bgView = [[UIView alloc]init];
        _bgView.backgroundColor = RGB(48, 48, 48);
        _bgView.clipsToBounds = YES;
        _bgView.layer.cornerRadius = 5;
        [self.contentView addSubview:_bgView];

        
        _bgHeaderView = [[UIView alloc]init];
        _bgHeaderView.backgroundColor = [UIColor colorWithWhite:1.0 alpha:0.08];
        _bgHeaderView.clipsToBounds = YES;
        _bgHeaderView.layer.cornerRadius = 43;
        [self.contentView addSubview:_bgHeaderView];
        
        
        _headImageView = [[UIImageView alloc] init];
        _headImageView.layer.cornerRadius = 40;
        _headImageView.layer.masksToBounds = YES;
        //_headImageView.layer.borderColor = RGBA(255, 255, 255, 0.3).CGColor;
        //_headImageView.layer.borderWidth = 2;
        [self.contentView addSubview:_headImageView];

        _timeLabel = [[UILabel alloc] init];
        _timeLabel.font = [UIFont systemFontOfSize:12];
        _timeLabel.textColor = [UIColor whiteColor];
        _timeLabel.layer.masksToBounds = YES;
        [self.contentView addSubview:_timeLabel];

        _titleLabel = [[UILabel alloc] init];
        _titleLabel.font = [UIFont boldSystemFontOfSize:18];
        _titleLabel.textColor = [UIColor whiteColor];
        _titleLabel.layer.masksToBounds = YES;
        [self.contentView addSubview:_titleLabel];

        _unReadView = [[TUnReadView alloc] init];
        _unReadView.backgroundColor = RGB(247, 76, 49);
        [self.contentView addSubview:_unReadView];

        _subTitleLabel = [[UILabel alloc] init];
        _subTitleLabel.layer.masksToBounds = YES;
        _subTitleLabel.font = [UIFont systemFontOfSize:15];
        _subTitleLabel.textColor = RGB(255, 188, 62);
        [self.contentView addSubview:_subTitleLabel];
        
//        _disturbImageView = [[UIImageView alloc] init];
//        [self.contentView addSubview:_disturbImageView];

        [self setSeparatorInset:UIEdgeInsetsMake(0, TConversationCell_Margin, 0, 0)];

        [self setSelectionStyle:UITableViewCellSelectionStyleNone];
        //[self setSelectionStyle:UITableViewCellSelectionStyleDefault];
        
        // selectedIcon
//        _selectedIcon = [[UIImageView alloc] init];
//        [self.contentView addSubview:_selectedIcon];
    }
    return self;
}
- (void)fillWithData:(TUIConversationCellData *)convData
{
    [super fillWithData:convData];
    self.convData = convData;

    self.timeLabel.text = [convData.time tk_messageString];
    self.subTitleLabel.attributedText = convData.subTitle;
    
    if (convData.isNotDisturb) {
        self.disturbImageView.hidden = NO;
        self.unReadView.hidden = YES;
        UIImage *image = [UIImage d_imageWithImageLight:TUIKitResource(@"message_not_disturb") dark:TUIKitResource(@"message_not_disturb_dark")];
        [self.disturbImageView setImage:image];
    } else {
        self.disturbImageView.hidden = YES;
        self.unReadView.hidden = NO;
        [self.unReadView setNum:convData.unreadCount];
    }
    
    @weakify(self)
    [[[RACObserve(convData, title) takeUntil:self.rac_prepareForReuseSignal]
      distinctUntilChanged] subscribeNext:^(NSString *x) {
        @strongify(self)
        self.titleLabel.text = x;
    }];
    
    // 修改默认头像
    if (convData.groupID.length > 0) {
        // 群组, 则将群组默认头像修改成上次使用的头像
        NSString *key = [NSString stringWithFormat:@"TUIConversationLastGroupMember_%@", convData.groupID];
        NSInteger member = [NSUserDefaults.standardUserDefaults integerForKey:key];
        UIImage *avatar = [CreatGroupAvatar getCacheAvatarForGroup:convData.groupID number:(UInt32)member];
        if (avatar) {
            convData.avatarImage = avatar;
        }
    }
    
    [[RACObserve(convData,faceUrl) takeUntil:self.rac_prepareForReuseSignal] subscribeNext:^(NSString *x) {
        @strongify(self)
        if (self.convData.groupID.length > 0) { //群组
            // fix: 由于getCacheGroupAvatar需要请求网络，断网时，由于并没有设置headImageView，此时当前会话发消息，会话会上移，复用了第一条会话的头像，导致头像错乱
            self.headImageView.image = self.convData.avatarImage;
            [CreatGroupAvatar getCacheGroupAvatar:convData.groupID callback:^(UIImage *avatar) {
                @strongify(self)
                if (avatar != nil) { //已缓存群组头像
                    self.headImageView.image = avatar;
                } else { //未缓存群组头像
                    [self.headImageView sd_setImageWithURL:[NSURL URLWithString:x]
                                          placeholderImage:self.convData.avatarImage];
                    [CreatGroupAvatar fetchGroupAvatars:convData.groupID placeholder:convData.avatarImage callback:^(BOOL success, UIImage *image, NSString *groupID) {
                        @strongify(self)
                        if ([groupID isEqualToString:self.convData.groupID]) {
                            // 需要判断下，防止复用问题
                            [self.headImageView sd_setImageWithURL:[NSURL URLWithString:x] placeholderImage:image];
                        }
                    }];
                }
            }];
        } else {//个人头像
            NSLog(@"个人头像");
            NSLog(@"x:%@",x);
//            NSString *prefixStr = [NSString stringWithFormat:@"%@",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th];
//            NSLog(@"prefixStr:%@",prefixStr);
//            NSArray *array = [x componentsSeparatedByString:@"//"];
//            NSLog(@"arrary[0]:%@",array[0]);
//            NSLog(@"arrary[1]:%@",array[1]);
//            NSArray *array2 = [array[1] componentsSeparatedByString:@"/"];
//            NSLog(@"array2[0]:%@",array2[0]);
//            NSLog(@"array2[1]:%@",array2[1]);
//            NSString *baseurl = [NSString stringWithFormat:@"%@/%@",prefixStr,array2[1]];
//            NSLog(@"baseurl:%@",baseurl);
//            NSLog(@"x:%@",x);
            [self.headImageView sd_setImageWithURL:[NSURL URLWithString:x]
                                  placeholderImage:[UIImage imageNamed:TUIKitResource(@"nsc_defautl")]];
        }
    }];
//    NSString *imageName = (convData.showCheckBox && convData.selected) ? TUIKitResource(@"icon_contact_select_selected") : TUIKitResource(@"icon_contact_select_normal");
//    self.selectedIcon.image = [UIImage imageNamed:imageName];
    self.headImageView.contentMode = UIViewContentModeScaleAspectFill;
}

- (void)layoutSubviews
{
    [super layoutSubviews];
//    CGFloat height = [self.convData heightOfWidth:self.mm_w];
//    self.mm_h = height;
//    CGFloat imgHeight = height-2*(10);

    if (self.convData.showCheckBox) {
        _selectedIcon.mm_width(20).mm_height(20);
        _selectedIcon.mm_x = 10;
        _selectedIcon.mm_centerY = self.headImageView.mm_centerY;
        _selectedIcon.hidden = NO;
    } else {
//        _selectedIcon.mm_width(20).mm_height(20);
//        _selectedIcon.mm_x = 0;
//        _selectedIcon.mm_y = 0;
//        _selectedIcon.hidden = YES;
    }

    self.bgView.mm_width(Screen_Width - 20).mm_height(100).mm_left(10).mm_right(10).mm_top(5);
    self.bgHeaderView.mm_width(86).mm_height(86).mm_left(10 + 7).mm_top(12);
    self.headImageView.mm_width(80).mm_height(80).mm_left(10 + 10).mm_top(15);
    
    self.timeLabel.mm_sizeToFit().mm_top(14).mm_right(14 + 4);
    self.titleLabel.mm_sizeToFitThan(120, 30).mm_top(27).mm_left(self.headImageView.mm_maxX+TConversationCell_Margin);
    self.unReadView.mm_right(14 + 4).mm_bottom(44 - 1);
//    self.disturbImageView.mm_width(TConversationCell_Margin_Disturb).mm_height(TConversationCell_Margin_Disturb).mm_right(16).mm_bottom(15);
    self.subTitleLabel.mm_sizeToFit().mm_left(self.titleLabel.mm_x).mm_bottom(27).mm_flexToRight(self.mm_w-self.unReadView.mm_x);
    
    self.backgroundColor = [UIColor clearColor];
    self.contentView.backgroundColor = [UIColor clearColor];
}

- (void)setIsHideSubTitleInfo:(BOOL)isHideSubTitleInfo {
    _isHideSubTitleInfo = isHideSubTitleInfo;
    
    if (isHideSubTitleInfo) {
        NSMutableAttributedString *str = [[NSMutableAttributedString alloc]initWithString:@"You've got new news"];
        self.subTitleLabel.attributedText = str;
        self.subTitleLabel.textColor = RGB(255, 188, 62);
    }
    else {
        self.subTitleLabel.attributedText = self.convData.subTitle;
        self.subTitleLabel.textColor = RGB(255, 188, 62);
    }
}

@end

@interface CXMessageNoDataAlertView()
@property (nonatomic, strong) UIImageView *topImageView;

@property (nonatomic, strong) UILabel *titleLab;

@property (nonatomic, strong) UIButton *bottomBtn;
@end

@implementation CXMessageNoDataAlertView

- (instancetype)init {
    if (self = [super init]) {
        self.backgroundColor = HexString(@"#1f1f1f");
        [self setupUI];
    }
    return self;
}

- (void)setupUI {
    [self addSubview:self.topImageView];
    [self addSubview:self.titleLab];
    [self addSubview:self.bottomBtn];
}
- (void)layoutSubviews {
    [super layoutSubviews];
    [self.topImageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.width.mas_offset(150);
        make.height.mas_offset(120);
        make.centerX.mas_equalTo(self);
        make.top.mas_offset(130);
    }];
    [self.titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.mas_offset(0);
        make.top.mas_equalTo(self.topImageView.mas_bottom).mas_offset(25);
        make.height.mas_offset(60);
    }];
    
    [self.bottomBtn  mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_offset(30);
        make.right.mas_offset(-30);
        make.height.mas_offset(50);
        make.top.mas_equalTo(self.titleLab.mas_bottom).mas_offset(100);
    }];
}

- (UIImageView *)topImageView {
    if (!_topImageView) {
        _topImageView = [[UIImageView alloc]init];
        _topImageView.image = [UIImage imageNamed:TUIKitResource(@"vr-noinfo1")];
    }
    return _topImageView;
}
- (UILabel *)titleLab {
    if (!_titleLab) {
        _titleLab = [[UILabel alloc]init];
        _titleLab.font = [UIFont boldSystemFontOfSize:17];
        NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
        if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th isEqualToString:@"1"]) {
            _titleLab.text = @"No one is here?\nSearch voice to chat now!";
        }else{
            _titleLab.text = @"No one is here?\nSearch someone to chat now!";
        }
        _titleLab.numberOfLines = 2;
        _titleLab.textAlignment = NSTextAlignmentCenter;
        _titleLab.textColor = [UIColor whiteColor];
    }
    return _titleLab;
}
- (UIButton *)bottomBtn {
    if (!_bottomBtn) {
        _bottomBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
        [_bottomBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH-60), 50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th isEqualToString:@"1"]) {
            [_bottomBtn setTitle:@"Search voice" forState:UIControlStateNormal];
        }else{
            [_bottomBtn setTitle:@"Search match" forState:UIControlStateNormal];
        }
        _bottomBtn.titleLabel.font = [UIFont boldSystemFontOfSize:17];
        [_bottomBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _bottomBtn.layer.cornerRadius = 8.0f;
        _bottomBtn.layer.masksToBounds = YES;
        [_bottomBtn addTarget:self action:@selector(bottomBtnClick) forControlEvents:UIControlEventTouchUpInside];
    }
    return _bottomBtn;
}

- (void)bottomBtnClick {
    if (self.CXMessageNoDataAlertViewBottomClickBlock) {
        self.CXMessageNoDataAlertViewBottomClickBlock();
    }
}
@end

@interface CXChatBlockAlertView ()
@property (nonatomic, strong) UIButton *chat_btn_0;

@property (nonatomic, strong) UIButton *chat_btn_2;

@property (nonatomic, strong) UIButton *chat_btn_3;
@end

@implementation CXChatBlockAlertView
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupBlockUI];
    }
    return self;
}
-(void)setupBlockUI
{
    self.backgroundColor = RGBA(0, 0, 0, 0.8);
    self.chat_btn_0 = [UIButton buttonWithType:UIButtonTypeCustom];
    self.chat_btn_0.backgroundColor = RGB(40, 40, 40);
    self.chat_btn_0.clipsToBounds = YES;
    self.chat_btn_0.layer.cornerRadius = 10;
    [self.chat_btn_0 setTitle:@"View profile" forState:UIControlStateNormal];
    self.chat_btn_0.titleLabel.font = [UIFont boldSystemFontOfSize:16];
    [self.chat_btn_0 setTitleColor:RGB(198, 198, 198) forState:UIControlStateNormal];
    [self.chat_btn_0 addTarget:self action:@selector(BlokcbtnsClick:) forControlEvents:UIControlEventTouchUpInside];
    self.chat_btn_0.tag = 1000;
    [self addSubview:self.chat_btn_0];
    NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
    if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th intValue] == 10) {
        self.chat_btn_0.hidden = YES;
    }else{
        self.chat_btn_0.hidden = NO;
    }
    self.chat_btn_1 = [UIButton buttonWithType:UIButtonTypeCustom];
    self.chat_btn_1.backgroundColor = RGB(40, 40, 40);
    self.chat_btn_1.clipsToBounds = YES;
    self.chat_btn_1.layer.cornerRadius = 10;
    [self.chat_btn_1 setTitle:@"Block" forState:UIControlStateNormal];
    self.chat_btn_1.titleLabel.font = [UIFont boldSystemFontOfSize:16];
    [self.chat_btn_1 setTitleColor:RGB(198, 198, 198) forState:UIControlStateNormal];
    [self.chat_btn_1 addTarget:self action:@selector(BlokcbtnsClick:) forControlEvents:UIControlEventTouchUpInside];
    self.chat_btn_1.tag = 1001;
    [self addSubview:self.chat_btn_1];
    
    self.chat_btn_2 = [UIButton buttonWithType:UIButtonTypeCustom];
    self.chat_btn_2.backgroundColor = RGB(40, 40, 40);
    self.chat_btn_2.clipsToBounds = YES;
    self.chat_btn_2.layer.cornerRadius = 10;
    [self.chat_btn_2 setTitle:@"Report" forState:UIControlStateNormal];
    self.chat_btn_2.titleLabel.font = [UIFont boldSystemFontOfSize:16];
    [self.chat_btn_2 setTitleColor:RGB(198, 198, 198) forState:UIControlStateNormal];
    [self.chat_btn_2 addTarget:self action:@selector(BlokcbtnsClick:) forControlEvents:UIControlEventTouchUpInside];
    self.chat_btn_2.tag = 1002;
    [self addSubview:self.chat_btn_2];
    
    self.chat_btn_3 = [UIButton buttonWithType:UIButtonTypeCustom];
    self.chat_btn_3.backgroundColor = RGB(40, 40, 40);
    self.chat_btn_3.clipsToBounds = YES;
    self.chat_btn_3.layer.cornerRadius = 10;
    [self.chat_btn_3 setTitle:@"Cancel" forState:UIControlStateNormal];
    [self.chat_btn_3 setTitleColor:RGB(252, 122, 56) forState:UIControlStateNormal];
    self.chat_btn_3.titleLabel.font = [UIFont boldSystemFontOfSize:16];
    [self.chat_btn_3 addTarget:self action:@selector(BlokcbtnsClick:) forControlEvents:UIControlEventTouchUpInside];
    self.chat_btn_3.tag = 1003;
    [self addSubview:self.chat_btn_3];
   
    BOOL isVPN = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_VPN];
    BOOL isCountry = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_COUNTRY];
    if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th isEqualToString:@"1"] || isVPN == YES  || isCountry == YES) {
        self.chat_btn_0.hidden = YES;
    }else{
        self.chat_btn_0.hidden = NO;
    }
}
/// click btn
/// @param btn click btn
-(void)BlokcbtnsClick:(UIButton *)btn
{
    int tag = (int)btn.tag;
    if (self.CXChatBlockAlertViewBtnsClickBlock) {
        self.CXChatBlockAlertViewBtnsClickBlock(tag);
    }
    [self removeFromSuperview];
}
- (void)layoutSubviews {
    [super layoutSubviews];
    
    [self.chat_btn_3 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_offset(15);
        make.right.mas_offset(-15);
        make.height.mas_offset(50);
        make.bottom.mas_offset(- Bottom_SafeHeight - 15);
    }];
    
    [self.chat_btn_2 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_offset(15);
        make.right.mas_offset(-15);
        make.height.mas_offset(50);
        make.bottom.mas_equalTo(self.chat_btn_3.mas_top).mas_offset(-15);
    }];
    
    [self.chat_btn_1 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_offset(15);
        make.right.mas_offset(-15);
        make.height.mas_offset(50);
        make.bottom.mas_equalTo(self.chat_btn_2.mas_top).mas_offset(-15);
    }];
    
    [self.chat_btn_0 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_offset(15);
        make.right.mas_offset(-15);
        make.height.mas_offset(50);
        make.bottom.mas_equalTo(self.chat_btn_1.mas_top).mas_offset(-15);
    }];
}
@end

@interface CXChatBlockMaterialAlertView()
@property (nonatomic, strong) UIButton *chat_btn_0;

@property (nonatomic, strong) UIButton *chat_btn_2;

@property (nonatomic, strong) UIButton *chat_btn_3;
@end

@implementation CXChatBlockMaterialAlertView

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupBlockUI];
    }
    return self;
}
-(void)setupBlockUI
{
    self.backgroundColor = RGBA(0, 0, 0, 0.8);
    NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
    if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th intValue] == 10) {
        self.chat_btn_0.hidden = YES;
    }else{
        self.chat_btn_0.hidden = NO;
    }
    self.chat_btn_1 = [UIButton buttonWithType:UIButtonTypeCustom];
    self.chat_btn_1.backgroundColor = RGB(40, 40, 40);
    self.chat_btn_1.clipsToBounds = YES;
    self.chat_btn_1.layer.cornerRadius = 10;
    [self.chat_btn_1 setTitle:@"Block" forState:UIControlStateNormal];
    self.chat_btn_1.titleLabel.font = [UIFont boldSystemFontOfSize:16];
    [self.chat_btn_1 setTitleColor:RGB(198, 198, 198) forState:UIControlStateNormal];
    [self.chat_btn_1 addTarget:self action:@selector(BlokcbtnsClick:) forControlEvents:UIControlEventTouchUpInside];
    self.chat_btn_1.tag = 1001;
    [self addSubview:self.chat_btn_1];
    
    self.chat_btn_2 = [UIButton buttonWithType:UIButtonTypeCustom];
    self.chat_btn_2.backgroundColor = RGB(40, 40, 40);
    self.chat_btn_2.clipsToBounds = YES;
    self.chat_btn_2.layer.cornerRadius = 10;
    [self.chat_btn_2 setTitle:@"Report" forState:UIControlStateNormal];
    self.chat_btn_2.titleLabel.font = [UIFont boldSystemFontOfSize:16];
    [self.chat_btn_2 setTitleColor:RGB(198, 198, 198) forState:UIControlStateNormal];
    [self.chat_btn_2 addTarget:self action:@selector(BlokcbtnsClick:) forControlEvents:UIControlEventTouchUpInside];
    self.chat_btn_2.tag = 1002;
    [self addSubview:self.chat_btn_2];
    
    self.chat_btn_3 = [UIButton buttonWithType:UIButtonTypeCustom];
    self.chat_btn_3.backgroundColor = RGB(40, 40, 40);
    self.chat_btn_3.clipsToBounds = YES;
    self.chat_btn_3.layer.cornerRadius = 10;
    [self.chat_btn_3 setTitle:@"Cancel" forState:UIControlStateNormal];
    [self.chat_btn_3 setTitleColor:RGB(252, 122, 56) forState:UIControlStateNormal];
    self.chat_btn_3.titleLabel.font = [UIFont boldSystemFontOfSize:16];
    [self.chat_btn_3 addTarget:self action:@selector(BlokcbtnsClick:) forControlEvents:UIControlEventTouchUpInside];
    self.chat_btn_3.tag = 1003;
    [self addSubview:self.chat_btn_3];
}
/// click btn
/// @param btn click btn
-(void)BlokcbtnsClick:(UIButton *)btn
{
    int tag = (int)btn.tag;
    if (self.CXChatBlockAlertViewBtnsClickBlock) {
        self.CXChatBlockAlertViewBtnsClickBlock(tag);
    }
    [self removeFromSuperview];
}
- (void)layoutSubviews {
    [super layoutSubviews];
    
    [self.chat_btn_3 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_offset(15);
        make.right.mas_offset(-15);
        make.height.mas_offset(50);
        make.bottom.mas_offset(- Bottom_SafeHeight - 15);
    }];
    
    [self.chat_btn_2 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_offset(15);
        make.right.mas_offset(-15);
        make.height.mas_offset(50);
        make.bottom.mas_equalTo(self.chat_btn_3.mas_top).mas_offset(-15);
    }];
    
    [self.chat_btn_1 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_offset(15);
        make.right.mas_offset(-15);
        make.height.mas_offset(50);
        make.bottom.mas_equalTo(self.chat_btn_2.mas_top).mas_offset(-15);
    }];
    
//    [self.chat_btn_0 mas_makeConstraints:^(MASConstraintMaker *make) {
//        make.left.mas_offset(15);
//        make.right.mas_offset(-15);
//        make.height.mas_offset(50);
//        make.bottom.mas_equalTo(self.chat_btn_1.mas_top).mas_offset(-15);
//    }];
}
@end

// 聊天界面用到的主要的controller
static NSString *kConversationCell_ReuseId = @"TConversationCell";
@interface CXConversationListController ()
<UIGestureRecognizerDelegate, UITableViewDelegate, UITableViewDataSource, UIPopoverPresentationControllerDelegate, TUISearchBarDelegate>
@property (nonatomic, strong) CXMessageNoDataAlertView *noMessageView;
@property (nonatomic, assign) NSInteger currentUserMemberLevel;
@end

@implementation CXConversationListController
- (void)viewDidLoad {
    [super viewDidLoad];
    [self setupViews];
    self.navigationController.interactivePopGestureRecognizer.enabled = YES;
    self.navigationController.interactivePopGestureRecognizer.delegate = self;
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    [self checkMemberLevel];
    [IQKeyboardManager sharedManager].enable = NO;
    [IQKeyboardManager sharedManager].enableAutoToolbar = NO;
}
- (void)dealloc
{
    [IQKeyboardManager sharedManager].enable = YES;
    [IQKeyboardManager sharedManager].enableAutoToolbar = YES;
}
- (void)checkMemberLevel {
    NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
    self.currentUserMemberLevel = userModel.userInfo.memberLevel;
}
- (void)setupViews{
    self.view.backgroundColor = HexString(@"#1f1f1f");
    self.tableView = [[UITableView alloc] initWithFrame:CGRectZero];
    _tableView.tableFooterView = [[UIView alloc] init];
    _tableView.backgroundColor =  HexString(@"#1f1f1f");
    _tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    [_tableView registerClass:[CXMessageConversationViewCell class] forCellReuseIdentifier:kConversationCell_ReuseId];
    _tableView.delegate = self;
    _tableView.dataSource = self;
    [self.view addSubview:_tableView];
    [_tableView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.offset(0);
        make.bottom.offset(0);
        make.top.offset(0);
    }];
    _noMessageView = [[CXMessageNoDataAlertView alloc]init];
    [self.view addSubview:_noMessageView];
    _noMessageView.hidden = YES;
    [_noMessageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.edges.mas_equalTo(self.view);
    }];
    MJWeakSelf;
    [_noMessageView setCXMessageNoDataAlertViewBottomClickBlock:^{
        //缺省页 底部按钮点击
        //[weakSelf.navigationController popViewControllerAnimated:YES];
        weakSelf.tabBarController.selectedIndex = 0;
    }];
    @weakify(self)
    [RACObserve(self.viewModel, dataList) subscribeNext:^(id  _Nullable x) {
        @strongify(self)
        if (self.viewModel.dataList.count) {
            self.noMessageView.hidden = YES;
        }
        else {
            self.noMessageView.hidden = NO;
        }
        [self.tableView reloadData];
    }];
}

- (TConversationListViewModel *)viewModel
{
    if (!_viewModel) {
        _viewModel = [TConversationListViewModel new];
    }
    return _viewModel;
}

#pragma mark - Table view data source

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return self.viewModel.dataList.count;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
    return 10;
}

- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {
    return [UIView new];
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return 110;
}

- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath
{
    return YES;
}

- (NSArray<UITableViewRowAction *> *)tableView:(UITableView *)tableView editActionsForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSMutableArray *rowActions = [NSMutableArray array];
    TUIConversationCellData *cellData = self.viewModel.dataList[indexPath.row];
    __weak typeof(self) weakSelf = self;
    
    {
        UITableViewRowAction *action = [UITableViewRowAction rowActionWithStyle:UITableViewRowActionStyleDestructive title:@"Delete" handler:^(UITableViewRowAction * _Nonnull action, NSIndexPath * _Nonnull indexPath) {
            [tableView beginUpdates];
            [weakSelf.viewModel removeData:cellData];
            [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObjects:indexPath, nil] withRowAnimation:UITableViewRowAnimationNone];
            [tableView endUpdates];
        }];
        action.backgroundColor = [UIColor colorWithRed:242/255.0 green:77/255.0 blue:76/255.0 alpha:1.0];
        [rowActions addObject:action];
    }
    
    {
        UITableViewRowAction *action = [UITableViewRowAction rowActionWithStyle:UITableViewRowActionStyleNormal title:cellData.isOnTop?@"Unpink":@"Top" handler:^(UITableViewRowAction * _Nonnull action, NSIndexPath * _Nonnull indexPath) {
            if (cellData.isOnTop) {
                [TUILocalStorage.sharedInstance removeTopConversation:cellData.conversationID callback:nil];
            } else {
                [TUILocalStorage.sharedInstance addTopConversation:cellData.conversationID callback:nil];
            }
        }];
        action.backgroundColor = [UIColor colorWithRed:242/255.0 green:147/255.0 blue:64/255.0 alpha:1.0];
        [rowActions addObject:action];
    }
    {
        UITableViewRowAction *action = [UITableViewRowAction rowActionWithStyle:UITableViewRowActionStyleDefault title:@"Clear message" handler:^(UITableViewRowAction * _Nonnull action, NSIndexPath * _Nonnull indexPath) {
            if (cellData.groupID.length) {
                [V2TIMManager.sharedInstance clearGroupHistoryMessage:cellData.groupID succ:^{
                    NSLog(@"clear group history messages, success");
                } fail:^(int code, NSString *desc) {
                    NSLog(@"clear group history messages, error|code:%d|desc:%@", code, desc);
                }];
            } else {
                [V2TIMManager.sharedInstance clearC2CHistoryMessage:cellData.userID succ:^{
                    NSLog(@"clear c2c history messages, success");
                } fail:^(int code, NSString *desc) {
                    NSLog(@"clear c2c history messages, error|code:%d|desc:%@", code, desc);
                }];
            }

        }];
        action.backgroundColor = [UIColor colorWithRed:32/255.0 green:124/255.0 blue:231/255.0 alpha:1.0];
        [rowActions addObject:action];
    }
    return rowActions;
}
- (BOOL)tableView:(UITableView *)tableView shouldIndentWhileEditingRowAtIndexPath:(NSIndexPath *)indexPath
{
    return NO;
}
- (void)didSelectConversation:(TUIConversationCell *)cell
{
    if (self.currentUserMemberLevel == 0) {
        NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
        if ([userModel.appClient.spare7th isEqualToString:@"0"]) {
            for (id<CXConversationListControllerListener> delegate in [TUIKitListenerManager sharedInstance].convListeners) {
                if (delegate && [delegate respondsToSelector:@selector(conversationListController:didSelectConversation:)]) {
                    [delegate conversationListController:self didSelectConversation:cell];
                }
            }
        }else{
            /*
             NeighborsSimpleCuteDelAccountView *delView = [[NeighborsSimpleCuteDelAccountView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_WIDTH)];
             UIWindow *window = [UIApplication sharedApplication].keyWindow;
             [delView setNeighborsSimpleCuteDelAccountViewBlock:^{
                  NeighborsSimpleCuteDelAccountController *delaccountvc = [[NeighborsSimpleCuteDelAccountController alloc]init];
                  delaccountvc.hidesBottomBarWhenPushed = YES;
                  [self.navigationController pushViewController:delaccountvc animated:YES];
             }];
             NSCParameterAssert(window);
             [window addSubview:delView];
             */
            MJWeakSelf
            IMUpdateGrdateView *alertShowView = [[IMUpdateGrdateView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
            UIWindow *window = [UIApplication sharedApplication].keyWindow;
            [alertShowView setIMUpdateGrdateViewUpgradeBlock:^{
                NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
                BOOL isVPN = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_VPN];
                BOOL isCountry = [[NSUserDefaults standardUserDefaults]boolForKey:NeighborsSimple_COUNTRY];
                ZFMemberUpgrdeOtherController *zfothermembervc = [[ZFMemberUpgrdeOtherController alloc]init];
                            zfothermembervc.hidesBottomBarWhenPushed = YES;
                            [self.navigationController pushViewController:zfothermembervc animated:YES];
//                ZFMemberUpgrdeController *memberupgrdevc = [[ZFMemberUpgrdeController alloc]init];
//                memberupgrdevc.hidesBottomBarWhenPushed = YES;
//                [self.navigationController pushViewController:memberupgrdevc animated:YES];

//                       if (userModel.userInfo.spareNum6th == 1 || [userModel.appClient.spare10th isEqualToString:@"1"] || [userModel.appClient.spare13th isEqualToString:@"1"] || isVPN == YES  || isCountry == YES) {
//                           ZFMemberUpgrdeController *memberupgrdevc = [[ZFMemberUpgrdeController alloc]init];
//                           memberupgrdevc.hidesBottomBarWhenPushed = YES;
//                           [self.navigationController pushViewController:memberupgrdevc animated:YES];
//
//                       }else{
//                           //H5支付功能
//                           NSString *spare12th = userModel.appClient.spare12th;
//                           NSLog(@"spare12th:%@",spare12th);
//                           NSString *ipContent = userModel.userInfo.ipContent;
//                           NSLog(@"ipContent:%@",ipContent);
//                           NSDictionary *dics = [ipContent getCxshareldstaretlToDictionary];
//                           NSLog(@"ip:%@",dics[@"ip"]);
//                           NSString *RealUrl = [NSString stringWithFormat:@"%@ip=%@?userid=%ld?token=%@",spare12th,dics[@"ip"],(long)userModel.userInfo.userId,userModel.tokenDto.token];
//                           NSLog(@"RealUrl:%@",RealUrl);
//
//                           NeighborsSimpleCuteBaseWebController *vc = [[NeighborsSimpleCuteBaseWebController alloc]init];
//                           vc.webTitle = @"Upgrade";
//                           vc.loadType = WKWebLoadTypeWebURLString;
//                           vc.URLString = RealUrl;
//                           [self.navigationController pushViewController:vc animated:YES];
//                }
            }];
            [alertShowView setIMUpdateGrdateViewUpgradeDissmissBlock:^{
                
            }];
            NSCParameterAssert(window);
            [window addSubview:alertShowView];
        }
    }
    else {
        for (id<CXConversationListControllerListener> delegate in [TUIKitListenerManager sharedInstance].convListeners) {
            if (delegate && [delegate respondsToSelector:@selector(conversationListController:didSelectConversation:)]) {
                [delegate conversationListController:self didSelectConversation:cell];
            }
        }
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    CXMessageConversationViewCell *cell = [tableView dequeueReusableCellWithIdentifier:kConversationCell_ReuseId forIndexPath:indexPath];
    TUIConversationCellData *data = [self.viewModel.dataList objectAtIndex:indexPath.row];
    if (!data.cselector) {
        data.cselector = @selector(didSelectConversation:);
    }
    [cell fillWithData:data];
    //可以在此处修改，也可以在对应cell的初始化中进行修改。用户可以灵活的根据自己的使用需求进行设置。
    cell.changeColorWhenTouched = NO;
    //判定当前用户会员等级去设置Cell subtitlelab样式
    if (self.currentUserMemberLevel == 0) {
        NeighborsSimpleCuteUserModel *userModel = [NeighborsSimpleCuteUserModel getUserInfo];
        if ([userModel.appClient.spare7th isEqualToString:@"0"]) {
            cell.isHideSubTitleInfo = NO;
        }else{
            cell.isHideSubTitleInfo = YES;
        }
    }
    else {
        cell.isHideSubTitleInfo = NO;
    }
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
}
-(void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath
{
    if ([cell respondsToSelector:@selector(setSeparatorInset:)]) {
           [cell setSeparatorInset:UIEdgeInsetsMake(0, 75, 0, 0)];
        if (indexPath.row == (self.viewModel.dataList.count - 1)) {
            [cell setSeparatorInset:UIEdgeInsetsZero];
        }
    }
    // Prevent the cell from inheriting the Table View's margin settings
    if ([cell respondsToSelector:@selector(setPreservesSuperviewLayoutMargins:)]) {
        [cell setPreservesSuperviewLayoutMargins:NO];
    }

    // Explictly set your cell's layout margins
    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {
        [cell setLayoutMargins:UIEdgeInsetsZero];
    }
}

- (UIModalPresentationStyle)adaptivePresentationStyleForPresentationController:(UIPresentationController *)controller {
    return UIModalPresentationNone;
}

- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView
{
    [self.viewModel loadConversation];
}

@end

@interface CXMessageConverListtionController ()
<TUIConversationListControllerListener, TPopViewDelegate>
@property (nonatomic, strong) TNaviBarIndicatorView *titleView;
@end

@implementation CXMessageConverListtionController
- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = NSC_BGThemColor;
    self.navigationItem.title = @"Message";
//    UIButton *leftBtn = [[UIButton alloc]init];
//    [leftBtn setImage:[UIImage imageNamed:TUIKitResource(@"n_back")] forState:UIControlStateNormal];
//    [leftBtn addTarget:self action:@selector(actionChatLeftBtn:) forControlEvents:UIControlEventTouchUpInside];
//    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:leftBtn];
    
    [[TUIKitListenerManager sharedInstance] addConversationListControllerListener:self];
    CXConversationListController *conv = [[CXConversationListController alloc] init];
    [self addChildViewController:conv];
    [self.view addSubview:conv.view];
    [conv.view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.offset(0);
        make.top.offset(0);
        make.bottom.offset(0);
    }];
    conv.tableView.tableHeaderView = nil;
    conv.tableView.backgroundColor = HexString(@"#1f1f1f");
    //如果不加这一行代码，依然可以实现点击反馈，但反馈会有轻微延迟，体验不好。
    conv.tableView.delaysContentTouches = NO;
    [NSNotificationCenter.defaultCenter addObserver:self selector:@selector(onFriendInfoChanged:) name:@"FriendInfoChangedNotification" object:nil];
}

-(void)actionChatLeftBtn:(UIButton *)btn
{
    [self.navigationController popViewControllerAnimated:YES];
}
- (void)dealloc
{
    [[TUIKitListenerManager sharedInstance] removeConversationListControllerListener:self];
    [NSNotificationCenter.defaultCenter removeObserver:self];
}
- (void)onFriendInfoChanged:(NSNotification *)notice
{
    for (UIViewController *vc in self.childViewControllers) {
        if ([vc isKindOfClass:TUIConversationListController.class]) {
            TConversationListViewModel *viewModel = [(TUIConversationListController *)vc viewModel];
            [viewModel loadConversation];
            break;
        }
    }
}
- (void)onNeighborsSimpleCuteLeftBackBtn:(UIButton *)btn
{
    [self.navigationController popViewControllerAnimated:YES];
}
/**
 *初始化导航栏
 */
- (void)setupNavigation
{
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(onNetworkChanged:) name:TUIKitNotification_TIMConnListener object:nil];
}

/**
 *初始化导航栏Title，不同连接状态下Title显示内容不同
 */
- (void)onNetworkChanged:(NSNotification *)notification
{
    TUINetStatus status = (TUINetStatus)[notification.object intValue];
    switch (status) {
        case TNet_Status_Succ:
//            [_titleView setTitle:NSLocalizedString(@"AppMainTitle", nil)];
//            [_titleView stopAnimating];
            break;
        case TNet_Status_Connecting:
//            [_titleView setTitle:NSLocalizedString(@"AppMainConnectingTitle", nil)];// 连接中...
//            [_titleView startAnimating];
            break;
        case TNet_Status_Disconnect:
//            [_titleView setTitle:NSLocalizedString(@"AppMainDisconnectTitle", nil)]; // 腾讯·云通信(未连接)
//            [_titleView stopAnimating];
            break;
        case TNet_Status_ConnFailed:
//            [_titleView setTitle:NSLocalizedString(@"AppMainDisconnectTitle", nil)]; // 腾讯·云通信(未连接)
//            [_titleView stopAnimating];
            break;

        default:
            break;
    }
}

/**
 *推送默认跳转
 */
- (void)pushToChatViewController:(NSString *)groupID userID:(NSString *)userID {

    UIViewController *topVc = self.navigationController.topViewController;
    BOOL isSameTarget = NO;
    BOOL isInChat = NO;
    if ([topVc isKindOfClass:ChatViewController.class]) {
        TUIConversationCellData *cellData = [(ChatViewController *)topVc conversationData];
        isSameTarget = [cellData.groupID isEqualToString:groupID] || [cellData.userID isEqualToString:userID];
        isInChat = YES;
    }
    if (isInChat && isSameTarget) {
        return;
    }
    
    if (isInChat && !isSameTarget) {
        [self.navigationController popViewControllerAnimated:NO];
    }

    ChatViewController *chat = [[ChatViewController alloc] init];
    TUIConversationCellData *conversationData = [[TUIConversationCellData alloc] init];
    conversationData.groupID = groupID;
    conversationData.userID = userID;
    chat.conversationData = conversationData;
    NSArray *dataArr = [userID componentsSeparatedByString:@"_"];
    chat.userId = dataArr[1];
    [self.navigationController pushViewController:chat animated:YES];
}

/**
 *对导航栏右侧的按钮（即视图右上角按钮）进行初始化，创建对应的popView
 */
- (void)rightBarButtonClick:(UIButton *)rightBarButton
{
    NSMutableArray *menus = [NSMutableArray array];
    TPopCellData *friend = [[TPopCellData alloc] init];
    friend.image = TUIKitResource(@"add_friend");
    friend.title = NSLocalizedString(@"ChatsNewChatText", nil);
    [menus addObject:friend];

    TPopCellData *group3 = [[TPopCellData alloc] init];
    group3.image = TUIKitResource(@"create_group");
    group3.title = NSLocalizedString(@"ChatsNewPrivateGroupText", nil);
    [menus addObject:group3];

    TPopCellData *group = [[TPopCellData alloc] init];
    group.image = TUIKitResource(@"create_group");
    group.title = NSLocalizedString(@"ChatsNewGroupText", nil);
    [menus addObject:group];

    TPopCellData *room = [[TPopCellData alloc] init];
    room.image = TUIKitResource(@"create_group");
    room.title = NSLocalizedString(@"ChatsNewChatRoomText", nil);
    [menus addObject:room];


    CGFloat height = [TPopCell getHeight] * menus.count + TPopView_Arrow_Size.height;
    CGFloat orginY = StatusBar_Height + NavBar_Height;
    TPopView *popView = [[TPopView alloc] initWithFrame:CGRectMake(Screen_Width - 155, orginY, 145, height)];
    CGRect frameInNaviView = [self.navigationController.view convertRect:rightBarButton.frame fromView:rightBarButton.superview];
    popView.arrowPoint = CGPointMake(frameInNaviView.origin.x + frameInNaviView.size.width * 0.5, orginY);
    popView.delegate = self;
    [popView setData:menus];
    [popView showInWindow:self.view.window];
}

/**
 *点击了popView中具体某一行后的响应函数，popView初始化请参照上述 rightBarButtonClick: 函数
 */
- (void)popView:(TPopView *)popView didSelectRowAtIndex:(NSInteger)index
{
    @weakify(self)
    if(index == 0){
        //发起会话
        TUIContactSelectController *vc = [TUIContactSelectController new];
        vc.title = NSLocalizedString(@"ChatsSelectContact", nil);//@"选择联系人";
        vc.maxSelectCount = 1;
        [self.navigationController pushViewController:vc animated:YES];
        vc.finishBlock = ^(NSArray<TCommonContactSelectCellData *> *array) {
            @strongify(self)
            TUIConversationCellData *data = [[TUIConversationCellData alloc] init];
            data.userID = array.firstObject.identifier;
            data.title = array.firstObject.title;
            ChatViewController *chat = [[ChatViewController alloc] init];
            chat.conversationData = data;
            NSArray *dataArr = [data.userID componentsSeparatedByString:@"_"];
            chat.userId = dataArr[1];
            [self.navigationController pushViewController:chat animated:YES];

            NSMutableArray *tempArray = [NSMutableArray arrayWithArray:self.navigationController.viewControllers];
            [tempArray removeObjectAtIndex:tempArray.count-2];
            self.navigationController.viewControllers = tempArray;
            
            [TCUtil report:Action_Createc2c actionSub:@"" code:@(0) msg:@"createc2c"];
        };
        return;
    }
    else if(index == 1){
        //创建讨论组
        TUIContactSelectController *vc = [TUIContactSelectController new];
        vc.title = NSLocalizedString(@"ChatsSelectContact", nil);//@"选择联系人";
        [self.navigationController pushViewController:vc animated:YES];
        vc.finishBlock = ^(NSArray<TCommonContactSelectCellData *> *array) {
            @strongify(self)
            [self addGroup:GroupType_Work addOption:0 withContacts:array];
            [TCUtil report:Action_Createprivategrp actionSub:@"" code:@(0) msg:@"createprivategrp"];
        };
        return;
    } else if(index == 2){
        //创建群聊
        TUIContactSelectController *vc = [TUIContactSelectController new];
        vc.title = NSLocalizedString(@"ChatsSelectContact", nil);//@"选择联系人";
        [self.navigationController pushViewController:vc animated:YES];
        vc.finishBlock = ^(NSArray<TCommonContactSelectCellData *> *array) {
            @strongify(self)
            [self addGroup:GroupType_Public addOption:V2TIM_GROUP_ADD_ANY withContacts:array];
            [TCUtil report:Action_Createpublicgrp actionSub:@"" code:@(0) msg:@"createpublicgrp"];
        };
        return;
    } else if(index == 3){
        //创建聊天室
        TUIContactSelectController *vc = [TUIContactSelectController new];
        vc.title = NSLocalizedString(@"ChatsSelectContact", nil);//@"选择联系人";
        [self.navigationController pushViewController:vc animated:YES];
        vc.finishBlock = ^(NSArray<TCommonContactSelectCellData *> *array) {
            @strongify(self)
            [self addGroup:GroupType_Meeting addOption:V2TIM_GROUP_ADD_ANY withContacts:array];
            [TCUtil report:Action_Createchatroomgrp actionSub:@"" code:@(0) msg:@"createchatroomgrp"];
        };
        return;
    }
    else {
        return;
    }
}

/**
 *创建讨论组、群聊、聊天室的函数
 *groupType:创建的具体类型 Private--讨论组  Public--群聊 ChatRoom--聊天室
 *addOption:创建后加群时的选项          TIM_GROUP_ADD_FORBID       禁止任何人加群
                                     TIM_GROUP_ADD_AUTH        加群需要管理员审批
                                     TIM_GROUP_ADD_ANY         任何人可以加群
 *withContacts:群成员的信息数组。数组内每一个元素分别包含了对应成员的头像、ID等信息。具体信息可参照 TCommonContactSelectCellData 定义
 */
- (void)addGroup:(NSString *)groupType addOption:(V2TIMGroupAddOpt)addOption withContacts:(NSArray<TCommonContactSelectCellData *>  *)contacts
{
    NSString *loginUser = [[V2TIMManager sharedInstance] getLoginUser];
    [[V2TIMManager sharedInstance] getUsersInfo:@[loginUser] succ:^(NSArray<V2TIMUserFullInfo *> *infoList) {
        NSString *showName = loginUser;
        if (infoList.firstObject.nickName.length > 0) {
            showName = infoList.firstObject.nickName;
        }
        NSMutableString *groupName = [NSMutableString stringWithString:showName];
        NSMutableArray *members = [NSMutableArray array];
        //遍历contacts，初始化群组成员信息、群组名称信息
        for (TCommonContactSelectCellData *item in contacts) {
            V2TIMCreateGroupMemberInfo *member = [[V2TIMCreateGroupMemberInfo alloc] init];
            member.userID = item.identifier;
            member.role = V2TIM_GROUP_MEMBER_ROLE_MEMBER;
            [groupName appendFormat:@"、%@", item.title];
            [members addObject:member];
        }

        //群组名称默认长度不超过10，如有需求可在此更改，但可能会出现UI上的显示bug
        if ([groupName length] > 10) {
            groupName = [groupName substringToIndex:10].mutableCopy;
        }

        V2TIMGroupInfo *info = [[V2TIMGroupInfo alloc] init];
        info.groupName = groupName;
        info.groupType = groupType;
        if(![info.groupType isEqualToString:GroupType_Work]){
            info.groupAddOpt = addOption;
        }

        //发送创建请求后的回调函数
        @weakify(self)
        [[V2TIMManager sharedInstance] createGroup:info memberList:members succ:^(NSString *groupID) {
            //创建成功后，在群内推送创建成功的信息
            @strongify(self)
            NSString *content = nil;
            if([info.groupType isEqualToString:GroupType_Work]) {
                content = NSLocalizedString(@"ChatsCreatePrivateGroupTips", nil); // @"创建讨论组";
            } else if([info.groupType isEqualToString:GroupType_Public]){
                content = NSLocalizedString(@"ChatsCreateGroupTips", nil); // @"创建群聊";
            } else if([info.groupType isEqualToString:GroupType_Meeting]) {
                content = NSLocalizedString(@"ChatsCreateChatRoomTips", nil); // @"创建聊天室";
            } else {
                content = NSLocalizedString(@"ChatsCreateDefaultTips", nil); // @"创建群组";
            }
            NSDictionary *dic = @{@"version": @(GroupCreate_Version),@"businessID": GroupCreate,@"opUser":showName,@"content":content};
            NSData *data= [NSJSONSerialization dataWithJSONObject:dic options:NSJSONWritingPrettyPrinted error:nil];
            V2TIMMessage *msg = [[V2TIMManager sharedInstance] createCustomMessage:data];
            [[V2TIMManager sharedInstance] sendMessage:msg receiver:nil groupID:groupID priority:V2TIM_PRIORITY_DEFAULT onlineUserOnly:NO offlinePushInfo:nil progress:nil succ:nil fail:nil];

            //创建成功后，默认跳转到群组对应的聊天界面
            TUIConversationCellData *cellData = [[TUIConversationCellData alloc] init];
            cellData.groupID = groupID;
            cellData.title = groupName;
            ChatViewController *chat = [[ChatViewController alloc] init];
            chat.conversationData = cellData;
            NSArray *dataArr = [cellData.userID componentsSeparatedByString:@"_"];
            chat.userId = dataArr[1];
            [self.navigationController pushViewController:chat animated:YES];
            
            NSMutableArray *tempArray = [NSMutableArray arrayWithArray:self.navigationController.viewControllers];
            [tempArray removeObjectAtIndex:tempArray.count-2];
            self.navigationController.viewControllers = tempArray;
        } fail:^(int code, NSString *msg) {
            [THelper makeToastError:code msg:msg];
        }];
    } fail:^(int code, NSString *msg) {
        // to do
    }];
}

#pragma mark TUIConversationListControllerListener

/**
 * 获取会话展示信息回调
 */
- (NSString *)getConversationDisplayString:(V2TIMConversation *)conversation {
    V2TIMMessage *msg = conversation.lastMessage;
    if (msg.customElem == nil || msg.customElem.data == nil) {
        return nil;
    }
    NSDictionary *param = [TCUtil jsonData2Dictionary:msg.customElem.data];
    if (param != nil && [param isKindOfClass:[NSDictionary class]]) {
        NSString *businessID = param[@"businessID"];
        if (![businessID isKindOfClass:[NSString class]]) {
            return nil;
        }
        // 判断是不是自定义跳转消息
        if ([businessID isEqualToString:TextLink] || ([(NSString *)param[@"text"] length] > 0 && [(NSString *)param[@"link"] length] > 0)) {
            return param[@"text"];
        }
        // 判断是不是群创建自定义消息
        else if ([businessID isEqualToString:GroupCreate] || [param.allKeys containsObject:GroupCreate]) {
            return [NSString stringWithFormat:@"\"%@\"%@",param[@"opUser"],param[@"content"]];
        }
    }
    return nil;
}

/**
 *  点击会话回调
 */
- (void)conversationListController:(TUIConversationListController *)conversationController didSelectConversation:(TUIConversationCell *)conversationCell
{
    ChatViewController *chat = [[ChatViewController alloc] init];
    chat.hidesBottomBarWhenPushed = YES;
    NSLog(@"userID:%@",conversationCell.convData.userID);
    NSArray *dataArr = [conversationCell.convData.userID componentsSeparatedByString:@"_"];
    chat.userId = dataArr[1];
    chat.conversationData = conversationCell.convData;
    [self.navigationController pushViewController:chat animated:YES];
    
    if ([conversationCell.convData.groupID isEqualToString:@"im_demo_admin"] || [conversationCell.convData.userID isEqualToString:@"im_demo_admin"]) {
        [TCUtil report:Action_Clickhelper actionSub:@"" code:@(0) msg:@"clickhelper"];
    }
    if ([conversationCell.convData.groupID isEqualToString:@"@TGS#33NKXK5FK"] || [conversationCell.convData.userID isEqualToString:@"@TGS#33NKXK5FK"]) {
        [TCUtil report:Action_Clickdefaultgrp actionSub:@"" code:@(0) msg:@"clickdefaultgrp"];
    }
}
@end


@interface CXSCommonTools ()


@end

@implementation CXSCommonTools
{
     dispatch_source_t _timer;
}

+ (instancetype)sharedNetworkTool
{
    static dispatch_once_t onceToken;
    static CXSCommonTools *util = nil;
    dispatch_once(&onceToken, ^{
        util = [[CXSCommonTools alloc]init];
    });
    return  util;
}

-(NSString *)getNowTimeTimestamp{

    NSDateFormatter *formatter = [[NSDateFormatter alloc] init] ;

    [formatter setDateStyle:NSDateFormatterMediumStyle];

    [formatter setTimeStyle:NSDateFormatterShortStyle];

    [formatter setDateFormat:@"YYYY-MM-dd HH:mm:ss"]; //
//
//    //设置时区,这个对于时间的处理有时很重要
//
    NSTimeZone* timeZone = [NSTimeZone timeZoneWithName:@"Asia/Shanghai"];
//
    [formatter setTimeZone:timeZone];
//
    NSDate *datenow = [NSDate date];//现在时间,你可以输出来看下是什么格式
    
    NSString *dayStr = [formatter stringFromDate:datenow];
////
////    NSString *timeSp = [NSString stringWithFormat:@"%ld", (long)[datenow timeIntervalSince1970]];
////
////    return timeSp;
//
//    NSDate *datenow = [NSDate date];//现在时间,你可以输出来看下是什么格式
//    NSDateFormatter *formatDay = [[NSDateFormatter alloc] init];
//    [formatter setDateFormat:@"YYYY-MM-dd HH:mm:ss"];
//    NSString *dayStr = [formatDay stringFromDate:now];
//    return dayStr;
    return dayStr;

}

-(void)acitonTimeWithtransactiontime{
    NSDateFormatter *dateFormatter=[[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:@"YYYY-MM-dd HH:mm:ss"];
    NSDate *endDate = [dateFormatter dateFromString:[self getNowTimeTimestamp]];
    NSDate *endDate_tomorrow = [[NSDate alloc] initWithTimeIntervalSinceReferenceDate:([endDate timeIntervalSinceReferenceDate] + 24*3600)];
    NSDate *startDate = [NSDate date];
    NSTimeInterval timeInterval =[endDate_tomorrow timeIntervalSinceDate:startDate];
    NSLog(@"timeInterval:%f",timeInterval);
    if (_timer==nil) {
        __block int timeout = timeInterval; //倒计时时间
        if (timeout!=0) {
            dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
            _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0,queue);
            dispatch_source_set_timer(_timer,dispatch_walltime(NULL, 0),1.0*NSEC_PER_SEC, 0); //每秒执行
            dispatch_source_set_event_handler(_timer, ^{
                if(timeout<=0){ //倒计时结束，关闭
                    dispatch_source_cancel(self->_timer);
                    self->_timer = nil;
                    dispatch_async(dispatch_get_main_queue(), ^{
                        NSLog(@"acitonTimeWithtransactiontime 完成了了");
                        [[NSUserDefaults standardUserDefaults]setBool:NO forKey:CXSLocalMemberMute];
                        [[NSUserDefaults standardUserDefaults]synchronize];
                    });
                }else{
                    int days = (int)(timeout/(3600*24));
                    if (days==0) {
                        //self.dayLabel.text = @"";
                    }
                    int hours = (int)((timeout-days*24*3600)/3600);
                    int minute = (int)(timeout-days*24*3600-hours*3600)/60;
                    int second = timeout-days*24*3600-hours*3600-minute*60;
                    dispatch_async(dispatch_get_main_queue(), ^{
                     
                        if (days==0) {
                            //self.dayLabel.text = @"0天";
                        }else{
                            //self.dayLabel.text = [NSString stringWithFormat:@"%d天",days];
                        }
                        NSString *minStr = nil;
                        NSString *secondStr = nil;
                        if (minute<10) {
                             minStr = [NSString stringWithFormat:@"0%d",minute];
                        }else{
                           minStr = [NSString stringWithFormat:@"%d",minute];
                        }
                        if (second<10) {
                            secondStr = [NSString stringWithFormat:@"0%d",second];
                        }else{
                            secondStr = [NSString stringWithFormat:@"%d",second];
                        }
                        NSString *showStr =  [NSString stringWithFormat:@"%d天,%d时,%@分,%@秒", days,hours,minStr,secondStr];
                        NSLog(@"showStr:%@",showStr);
                        //self.timeCell.time_lab.text = [NSString stringWithFormat:@"%@'%@''",minStr,secondStr];
                    });
                    timeout--;
                }
            });
            dispatch_resume(_timer);
        }
    }
}

@end


@interface NeighborsSimpleCuteEmpteryController ()

@end

@implementation NeighborsSimpleCuteEmpteryController

- (void)viewDidLoad
{
    [super viewDidLoad];
}

@end

// 新需求的功能 tabbard的功能
@interface  ZFTabbarController ()<UITabBarControllerDelegate>
{
    UITabBar *myTabBar;
}
@property(nonatomic,strong)CXMessageConverListtionController *converlistionvc2;
@property(nonatomic,strong)NeighborsSimpleCuteSettingMainWookaController *settingvc2;
@end

@implementation ZFTabbarController

-(void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/account/user/newMessageCount"];
    NSLog(@"param:%@",param);
    NSLog(@"bsseUrl:%@",baseUrl);
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"newMessageCount.data:%@",response.data);
        if (response.code == 0) {
            dispatch_async(dispatch_get_main_queue(), ^{
                int upvoteSize = [response.data[@"upvoteSize"] intValue];
                int visitorSize  = [response.data[@"visitorSize"]intValue];
                int counts = upvoteSize + visitorSize;
                if (counts == 0) {
                    self.settingvc2.tabBarItem.badgeValue = nil;
                }else{
                    self.settingvc2.tabBarItem.badgeValue = [NSString stringWithFormat:@"%lu",(unsigned long)counts];
                }
            });
        }else{
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = [UIColor whiteColor];
    self.delegate = self;
    if (@available(iOS 13.0, *)) {
        [UITabBar appearance].tintColor = [UIColor whiteColor];
        [UITabBar appearance].unselectedItemTintColor = [UIColor lightGrayColor];
        UITabBarItem *item = [UITabBarItem appearance];
        [item setTitleTextAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:10]} forState:UIControlStateNormal];
        [item setTitleTextAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:10]} forState:UIControlStateSelected];
    } else {
        UITabBarItem *item = [UITabBarItem appearance];
        [item setTitleTextAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:10], NSForegroundColorAttributeName:[UIColor lightGrayColor]} forState:UIControlStateNormal];
        [item setTitleTextAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:10], NSForegroundColorAttributeName:[UIColor whiteColor]} forState:UIControlStateSelected];
    }
    //[NSNotificationCenter.defaultCenter addObserver:self selector:@selector(onGetTotalUnreadCountChanged:) name:TUIKitNotification_onTotalUnreadMessageCountChanged object:nil];
    [self setupETRController];
}

///// 接受到消息
///// @param noti 接受到消息了
//-(void)onGetTotalUnreadCountChanged:(NSNotification *)noti
//{
//    NSLog(@"onGetTotalUnreadCountChangedonGetTotalUnreadCountChanged");
//    id object = noti.object;
//    if (![object isKindOfClass:NSNumber.class]) {
//        return;
//    }
//    NSUInteger total = [object integerValue];
//    NSLog(@"有新消息---数量11==%lu",(unsigned long)total);
//    if (total == 0) {
//        self.converlistionvc2.tabBarItem.badgeValue = nil;
//    }else if(total > 99){
//        self.converlistionvc2.tabBarItem.badgeValue = @"99+";
//    }else{
//        self.converlistionvc2.tabBarItem.badgeValue = [NSString stringWithFormat:@"%lu",(unsigned long)total];
//    }
//}
-(void)setupETRController
{
//    NeighborsSimpleCuteEmpteryController *emptyvc = [[NeighborsSimpleCuteEmpteryController alloc]init];
//    [self SetupETRAddChildVC:emptyvc imageName:TUIKitResource(@"zf_tabbar1_nor") selectedImageName:TUIKitResource(@"zf_tabbar1_sel")];
    
    NeighborsSimpleCuteHomeAllWookaController *sortvc = [[NeighborsSimpleCuteHomeAllWookaController alloc]init];
    [self SetupETRAddChildVC:sortvc imageName:TUIKitResource(@"zf_tabbar2_nor") selectedImageName:TUIKitResource(@"zf_tabbar2_sel")];
    
    self.converlistionvc2 = [[CXMessageConverListtionController alloc]init];
    [self SetupETRAddChildVC:self.converlistionvc2 imageName:TUIKitResource(@"zf_tabbar3_nor") selectedImageName:TUIKitResource(@"zf_tabbar3_sel")];
        
   self.settingvc2 = [[NeighborsSimpleCuteSettingMainWookaController alloc]init];
    [self SetupETRAddChildVC:self.settingvc2 imageName:TUIKitResource(@"zf_tabbar4_nor") selectedImageName:TUIKitResource(@"zf_tabbar4_sel")];
    
    myTabBar = [[UITabBar alloc] init];
    myTabBar.backgroundColor = RGB(50, 50, 50);
    CGRect rect = CGRectMake(0, 0, IPHONE_WIDTH, 1);
    UIGraphicsBeginImageContext(rect.size);
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetFillColorWithColor(context,[UIColor clearColor].CGColor);
    CGContextFillRect(context, rect);
    UIImage *img = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
    [myTabBar setShadowImage:img];
    [myTabBar setBackgroundImage:[[UIImage alloc]init]];
    [self setValue:myTabBar forKey:@"tabBar"];
}
- (void)SetupETRAddChildVC:(UIViewController *)childVc imageName:(NSString *)imageName selectedImageName:(NSString *)selectedImageName
{
    NSMutableDictionary *textAttrs = [NSMutableDictionary dictionary];
    NSMutableDictionary *selectedTextAttrs = [NSMutableDictionary dictionary];
    [childVc.tabBarItem setTitleTextAttributes:textAttrs forState:UIControlStateNormal];
    [childVc.tabBarItem setTitleTextAttributes:selectedTextAttrs forState:UIControlStateSelected];
    childVc.tabBarItem.selectedImage = [[UIImage imageNamed:selectedImageName] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
    childVc.tabBarItem.image=[[UIImage imageNamed:imageName] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
    childVc.tabBarItem.imageInsets = UIEdgeInsetsMake(5, 0, -5, 0);
    UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:childVc];
    [self addChildViewController:nav];
}
@end

//头部
@interface NeighborsSimpleCuteSettingHeaderWookaViewCell()

@end

@implementation NeighborsSimpleCuteSettingHeaderWookaViewCell

- (UIView *)bgView{
    if (!_bgView) {
        _bgView = [[UIView alloc]init];
        _bgView.backgroundColor = NSC_BGThemColor2;
        _bgView.layer.cornerRadius = 65.0f;
        _bgView.layer.masksToBounds = YES;
    }
    return _bgView;
}
- (UIImageView *)iconImg
{
    if (!_iconImg) {
        _iconImg = [[UIImageView alloc]init];
        _iconImg.image = [UIImage imageNamed:TUIKitResource(@"n_setting_profile")];
        _iconImg.contentMode = UIViewContentModeScaleAspectFill;
        _iconImg.layer.cornerRadius = 60.0f;
        _iconImg.layer.masksToBounds = YES;
    }
    return _iconImg;
}
- (UIButton *)nameBtn
{
    if (!_nameBtn) {
        _nameBtn = [[UIButton alloc]init];
        [_nameBtn setTitle:@"测试功能" forState:UIControlStateNormal];
        [_nameBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _nameBtn.titleLabel.font = [UIFont boldSystemFontOfSize:17];
        [_nameBtn setSemanticContentAttribute:UISemanticContentAttributeForceRightToLeft];
    }
    return _nameBtn;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        //self.contentView.backgroundColor = NSC_BGThemColor2;
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    [self addSubview:self.bgView];
    [self.bgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.centerY.mas_equalTo(self).offset(-20);
        make.width.height.offset(130);
    }];
    [self addSubview:self.iconImg];
    [self.iconImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.centerY.mas_equalTo(self).offset(-20);
        make.width.height.offset(120);
    }];
    [self addSubview:self.nameBtn];
    [self.nameBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.mas_equalTo(self.iconImg.mas_bottom).offset(20);
    }];
}

@end


//中部
@interface NeighborsSimpleCuteSettingMiddleWookaViewCell()

@end

@implementation NeighborsSimpleCuteSettingMiddleWookaViewCell

/*
 @property (nonatomic,strong)UIButton *vistorBtn;

 @property (nonatomic,strong)UILabel *vistorNumberLab;

 @property (nonatomic,strong)UILabel *vistorLab;

 @property (nonatomic,strong)UIButton *likeMeBtn;

 @property (nonatomic,strong)UILabel *likeMeNumberLab;

 @property (nonatomic,strong)UILabel *likeMeLab;

 @property (nonatomic,strong)UIButton *requestBtn;

 @property (nonatomic,strong)UILabel *requestNumberLab;

 @property (nonatomic,strong)UILabel *requestLab;
 */

- (UIButton *)vistorBtn
{
    if (!_vistorBtn) {
        _vistorBtn = [[UIButton alloc]init];
        
        [_vistorBtn setImage:[UIImage imageNamed:TUIKitResource(@"zf_profile_vistor")] forState:UIControlStateNormal];
        [_vistorBtn addTarget:self action:@selector(actionVistorBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _vistorBtn;
}

- (UILabel *)vistorLab
{
    if (!_vistorLab) {
        _vistorLab = [[UILabel alloc]init];
        _vistorLab.text = @"Visitor";
        _vistorLab.textColor = [UIColor whiteColor];
        _vistorLab.font = [UIFont systemFontOfSize:15];
        _vistorLab.textAlignment = NSTextAlignmentCenter;
    }
    return _vistorLab;
}
- (UILabel *)vistorNumberLab
{
    if (!_vistorNumberLab) {
        _vistorNumberLab = [[UILabel alloc]init];
        _vistorNumberLab.backgroundColor = [UIColor redColor];
        _vistorNumberLab.text = @"10";
        _vistorNumberLab.hidden = YES;
        _vistorNumberLab.textColor = [UIColor whiteColor];
        _vistorNumberLab.font = [UIFont systemFontOfSize:14];
        _vistorNumberLab.textAlignment = NSTextAlignmentLeft;
        _vistorNumberLab.layer.cornerRadius = 9.0f;
        _vistorNumberLab.layer.masksToBounds = YES;
        [_vistorNumberLab sizeToFit];
    }
    return _vistorNumberLab;
}
-(void)actionVistorBtn:(UIButton *)btn
{
    NSLog(@"actionVistorBtn");
    if (self.NeighborsSimpleCuteSettingMiddleWookaViewCellMiddleBlock) {
        self.NeighborsSimpleCuteSettingMiddleWookaViewCellMiddleBlock(0);
    }
}

- (UIButton *)likeMeBtn
{
    if (!_likeMeBtn) {
        _likeMeBtn = [[UIButton alloc]init];
        [_likeMeBtn setImage:[UIImage imageNamed:TUIKitResource(@"zf_profile_like")]  forState:UIControlStateNormal];
        [_likeMeBtn addTarget:self action:@selector(actionLikeBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _likeMeBtn;
}

-(void)actionLikeBtn:(UIButton *)btn
{
    NSLog(@"actionLikeBtn btn");
    if (self.NeighborsSimpleCuteSettingMiddleWookaViewCellMiddleBlock) {
        self.NeighborsSimpleCuteSettingMiddleWookaViewCellMiddleBlock(1);
    }
}

- (UILabel *)likeMeLab
{
    if (!_likeMeLab) {
        _likeMeLab = [[UILabel alloc]init];
        _likeMeLab.text = @"Like Me";
        _likeMeLab.textColor = [UIColor whiteColor];
        _likeMeLab.font = [UIFont systemFontOfSize:15];
        _likeMeLab.textAlignment = NSTextAlignmentCenter;
    }
    return _likeMeLab;
}

- (UILabel *)likeMeNumberLab
{
    if (!_likeMeNumberLab) {
        _likeMeNumberLab = [[UILabel alloc]init];
        _likeMeNumberLab.backgroundColor = [UIColor redColor];
        _likeMeNumberLab.text = @"10";
        _likeMeNumberLab.hidden = YES;
        _likeMeNumberLab.textColor = [UIColor whiteColor];
        _likeMeNumberLab.font = [UIFont systemFontOfSize:14];
        _likeMeNumberLab.textAlignment = NSTextAlignmentLeft;
        _likeMeNumberLab.layer.cornerRadius = 9;
        _likeMeNumberLab.layer.masksToBounds = YES;
        [_likeMeNumberLab sizeToFit];
    }
    return _likeMeNumberLab;
}

- (UIButton *)requestBtn
{
    if (!_requestBtn) {
        _requestBtn = [[UIButton alloc]init];
        [_requestBtn setImage:[UIImage imageNamed:TUIKitResource(@"zf_profile_calllist")] forState:UIControlStateNormal];
        [_requestBtn addTarget:self action:@selector(actionRequestBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _requestBtn;
}
-(void)actionRequestBtn:(UIButton *)btn
{
    NSLog(@"actionRequestBtn btn");
    if (self.NeighborsSimpleCuteSettingMiddleWookaViewCellMiddleBlock) {
        self.NeighborsSimpleCuteSettingMiddleWookaViewCellMiddleBlock(2);
    }
}
- (UILabel *)requestLab
{
    if (!_requestLab) {
        _requestLab = [[UILabel alloc]init];
        _requestLab.text = @"Request";
        _requestLab.textColor = [UIColor whiteColor];
        _requestLab.font = [UIFont systemFontOfSize:15];
        _requestLab.textAlignment = NSTextAlignmentCenter;
    }
    return _requestLab;
}

- (UILabel *)requestNumberLab
{
    if (!_requestNumberLab) {
        _requestNumberLab = [[UILabel alloc]init];
        _requestNumberLab.backgroundColor = [UIColor redColor];
        _requestNumberLab.layer.cornerRadius = 9.0f;
        _requestNumberLab.layer.masksToBounds = YES;
        _requestNumberLab.text = @"10";
        _requestNumberLab.hidden = YES;
        _requestNumberLab.textColor = [UIColor whiteColor];
        _requestNumberLab.font = [UIFont systemFontOfSize:14];
        _requestNumberLab.textAlignment = NSTextAlignmentLeft;
    }
    return _requestNumberLab;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.layer.cornerRadius = 8.0f;
        self.layer.masksToBounds = YES;
        self.backgroundColor = NSC_BGThemColor2;
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    [self addSubview:self.vistorBtn];
    [self.vistorBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.offset(15);
        make.left.offset(30);
        make.width.height.offset(50);
    }];
    [self addSubview:self.vistorNumberLab];
    [self.vistorNumberLab mas_makeConstraints:^(MASConstraintMaker *make) {
        //make.centerX.mas_equalTo(self.vistorBtn).offset(20);
        make.left.mas_equalTo(self.vistorBtn.mas_right).offset(-10);
        make.top.mas_equalTo(self.vistorBtn);
        make.height.offset(18);
    }];
    [self addSubview:self.vistorLab];
    [self.vistorLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.mas_equalTo(self.vistorBtn.mas_bottom).offset(6);
        make.centerX.mas_equalTo(self.vistorBtn);
    }];
    
    [self addSubview:self.requestBtn];
    [self.requestBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.offset(15);
        make.right.offset(-30);
        make.width.height.offset(50);
    }];
    
    [self addSubview:self.requestNumberLab];
    [self.requestNumberLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_equalTo(self.requestBtn.mas_right).offset(-10);
        //make.centerX.mas_equalTo(self.requestBtn).offset(20);
        make.top.mas_equalTo(self.requestBtn);
        make.height.offset(18);
    }];
    
    [self addSubview:self.requestLab];
    [self.requestLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.mas_equalTo(self.requestBtn.mas_bottom).offset(6);
        make.centerX.mas_equalTo(self.requestBtn);
    }];

    [self addSubview:self.likeMeBtn];
    [self.likeMeBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.offset(15);
        make.centerX.mas_equalTo(self);
        make.width.height.offset(50);
    }];
    
    [self addSubview:self.likeMeLab];
    [self.likeMeLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.mas_equalTo(self.likeMeBtn.mas_bottom).offset(6);
        make.centerX.mas_equalTo(self.likeMeBtn);
    }];
    
    [self addSubview:self.likeMeNumberLab];
    [self.likeMeNumberLab mas_makeConstraints:^(MASConstraintMaker *make) {
        //make.centerX.mas_equalTo(self.likeMeBtn).offset(20);
        make.left.mas_equalTo(self.likeMeBtn.mas_right).offset(-10);
        make.top.mas_equalTo(self.likeMeBtn);
        make.height.offset(18);
    }];
}
@end
// 内容
@interface NeighborsSimpleCuteSettingContentWookaViewCell()

@end

@implementation NeighborsSimpleCuteSettingContentWookaViewCell

- (UIImageView *)iconImg
{
    if (!_iconImg) {
        _iconImg = [[UIImageView alloc]init];
        _iconImg.image = [UIImage imageNamed:TUIKitResource(@"test")];
        _iconImg.contentMode = UIViewContentModeScaleAspectFill;
        _iconImg.layer.cornerRadius= 30;
        _iconImg.layer.masksToBounds = YES;
    }
    return _iconImg;
}
- (UILabel *)titleLab
{
    if (!_titleLab) {
        _titleLab = [[UILabel alloc]init];
        _titleLab.text = @"Test";
        _titleLab.textColor = [UIColor whiteColor];
        _titleLab.font = [UIFont systemFontOfSize:17];
        _titleLab.textAlignment = NSTextAlignmentCenter;
    }
    return _titleLab;
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
        self.layer.cornerRadius = 8.0f;
        self.layer.masksToBounds = YES;
        self.backgroundColor = NSC_BGThemColor2;
    }
    return self;
}

-(void)setupUI
{
    [self addSubview:self.iconImg];
    [self.iconImg mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.offset(15);
        make.width.height.offset(60);
    }];
    [self addSubview:self.titleLab];
    [self.titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.mas_equalTo(self.iconImg.mas_bottom).offset(10);
    }];
}
@end

// Wooka个人中心
@interface NeighborsSimpleCuteSettingMainWookaController ()
<UICollectionViewDelegate,UICollectionViewDataSource>
@property (nonatomic,strong)UICollectionView *settingCollectionView;
@property (nonatomic,strong)NSMutableArray *settingTitleListArr;
@property (nonatomic,strong)NSMutableArray *settingImageListArr;
@property (nonatomic,strong)NSDictionary *messageCountDic;
@property (nonatomic,copy)NSString  *memberLevel;
@end
@implementation NeighborsSimpleCuteSettingMainWookaController
- (NSMutableArray *)settingTitleListArr
{
    if(!_settingTitleListArr){
        _settingTitleListArr = [NSMutableArray arrayWithObjects:@"Edit Profile",@"Upgrade",@"Feedback",@"Setting", nil];
    }
    return _settingTitleListArr;
}
- (NSMutableArray *)settingImageListArr
{
    if(!_settingImageListArr){
        _settingImageListArr = [NSMutableArray arrayWithObjects:@"zf_profile_edit",@"zf_profile_update",@"zf_profile_feedback",@"zf_profile_setting", nil];
    }
    return _settingImageListArr;
}
- (UICollectionView *)settingCollectionView
{
    if (!_settingCollectionView) {
        UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc]init];
        flow.scrollDirection = UICollectionViewScrollDirectionVertical;
        flow.minimumLineSpacing = 10;//行间距
        flow.minimumInteritemSpacing = 10;//列间距
        _settingCollectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flow];
        _settingCollectionView.backgroundColor = [UIColor clearColor];
        _settingCollectionView.showsVerticalScrollIndicator = NO;
        _settingCollectionView.showsHorizontalScrollIndicator = NO;
        _settingCollectionView.delegate = self;
        _settingCollectionView.dataSource = self;
        [_settingCollectionView registerClass:[NeighborsSimpleCuteSettingHeaderWookaViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingHeaderWookaViewCell"];
        [_settingCollectionView registerClass:[NeighborsSimpleCuteSettingMiddleWookaViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingMiddleWookaViewCell"];
        [_settingCollectionView registerClass:[NeighborsSimpleCuteSettingContentWookaViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingContentWookaViewCell"];

    }
    return _settingCollectionView;
}
- (void)viewWillAppear:(BOOL)animated {
    [self.navigationController setNavigationBarHidden:YES animated:animated];
    [super viewWillAppear:animated];
    [super viewWillAppear:animated];
    [self actionGetMessageCount];
    [self actionGetCurrentData];
    [self.settingCollectionView reloadData];
}

-(void)actionGetCurrentData
{
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"userId"] = @([NeighborsSimpleCuteUserModel getUserInfo].userInfo.userId);
    NSString *baseUrl = [NSString stringWithFormat:@"%@api/relation/visitor/%ld",NSC_Base_Url,(long)[NeighborsSimpleCuteUserModel getUserInfo].userInfo.userId];
    NSLog(@"param:%@",param);
    NSLog(@"bsseUrl:%@",baseUrl);
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"5555555newMessageCount.data:%@",response.data);
        self.memberLevel = response.data[@"userInfo"][@"memberLevel"];
        NSLog(@"self.memberLevel:%@",response.data[@"userInfo"][@"memberLevel"]);
        NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
        model.userInfo.memberLevel = [self.memberLevel intValue];
        [NeighborsSimpleCuteUserModel save:model];
        [self.settingCollectionView reloadData];
    }failure:^(NSError * _Nonnull error) {
        //[SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}

- (void)viewWillDisappear:(BOOL)animated {
    [self.navigationController setNavigationBarHidden:NO animated:animated];
    [super viewWillDisappear:animated];
}

-(void)actionGetMessageCount
{
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/account/user/newMessageCount"];
    NSLog(@"param:%@",param);
    NSLog(@"bsseUrl:%@",baseUrl);
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"newMessageCount.data:%@",response.data);
        if (response.code == 0) {
            self.messageCountDic = response.data;
            [self.settingCollectionView reloadData];
            dispatch_async(dispatch_get_main_queue(), ^{
                int upvoteSize = [[self.messageCountDic valueForKey:@"upvoteSize"] intValue];
                int visitorSize  = [[self.messageCountDic valueForKey:@"visitorSize"]intValue];
                int counts = upvoteSize + visitorSize;
                if (counts==0) {
                    self.navigationController.tabBarItem.badgeValue = nil;
                }else{
                    self.navigationController.tabBarItem.badgeValue = [NSString stringWithFormat:@"%d",counts];
                }
            });
        }else{
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        //[SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}

-(void)viewDidLoad
{
    [super viewDidLoad];
    [self.view addSubview:self.settingCollectionView];
    [self.settingCollectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.bottom.offset(0);
        make.top.offset(Height_StatusBar-5);
    }];
}

#pragma mark -- NeighborsSimpleCuteSettingMainWookaController -- UICollectionViewDelegate,UICollectionViewDataSource
-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 3;
}
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    if (section == 0) {
        return 1;
    }else if(section == 1){
        return 1;
    }else{
        return 4;
    }
}
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    if (section == 0 || section == 1) {
        return UIEdgeInsetsZero;
    }else{
        return UIEdgeInsetsMake(20, 20, 20, 20);
    }
}

- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.section == 0) {
        return CGSizeMake(IPHONE_WIDTH, 220);
    }else if(indexPath.section == 1){
        return CGSizeMake(IPHONE_WIDTH-40, 100);
    }
    else{
        return CGSizeMake((IPHONE_WIDTH - 50)/2, 120);
    }
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.section == 0) {
        NeighborsSimpleCuteSettingHeaderWookaViewCell *headerCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingHeaderWookaViewCell" forIndexPath:indexPath];
        NSString *imageBaseUrl = [NSString stringWithFormat:@"%@/",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th];
        NSString *picurl = [NSString stringWithFormat:@"%@%@",imageBaseUrl,[NeighborsSimpleCuteUserModel getUserInfo].userInfo.tempStr7th];
        NSLog(@"picurl44323233:%@",picurl);
        [headerCell.iconImg sd_setImageWithURL:[NSURL URLWithString:picurl] placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
        NSString *userName = [NeighborsSimpleCuteUserModel getUserInfo].userInfo.nickName;
        int memberLevel = (int)[NeighborsSimpleCuteUserModel getUserInfo].userInfo.memberLevel;
        NSLog(@"memberLevel:%d",memberLevel);
        [headerCell.nameBtn setTitle:userName forState:UIControlStateNormal];
        if (memberLevel == 1) {
            [headerCell.nameBtn setImage:[UIImage imageNamed:TUIKitResource(@"grzx_huiyuan_ho")] forState:UIControlStateNormal];
        }else{
            [headerCell.nameBtn setImage:[UIImage imageNamed:@""] forState:UIControlStateNormal];
        }
        return headerCell;
    }else if(indexPath.section == 1){
        NeighborsSimpleCuteSettingMiddleWookaViewCell *middleCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingMiddleWookaViewCell" forIndexPath:indexPath];
        int upvoteSize = [[self.messageCountDic valueForKey:@"upvoteSize"] intValue];
        int visitorSize  = [[self.messageCountDic valueForKey:@"visitorSize"]intValue];
        if (upvoteSize <= 0) {
            middleCell.likeMeNumberLab.hidden = YES;
        }else{
            middleCell.likeMeNumberLab.hidden = NO;
            if (upvoteSize < 10) {
                [middleCell.likeMeNumberLab mas_updateConstraints:^(MASConstraintMaker *make) {
                    make.width.height.offset(18);
                }];
                middleCell.likeMeNumberLab.textAlignment = NSTextAlignmentCenter;
                middleCell.likeMeNumberLab.text = [NSString stringWithFormat:@"%d",upvoteSize];
            }else{
                [middleCell.likeMeNumberLab mas_updateConstraints:^(MASConstraintMaker *make) {
                    make.height.offset(18);
                }];
                middleCell.likeMeNumberLab.textAlignment = NSTextAlignmentLeft;
                middleCell.likeMeNumberLab.text = [NSString stringWithFormat:@" %d ",upvoteSize];
            }
        }
        if (visitorSize <= 0) {
            middleCell.vistorNumberLab.hidden = YES;
        }else{
            middleCell.vistorNumberLab.hidden = NO;
            if (visitorSize < 10) {
                [middleCell.vistorNumberLab mas_updateConstraints:^(MASConstraintMaker *make) {
                    make.width.height.offset(18);
                }];
                middleCell.vistorNumberLab.textAlignment = NSTextAlignmentCenter;
                middleCell.vistorNumberLab.text = [NSString stringWithFormat:@"%d",visitorSize];
            }else{
                [middleCell.vistorNumberLab mas_updateConstraints:^(MASConstraintMaker *make) {
                    make.height.offset(18);
                }];
                middleCell.vistorNumberLab.textAlignment = NSTextAlignmentLeft;
                middleCell.vistorNumberLab.text = [NSString stringWithFormat:@" %d ",visitorSize];
            }
         
        }
        [middleCell setNeighborsSimpleCuteSettingMiddleWookaViewCellMiddleBlock:^(int tag) {
            if (tag == 0) {
                //Vistor
                NeighborsSimpleCuteSettingVistoeWookaController *vistorvc = [[NeighborsSimpleCuteSettingVistoeWookaController alloc]init];
                vistorvc.hidesBottomBarWhenPushed = YES;
                [self.navigationController pushViewController:vistorvc animated:YES];
            }else if(tag == 1){
                //Like me
                NeighborsSimpleCuteSettingLikeMeWookaController *likeMevc = [[NeighborsSimpleCuteSettingLikeMeWookaController alloc]init];
                likeMevc.hidesBottomBarWhenPushed = YES;
                likeMevc.numberStr = [NSString stringWithFormat:@"%d",upvoteSize];
                [self.navigationController pushViewController:likeMevc animated:YES];
            }else{
                //Reqest
                NeighborsSimpleSettingRequestWookaController *requestvc = [[NeighborsSimpleSettingRequestWookaController alloc]init];
                requestvc.hidesBottomBarWhenPushed = YES;
                [self.navigationController pushViewController:requestvc animated:YES];
            }
        }];
        return middleCell;
    }else{
        NeighborsSimpleCuteSettingContentWookaViewCell *contentCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteSettingContentWookaViewCell" forIndexPath:indexPath];
        contentCell.titleLab.text = self.settingTitleListArr[indexPath.row];
        contentCell.iconImg.image = [UIImage imageNamed:TUIKitResource(self.settingImageListArr[indexPath.row])];
        return contentCell;
    }
}
-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
    if (indexPath.section ==2) {
        if (indexPath.row == 0) {
            // zf todo 2022-04-15
            NeighborsSimpleCuteSettingMineController *settingvc = [NeighborsSimpleCuteSettingMineController new];
            settingvc.hidesBottomBarWhenPushed = YES;
            [self.navigationController pushViewController:settingvc animated:YES];
            //Edit
            //NeighborsSimpleCuteSettingProfileController *profilevc = [[NeighborsSimpleCuteSettingProfileController alloc]init];
            //profilevc.hidesBottomBarWhenPushed = YES;
            //[self.navigationController pushViewController:profilevc animated:YES];
        }else if(indexPath.row == 1){
            //Upgrade 新的内购功能
            ZFMemberUpgrdeOtherController *zfothermembervc = [[ZFMemberUpgrdeOtherController alloc]init];
            zfothermembervc.hidesBottomBarWhenPushed = YES;
            [self.navigationController pushViewController:zfothermembervc animated:YES];
        }else if(indexPath.row == 2){
            //Feedback
            NeighborsSimpleCuteSettingFeedBackController *feedbackvc = [[NeighborsSimpleCuteSettingFeedBackController alloc]init];
            feedbackvc.hidesBottomBarWhenPushed = YES;
            [self.navigationController pushViewController:feedbackvc animated:YES];
        }else {
            //Setting
            NeighborsSimpleCuteBaseSettingMainController *baseSettingVc = [[NeighborsSimpleCuteBaseSettingMainController alloc]init];
            baseSettingVc.hidesBottomBarWhenPushed = YES;
            [self.navigationController pushViewController:baseSettingVc animated:YES];
        }
    }
}
@end

@interface NeighborsSimpleEmpteryView()

@end

@implementation NeighborsSimpleEmpteryView

- (instancetype)init {
    if (self = [super init]) {
        [self setupUI];
    }
    return self;
}

- (void)setupUI {
    [self addSubview:self.topImageView];
    [self addSubview:self.titleLab];
    [self addSubview:self.bottomBtn];
}
- (void)layoutSubviews {
    [super layoutSubviews];
    [self.topImageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.mas_offset(130);
    }];
    [self.titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_offset(20);
        make.right.mas_offset(-20);
        make.top.mas_equalTo(self.topImageView.mas_bottom).mas_offset(25);
        make.height.mas_offset(60);
    }];
    
    [self.bottomBtn  mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_offset(30);
        make.right.mas_offset(-30);
        make.height.mas_offset(50);
        make.top.mas_equalTo(self.titleLab.mas_bottom).mas_offset(100);
    }];
}

- (UIImageView *)topImageView {
    if (!_topImageView) {
        _topImageView = [[UIImageView alloc]init];
        _topImageView.image = [UIImage imageNamed:TUIKitResource(@"zf_setting_vistoer")];
    }
    return _topImageView;
}

- (UILabel *)titleLab {
    if (!_titleLab) {
        _titleLab = [[UILabel alloc]init];
        _titleLab.font = [UIFont boldSystemFontOfSize:17];
        _titleLab.text = @"No member found Looks like no one has visited you yet";
        _titleLab.numberOfLines = 2;
        _titleLab.textAlignment = NSTextAlignmentCenter;
        _titleLab.textColor = [UIColor whiteColor];
    }
    return _titleLab;
}

- (UIButton *)bottomBtn {
    if (!_bottomBtn) {
        _bottomBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_bottomBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH-60), 50) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        [_bottomBtn setTitle:@"Search match" forState:UIControlStateNormal];
        _bottomBtn.titleLabel.font = [UIFont boldSystemFontOfSize:17];
        [_bottomBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _bottomBtn.layer.cornerRadius = 25.0f;
        _bottomBtn.layer.masksToBounds = YES;
        [_bottomBtn addTarget:self action:@selector(bottomBtnClick) forControlEvents:UIControlEventTouchUpInside];
    }
    return _bottomBtn;
}

- (void)bottomBtnClick {
    if (self.NeighborsSimpleEmpteryViewSearchMatchBlock) {
        self.NeighborsSimpleEmpteryViewSearchMatchBlock();
    }
}
@end
@interface NeighborsSimpleCuteVistoerWookaViewCell ()

//@property (strong, nonatomic)  UIView *active_view;
//@property (strong, nonatomic)  UIImageView *hg_img;
//@property (strong, nonatomic)  UIImageView *icon_img;
//@property (strong, nonatomic)  UIView *icon_bg_view;
//@property (strong, nonatomic)  UILabel *name_lab;
//@property (strong, nonatomic)  UILabel *time_lab;
//@property (strong, nonatomic)  UILabel *number_lab;

@end

@implementation NeighborsSimpleCuteVistoerWookaViewCell

- (UILabel *)number_lab
{
    if (!_number_lab) {
        _number_lab = [[UILabel alloc]init];
        _number_lab.font = [UIFont systemFontOfSize:15];
        _number_lab.text = @"Summber";
        _number_lab.numberOfLines = 0;
        _number_lab.textAlignment = NSTextAlignmentCenter;
        _number_lab.textColor = RGB(198, 198, 198);
    }
    return _number_lab;
}
- (UILabel *)time_lab
{
    if(!_time_lab){
        _time_lab = [[UILabel alloc]init];
        _time_lab.font = [UIFont systemFontOfSize:12];
        _time_lab.text = @"Summber";
        _time_lab.numberOfLines = 0;
        _time_lab.textAlignment = NSTextAlignmentCenter;
        _time_lab.textColor = RGB(198, 198, 198);
    }
    return _time_lab;
}

- (UILabel *)name_lab
{
    if(!_name_lab){
        _name_lab = [[UILabel alloc]init];
        _name_lab.font = [UIFont systemFontOfSize:17];
        _name_lab.text = @"Summber";
        _name_lab.numberOfLines = 1;
        _name_lab.textAlignment = NSTextAlignmentCenter;
        _name_lab.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
    }
    return _name_lab;
}

- (UIImageView *)hg_img
{
    if (!_hg_img) {
        _hg_img = [[UIImageView alloc]init];
        _hg_img.image = [UIImage imageNamed:TUIKitResource(@"zf_profile_hg")];
        _hg_img.contentMode = UIViewContentModeScaleAspectFill;
    }
    return _hg_img;
}
- (UIView *)active_view
{
    if(!_active_view){
        _active_view =  [[UIView alloc]init];
        _active_view.backgroundColor = RGB(247, 76, 49);
        _active_view.layer.cornerRadius = 5.0f;
        _active_view.layer.masksToBounds = YES;
    }
    return _active_view;
}

- (UIImageView *)icon_img
{
    if (!_icon_img) {
        _icon_img = [[UIImageView alloc]init];
        _icon_img.image = [UIImage imageNamed:TUIKitResource(@"zf_setting_vistoer")];
        _icon_img.contentMode = UIViewContentModeScaleAspectFill;
        _icon_img.layer.cornerRadius = 40.0f;
        _icon_img.layer.masksToBounds = YES;
    }
    return _icon_img;
}

- (UIView *)icon_bg_view
{
    if(!_icon_bg_view){
        _icon_bg_view = [[UIView alloc]init];
        _icon_bg_view.backgroundColor = [UIColor colorWithWhite:1.0 alpha:0.08];
        _icon_bg_view.layer.cornerRadius = 43.0f;
        _icon_bg_view.layer.masksToBounds = YES;
    }
    return _icon_bg_view;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.layer.cornerRadius = 10.0f;
        self.layer.masksToBounds = YES;
        self.backgroundColor = NSC_BGThemColor2;
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self addSubview:self.icon_bg_view];
    [self.icon_bg_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.offset(20);
        make.width.height.offset(86);
    }];
    [self addSubview:self.icon_img];
    [self.icon_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.offset(23);
        make.width.height.offset(80);
    }];
    
    [self addSubview:self.active_view];
    [self.active_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(8);
        make.width.height.offset(10);
        make.top.mas_equalTo(self.icon_bg_view).offset(-10);
    }];
    
    [self addSubview:self.hg_img];
    [self.hg_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-8);
        make.width.height.offset(25);
        make.top.mas_equalTo(self.icon_bg_view).offset(-10);
    }];
    
    [self addSubview:self.name_lab];
    [self.name_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.mas_equalTo(self.icon_bg_view.mas_bottom).offset(10);
        make.left.offset(8);
        make.right.offset(-8);
    }];
    
    [self addSubview:self.time_lab];
    [self.time_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.mas_equalTo(self.name_lab.mas_bottom).offset(8);
        make.left.offset(8);
        make.right.offset(-8);
    }];
    
    [self addSubview:self.number_lab];
    [self.number_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.mas_equalTo(self.time_lab.mas_bottom).offset(8);
        make.left.offset(8);
        make.right.offset(-8);
    }];
}
@end


@interface NeighborsSimpleCuteVisoterWookaModel ()

@end

@implementation NeighborsSimpleCuteVisoterWookaModel

@end

@interface NeighborsSimpleCuteLikeMeWookaViewCell ()
//@property (strong, nonatomic) UIButton *bg_btn;
//@property (strong, nonatomic) UIView *icon_bg_view;
//@property (strong, nonatomic) UIImageView *icon_img;
//@property (strong, nonatomic) UILabel *name_lab;
//@property (strong, nonatomic) UIView *time_bg_view;
//@property (strong, nonatomic) UILabel *time_lab;
//@property (strong, nonatomic) UIView *active_view;
//@property (strong, nonatomic) UIImageView *hg_img;

@end

@implementation NeighborsSimpleCuteLikeMeWookaViewCell

- (UIButton *)all_bg_btn
{
    if(!_all_bg_btn){
        _all_bg_btn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_all_bg_btn gradientButtonWithSize:CGSizeMake(90, 95) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
    }
    return _all_bg_btn;
}

- (UIImageView *)icon_img
{
    if (!_icon_img) {
        _icon_img = [[UIImageView alloc]init];
        _icon_img.image = [UIImage imageNamed:TUIKitResource(@"zf_setting_vistoer")];
        _icon_img.contentMode = UIViewContentModeScaleAspectFill;
        _icon_img.layer.cornerRadius = 41.0f;
        _icon_img.layer.masksToBounds = YES;
    }
    return _icon_img;
}

- (UIView *)icon_bg_view
{
    if(!_icon_bg_view){
        _icon_bg_view = [[UIView alloc]init];
        _icon_bg_view.backgroundColor = [UIColor colorWithWhite:1 alpha:0.3];
        _icon_bg_view.layer.cornerRadius = 43.0f;
        _icon_bg_view.layer.masksToBounds = YES;
    }
    return _icon_bg_view;
}

- (UIImageView *)hg_img
{
    if (!_hg_img) {
        _hg_img = [[UIImageView alloc]init];
        _hg_img.image = [UIImage imageNamed:TUIKitResource(@"zf_profile_hg2")];
        _hg_img.contentMode = UIViewContentModeScaleAspectFill;
    }
    return _hg_img;
}
- (UIView *)active_view
{
    if(!_active_view){
        _active_view =  [[UIView alloc]init];
        _active_view.backgroundColor = RGB(247, 76, 49);
        _active_view.layer.cornerRadius = 5.0f;
        _active_view.layer.masksToBounds = YES;
    }
    return _active_view;
}

- (UILabel *)name_lab
{
    if(!_name_lab){
        _name_lab = [[UILabel alloc]init];
        _name_lab.font = [UIFont systemFontOfSize:17];
        _name_lab.text = @"Summber";
        _name_lab.numberOfLines = 1;
        _name_lab.textAlignment = NSTextAlignmentCenter;
        _name_lab.textColor = [UIColor blackColor];
    }
    return _name_lab;
}
- (UIButton *)bg_btn
{
    if (!_bg_btn) {
        _bg_btn = [UIButton buttonWithType:UIButtonTypeCustom];
        _bg_btn.backgroundColor = [UIColor colorWithWhite:1 alpha:0.3];
        [_bg_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _bg_btn.layer.cornerRadius = 14.0f;
        _bg_btn.layer.masksToBounds = YES;
    }
    return _bg_btn;
}
- (UILabel *)time_lab
{
    if (!_time_lab) {
        _time_lab = [[UILabel alloc]init];
        _time_lab.layer.cornerRadius = 12.0f;
        _time_lab.layer.masksToBounds = YES;
        _time_lab.backgroundColor = [UIColor blackColor];
        _time_lab.font = [UIFont systemFontOfSize:12];
        _time_lab.text = @"Like me time: 11:26";
        _time_lab.numberOfLines = 1;
        _time_lab.textAlignment = NSTextAlignmentCenter;
        _time_lab.textColor = [UIColor whiteColor];
    }
    return _time_lab;
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.layer.cornerRadius = 10.0f;
        self.layer.masksToBounds = YES;
        //self.backgroundColor = NSC_BGThemColor2;
//        CAGradientLayer *gl = [CAGradientLayer layer];
//        gl.frame = self.contentView.bounds;
//        gl.startPoint = CGPointMake(0, 1);
//        gl.endPoint = CGPointMake(1, 0);
//        gl.colors = @[(__bridge id)[UIColor colorWithRed:250/255.0 green:204/255.0 blue:72/255.0 alpha:1.0].CGColor,(__bridge id)[UIColor colorWithRed:235/255.0 green:142/255.0 blue:63/255.0 alpha:1.0].CGColor];
//        gl.locations = @[@(1.0),@(0.0)];
//        [self.contentView.layer addSublayer:gl];
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self addSubview:self.all_bg_btn];
    [self.all_bg_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.left.right.bottom.offset(0);
    }];
    [self addSubview:self.icon_bg_view];
    [self.icon_bg_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.offset(15);
        make.width.height.offset(86);
    }];
    [self addSubview:self.icon_img];
    [self.icon_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.offset(17);
        make.width.height.offset(82);
    }];
    
    [self addSubview:self.active_view];
    [self.active_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(8);
        make.width.height.offset(10);
        make.top.mas_equalTo(self.icon_bg_view).offset(-10);
    }];
    
    [self addSubview:self.hg_img];
    [self.hg_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-8);
        make.width.height.offset(25);
        make.top.mas_equalTo(self.icon_bg_view).offset(-10);
    }];
    
    [self addSubview:self.name_lab];
    [self.name_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.mas_equalTo(self.icon_bg_view.mas_bottom).offset(10);
        make.left.offset(8);
        make.right.offset(-8);
    }];
    
    [self addSubview:self.bg_btn];
    [self.bg_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.mas_equalTo(self.name_lab.mas_bottom).offset(10);
        make.left.offset(8);
        make.right.offset(-8);
        make.height.offset(28);
    }];
    
    [self addSubview:self.time_lab];
    [self.time_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.mas_equalTo(self.name_lab.mas_bottom).offset(12);
        make.left.offset(10);
        make.right.offset(-10);
        make.height.offset(24);
    }];
}

@end

@interface NeighborsSimpleCuteLikeWookaModel()

@end

@implementation NeighborsSimpleCuteLikeWookaModel

@end

//访客列表
@interface NeighborsSimpleCuteSettingVistoeWookaController()<UICollectionViewDelegate,UICollectionViewDataSource,NSCMyMessageViewDelegate>
@property (nonatomic,strong)NeighborsSimpleEmpteryView *emptyImageView;
@property (nonatomic,strong)NSMutableArray *vierstorListArr;
@property (nonatomic,strong)UICollectionView *vistrotCollectionView;
@property (nonatomic,assign)BOOL isMore;
@property (nonatomic,assign)NSInteger page;
@property (nonatomic, strong) NSCMyMessageView *myMessageView;
@end
@implementation NeighborsSimpleCuteSettingVistoeWookaController
- (UICollectionView *)vistrotCollectionView
{
    if (!_vistrotCollectionView) {
        UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc]init];
        flow.scrollDirection = UICollectionViewScrollDirectionVertical;
        flow.minimumLineSpacing = 10;//行间距
        flow.minimumInteritemSpacing = 10;//列间距
        _vistrotCollectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flow];
        _vistrotCollectionView.backgroundColor = [UIColor clearColor];
        _vistrotCollectionView.showsVerticalScrollIndicator = NO;
        _vistrotCollectionView.showsHorizontalScrollIndicator = NO;
        _vistrotCollectionView.delegate = self;
        _vistrotCollectionView.dataSource = self;
        [_vistrotCollectionView registerClass:[NeighborsSimpleCuteVistoerWookaViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteVistoerWookaViewCell"];
    }
    return _vistrotCollectionView;
}

- (NSMutableArray *)vierstorListArr
{
    if (!_vierstorListArr) {
        _vierstorListArr = [NSMutableArray array];
    }
    return _vierstorListArr;
}
- (NeighborsSimpleEmpteryView *)emptyImageView
{
    if (!_emptyImageView) {
        _emptyImageView = [[NeighborsSimpleEmpteryView alloc]init];
        _emptyImageView.topImageView.image = [UIImage imageNamed:TUIKitResource(@"zf_setting_vistoer")];
        _emptyImageView.titleLab.text = @"No member found \n  Looks like no one has visited you yet";
    }
    return _emptyImageView;
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"Visitor";
    [self.view addSubview:self.emptyImageView];
    self.emptyImageView.hidden = YES;
    [self.emptyImageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.edges.mas_equalTo(self.view);
    }];
    [self.emptyImageView setNeighborsSimpleEmpteryViewSearchMatchBlock:^{
        self.tabBarController.selectedIndex = 0;
        [self.navigationController popViewControllerAnimated:YES];
    }];
    [self.view addSubview:self.vistrotCollectionView];
    [self.vistrotCollectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    //刷新控件
    self.vistrotCollectionView.mj_header = [MJRefreshNormalHeader headerWithRefreshingTarget:self refreshingAction:@selector(actionNewVistoerList)];
    self.vistrotCollectionView.mj_footer = [MJRefreshBackNormalFooter footerWithRefreshingTarget:self refreshingAction:@selector(actionMoreVistoerList)];
    [self.vistrotCollectionView.header beginRefreshing];
}

-(void)actionNewVistoerList
{
    self.isMore = NO;
    [self.vistrotCollectionView.mj_footer resetNoMoreData];
    self.page = 1;
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"pageNum"] = @(self.page);
    NSString *baseurl = [NSString stringWithFormat:@"%@api/relation/visitor/list/%ld",NSC_Base_Url,(long)self.page];
    NSLog(@"param:%@",param);
    NSLog(@"baseurl:%@",baseurl);
//    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseurl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"response.data.list:%@",response.data);
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            [self.vierstorListArr removeAllObjects];
            self.vierstorListArr = [NeighborsSimpleCuteVisoterWookaModel mj_objectArrayWithKeyValuesArray:response.data];
            if (self.vierstorListArr.count == 0) {
                self.emptyImageView.hidden = NO;
                self.vistrotCollectionView.hidden = YES;
            }else{
                self.emptyImageView.hidden = YES;
                self.vistrotCollectionView.hidden = NO;
            }
            [self.vistrotCollectionView.mj_header endRefreshing];
            [self.vistrotCollectionView reloadData];
        }else{
            [self.vistrotCollectionView.mj_header endRefreshing];
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD dismiss];
        self.emptyImageView.hidden = NO;
        self.vistrotCollectionView.hidden = YES;
        [self.vistrotCollectionView.mj_header endRefreshing];
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}

-(void)actionMoreVistoerList
{
    if (self.isMore == YES) {
        [self.vistrotCollectionView.mj_footer endRefreshing];
        return;
    }
    self.page++;
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"pageNum"] = @(self.page);
    NSString *baseurl = [NSString stringWithFormat:@"%@api/relation/visitor/list/%ld",NSC_Base_Url,(long)self.page];
    NSLog(@"param:%@",param);
    NSLog(@"baseurl:%@",baseurl);
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseurl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"response.data:%@",response.data);
        [self.vistrotCollectionView.mj_footer  endRefreshing];
        if (response.code == 0) {
            self.emptyImageView.hidden = YES;
            self.vistrotCollectionView.hidden = NO;
            NSMutableArray *array  = [NeighborsSimpleCuteVisoterWookaModel mj_objectArrayWithKeyValuesArray:response.data];
            if (array.count == 0) {
                [self.vistrotCollectionView.mj_footer endRefreshing];
                [self.vistrotCollectionView reloadData];
                return;
            }else{
                [self.vierstorListArr addObjectsFromArray:array];
                [self.vistrotCollectionView.mj_footer endRefreshing];
                [self.vistrotCollectionView reloadData];
            }
        }else{
            [self.vistrotCollectionView.mj_footer endRefreshing];
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [self.vistrotCollectionView.mj_footer endRefreshing];
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}


#pragma mark --- NeighborsSimpleCuteSettingVistoeWookaController -- UICollectionViewDelegate,UICollectionViewDataSource
-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 1;
}
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return self.vierstorListArr.count;
}
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    return UIEdgeInsetsMake(10, 10, 10, 10);
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    return CGSizeMake((IPHONE_WIDTH - 30)/2,200);
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    NeighborsSimpleCuteVistoerWookaViewCell *vistoerCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteVistoerWookaViewCell" forIndexPath:indexPath];
    NeighborsSimpleCuteVisoterWookaModel *vistormodel = self.vierstorListArr[indexPath.row];
    [vistoerCell.icon_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@/%@",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th,vistormodel.imgUrl]]placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
    vistoerCell.name_lab.text = vistormodel.nickName;
    if (vistormodel.memberLevel != 0) {
        vistoerCell.hg_img.hidden = NO;
    }else{
        vistoerCell.hg_img.hidden = YES;
    }
    if (vistormodel.isNew != 0) {
        vistoerCell.active_view.hidden = NO;
    }else{
        vistoerCell.active_view.hidden = YES;
    }
    NSString *numberStr = [NSString stringWithFormat:@"Look at me %ld times",(long)vistormodel.totalNum];
    NSMutableAttributedString *attributedString = [[NSMutableAttributedString alloc] initWithString:numberStr];
    [attributedString addAttribute:NSForegroundColorAttributeName value:RGB(243, 193, 70) range:NSMakeRange(10, numberStr.length-16)];
    vistoerCell.number_lab.attributedText = attributedString;
    NSString *time = [self ConvertStrToTime:[NSString stringWithFormat:@"%ld",(long)vistormodel.sortTime]];
    NSLog(@"time11111:%@",time);
    vistoerCell.time_lab.text =  [NSString stringWithFormat:@"visitor time: %@",[self distanceTimeWithBeforeTime:vistormodel.sortTime/1000]];
    return vistoerCell;
}

- (NSString *)ConvertStrToTime:(NSString *)timeStr
{
//long long time=[timeStr longLongValue];
//    如果服务器返回的是13位字符串，需要除以1000，否则显示不正确(13位其实代表的是毫秒，需要除以1000)
long long time=[timeStr longLongValue] / 1000;
NSDate *date = [[NSDate alloc]initWithTimeIntervalSince1970:time];

NSDateFormatter *formatter = [[NSDateFormatter alloc]init];

[formatter setDateFormat:@"yyyy-MM-dd"];

NSString*timeString=[formatter stringFromDate:date];

return timeString;

}
- (NSString *)distanceTimeWithBeforeTime:(double)beTime
{
    NSTimeInterval now = [[NSDate date]timeIntervalSince1970];
    NSLog(@"now:%f",now);
    NSLog(@"beTime:%f",beTime);
    double distanceTime = now - beTime;
    NSString * distanceStr;
  
    NSDate * beDate = [NSDate dateWithTimeIntervalSince1970:beTime];
    NSDateFormatter * df = [[NSDateFormatter alloc]init];
    [df setDateFormat:@"HH:mm"];
    NSString * timeStr = [df stringFromDate:beDate];
  
    [df setDateFormat:@"dd"];
    NSString * nowDay = [df stringFromDate:[NSDate date]];
    NSString * lastDay = [df stringFromDate:beDate];
  
    if (distanceTime < 60) {//小于一分钟
        NSLog(@"小于一分钟");
        [df setDateFormat:@"HH:mm"];
        distanceStr = [df stringFromDate:beDate];
        //distanceStr = @"刚刚";
    }
    else if (distanceTime <60*60) {//时间小于一个小时
        NSLog(@"时间小于一个小时");
        [df setDateFormat:@"HH:mm"];
        distanceStr = [df stringFromDate:beDate];
        //distanceStr = [NSString stringWithFormat:@"%ld分钟前",(long)distanceTime/60];
    }
        else if(distanceTime <24*60*60 && [nowDay integerValue] == [lastDay integerValue]){//时间小于一天
            NSLog(@"时间小于一天");
            [df setDateFormat:@"HH:mm"];
            distanceStr = [df stringFromDate:beDate];
            //distanceStr = [NSString stringWithFormat:@"今天 %@",timeStr];
    }
    else if(distanceTime<24*60*60*2 && [nowDay integerValue] != [lastDay integerValue]){
  
        if ([nowDay integerValue] - [lastDay integerValue] ==1 || ([lastDay integerValue] - [nowDay integerValue] > 10 && [nowDay integerValue] == 1)) {
            NSLog(@"昨天");
            [df setDateFormat:@"yyyy-MM-dd"];
            distanceStr = [df stringFromDate:beDate];
            //distanceStr = [NSString stringWithFormat:@"昨天 %@",timeStr];
    }
    else{
        [df setDateFormat:@"yyyy-MM-dd"];
        distanceStr = [df stringFromDate:beDate];
    }
    }
    else if(distanceTime <24*60*60*365){
        [df setDateFormat:@"yyyy-MM-dd"];
        distanceStr = [df stringFromDate:beDate];
    }
    else{
        [df setDateFormat:@"yyyy-MM-dd"];
        distanceStr = [df stringFromDate:beDate];
    }
    NSLog(@"distanceStr:%@",distanceStr);
    return distanceStr;
}

-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
    NeighborsSimpleCuteHomeVoiceWookaModel *userListModel = self.vierstorListArr[indexPath.row];
        NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if (model.userInfo.imgStatus != 3)
    {
        if (!((IsStrEmpty(model.userInfo.imgUrl) && IsStrEmpty(model.userInfo.tempStr7th))))
        {
            if (model.userInfo.gender > 0)
            {
                if (!IsStrEmpty(model.userInfo.country))
                {
                    if (!(IsStrEmpty(model.userInfo.spareStr1st) || [model.userInfo.spareStr1st hasPrefix:@"please"]))
                    {
                        if (!IsStrEmpty(model.userInfo.spareStr9th))
                        {
                            if (!IsStrEmpty(model.userInfo.spareStr8th))
                            {
                                if (!IsStrEmpty(model.userInfo.spareStr2nd))
                                {
                                    if (!IsStrEmpty(model.userInfo.spareStr11th))
                                    {
                                        if (!((IsStrEmpty(model.userInfo.tempStr1st) && IsStrEmpty(model.userInfo.tempStr2nd)) || (IsStrEmpty(model.userInfo.tempStr1st) && model.userInfo.spareNum1st == 3)))
                                        {
                                            if (!((IsStrEmpty(model.userInfo.tempStr8th) && IsStrEmpty(model.userInfo.tempStr9th)) || (IsStrEmpty(model.userInfo.tempStr9th) && model.userInfo.spareNum3rd == 3)))
                                            {
                                                NSCPersonMessageViewController *personMessageVC = [[NSCPersonMessageViewController alloc]init];
                                                personMessageVC.personUserId = userListModel.userId;
                                                personMessageVC.tempStr20th = userListModel.tempStr20th;
                                                personMessageVC.nickName = userListModel.nickName;
                                                personMessageVC.hidesBottomBarWhenPushed = YES;
                                                [self.navigationController pushViewController:personMessageVC animated:NO];
                                                return;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
        self.myMessageView = [[NSCMyMessageView alloc]init];
        self.myMessageView.index = indexPath.row;
        self.myMessageView.delegate = self;
        [[UIApplication sharedApplication].keyWindow addSubview:self.myMessageView];
        [self.myMessageView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.edges.equalTo([UIApplication sharedApplication].keyWindow);
        }];
}
-(void)myMessageIsAllReadyWithIndex:(NSInteger)index
{
    NeighborsSimpleCuteHomeVoiceWookaModel *userListModel = self.vierstorListArr[index];
    [self.myMessageView removeFromSuperview];
    NSCPersonMessageViewController *personMessageVC = [[NSCPersonMessageViewController alloc]init];
    personMessageVC.personUserId = userListModel.userId;
    personMessageVC.tempStr20th = userListModel.tempStr20th;
    personMessageVC.nickName = userListModel.nickName;
    personMessageVC.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:personMessageVC animated:NO];
}
@end

//喜欢列表
@interface NeighborsSimpleCuteSettingLikeMeWookaController()<UICollectionViewDelegate,UICollectionViewDataSource,NSCMyMessageViewDelegate>
@property (nonatomic,strong)NeighborsSimpleEmpteryView *emptyImageView;
@property (nonatomic,strong)NSMutableArray *likeListArr;
@property (nonatomic,strong)UICollectionView *likeCollectionView;
@property (nonatomic,assign)BOOL isMore;
@property (nonatomic,assign)NSInteger page;
@property (nonatomic,assign)BOOL isUpdate;
@property (nonatomic, strong) NSCMyMessageView *myMessageView;
@end

@implementation NeighborsSimpleCuteSettingLikeMeWookaController

- (UICollectionView *)likeCollectionView
{
    if (!_likeCollectionView) {
        UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc]init];
        flow.scrollDirection = UICollectionViewScrollDirectionVertical;
        flow.minimumLineSpacing = 10;//行间距
        flow.minimumInteritemSpacing = 10;//列间距
        _likeCollectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flow];
        _likeCollectionView.backgroundColor = [UIColor clearColor];
        _likeCollectionView.showsVerticalScrollIndicator = NO;
        _likeCollectionView.showsHorizontalScrollIndicator = NO;
        _likeCollectionView.delegate = self;
        _likeCollectionView.dataSource = self;
        [_likeCollectionView registerClass:[NeighborsSimpleCuteLikeMeWookaViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteLikeMeWookaViewCell"];
    }
    return _likeCollectionView;
}
- (NSMutableArray *)likeListArr
{
    if (!_likeListArr) {
        _likeListArr = [NSMutableArray array];
    }
    return _likeListArr;
}

- (NeighborsSimpleEmpteryView *)emptyImageView
{
    if (!_emptyImageView) {
        _emptyImageView = [[NeighborsSimpleEmpteryView alloc]init];
        _emptyImageView.topImageView.image = [UIImage imageNamed:TUIKitResource(@"zf_setting_likeme")];
        _emptyImageView.titleLab.text = @"No member found Looks like no one has visited you yet";
    }
    return _emptyImageView;
}

-(void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if (model.userInfo.memberLevel  == 0) {
        //不是会员
        if ([self.numberStr isEqualToString:@"0"]) {
            //没有数据
            self.emptyImageView.hidden = NO;
            self.emptyImageView.titleLab.text = @"No member found \n Looks like no one has liked you yet";
            [self.emptyImageView.bottomBtn setTitle:@"Search match" forState:UIControlStateNormal];
            self.likeCollectionView.hidden = YES;
        }else{
            //有数据
            self.isUpdate = YES;
            self.emptyImageView.hidden = NO;
            NSString *alterStr = [NSString stringWithFormat:@"See who like you \n %@ members used to like you",self.numberStr];
            NSMutableAttributedString *attributedString = [[NSMutableAttributedString alloc] initWithString:alterStr];
            [attributedString addAttribute:NSForegroundColorAttributeName value:RGB(243, 193, 70) range:NSMakeRange(19, alterStr.length-44)];
            self.emptyImageView.titleLab.attributedText = attributedString;
            [self.emptyImageView.bottomBtn setTitle:@"Upgrade Now" forState:UIControlStateNormal];
        }
    }else{
        //是会员
        [self.view addSubview:self.likeCollectionView];
        [self.likeCollectionView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.right.top.bottom.offset(0);
        }];
        self.likeCollectionView.mj_header = [MJRefreshNormalHeader headerWithRefreshingTarget:self refreshingAction:@selector(actionNewLikeMeList)];
        self.likeCollectionView.mj_footer = [MJRefreshBackNormalFooter footerWithRefreshingTarget:self refreshingAction:@selector(actionMoreLikeMeList)];
        [self.likeCollectionView.header beginRefreshing];
    }
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"Like me";
    [self.view addSubview:self.emptyImageView];
    self.emptyImageView.hidden = YES;
    [self.emptyImageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.edges.mas_equalTo(self.view);
    }];
    [self.emptyImageView setNeighborsSimpleEmpteryViewSearchMatchBlock:^{
        if (self.isUpdate == YES) {
            ZFMemberUpgrdeOtherController *zfothermembervc = [[ZFMemberUpgrdeOtherController alloc]init];
            zfothermembervc.hidesBottomBarWhenPushed = YES;
            [self.navigationController pushViewController:zfothermembervc animated:YES];
        }else{
            self.tabBarController.selectedIndex = 0;
            [self.navigationController popViewControllerAnimated:YES];
        }
    }];    
    
}
-(void)actionNewLikeMeList
{
    self.isMore = NO;
    [self.likeCollectionView.mj_footer resetNoMoreData];
    self.page = 1;
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"pageNum"] = @(self.page);
    NSString *baseurl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/relation/like/detail"];
    NSLog(@"param:%@",param);
    NSLog(@"baseurl:%@",baseurl);
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseurl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"response.data.detail:%@",response.data);
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            [self.likeListArr removeAllObjects];
            self.likeListArr = [NeighborsSimpleCuteLikeWookaModel mj_objectArrayWithKeyValuesArray:response.data];
            if (self.likeListArr.count == 0) {
                self.emptyImageView.hidden = NO;
                self.likeCollectionView.hidden = YES;
            }else{
                self.emptyImageView.hidden = YES;
                self.likeCollectionView.hidden = NO;
            }
            [self.likeCollectionView.mj_header endRefreshing];
            [self.likeCollectionView reloadData];
        }else{
            [self.likeCollectionView.mj_header endRefreshing];
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD dismiss];
        self.emptyImageView.hidden = NO;
        self.likeCollectionView.hidden = YES;
        [self.likeCollectionView.mj_header endRefreshing];
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}

-(void)actionMoreLikeMeList
{
    if (self.isMore == YES) {
        [self.likeCollectionView.mj_footer endRefreshing];
        return;
    }

    self.page++;
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"pageNum"] = @(self.page);
    NSString *baseurl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/relation/like/detail"];
    NSLog(@"param:%@",param);
    NSLog(@"baseurl:%@",baseurl);
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseurl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"response.data:%@",response.data);
        [self.likeCollectionView.mj_footer  endRefreshing];
        if (response.code == 0) {
            self.emptyImageView.hidden = YES;
            self.likeCollectionView.hidden = NO;
            NSMutableArray *array  = [NeighborsSimpleCuteLikeWookaModel mj_objectArrayWithKeyValuesArray:response.data];
            if (array.count == 0) {
                [self.likeCollectionView.mj_footer endRefreshing];
                [self.likeCollectionView reloadData];
                return;
            }else{
                [self.likeListArr addObjectsFromArray:array];
                [self.likeCollectionView.mj_footer endRefreshing];
                [self.likeCollectionView reloadData];
            }
        }else{
            [self.likeCollectionView.mj_footer endRefreshing];
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [self.likeCollectionView.mj_footer endRefreshing];
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}

#pragma mark -- NeighborsSimpleCuteSettingLikeMeWookaController -- UICollectionViewDelegate,UICollectionViewDataSource
-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 1;
}
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return self.likeListArr.count;
}
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    return UIEdgeInsetsMake(10, 10, 10, 10);
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    return CGSizeMake((IPHONE_WIDTH - 30)/2,180);
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    NeighborsSimpleCuteLikeMeWookaViewCell *likemeCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteLikeMeWookaViewCell" forIndexPath:indexPath];
    NeighborsSimpleCuteLikeWookaModel *model = self.likeListArr[indexPath.row];
    [likemeCell.icon_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@/%@",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th,model.imgUrl]] placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
    likemeCell.name_lab.text = model.nickName;
    if (model.memberLevel != 0) {
        likemeCell.hg_img.hidden = NO;
    }else{
        likemeCell.hg_img.hidden = YES;
    }
    if (model.isNew != 0) {
        likemeCell.active_view.hidden = NO;
    }else{
        likemeCell.active_view.hidden = YES;
    }
    NSString *time = [self ConvertStrToTime:[NSString stringWithFormat:@"%ld",(long)model.sortTime]];
    NSLog(@"time11111:%@",time);
    likemeCell.time_lab.text =  [NSString stringWithFormat:@"Like me time: %@",[self distanceTimeWithBeforeTime:model.sortTime/1000]];
    return likemeCell;
}
- (NSString *)distanceTimeWithBeforeTime:(double)beTime
{
    NSTimeInterval now = [[NSDate date]timeIntervalSince1970];
    NSLog(@"now:%f",now);
    NSLog(@"beTime:%f",beTime);
    double distanceTime = now - beTime;
    NSString * distanceStr;
  
    NSDate * beDate = [NSDate dateWithTimeIntervalSince1970:beTime];
    NSDateFormatter * df = [[NSDateFormatter alloc]init];
    [df setDateFormat:@"HH:mm"];
    NSString * timeStr = [df stringFromDate:beDate];
  
    [df setDateFormat:@"dd"];
    NSString * nowDay = [df stringFromDate:[NSDate date]];
    NSString * lastDay = [df stringFromDate:beDate];
  
    if (distanceTime < 60) {//小于一分钟
        NSLog(@"小于一分钟");
        [df setDateFormat:@"HH:mm"];
        distanceStr = [df stringFromDate:beDate];
        //distanceStr = @"刚刚";
    }
    else if (distanceTime <60*60) {//时间小于一个小时
        NSLog(@"时间小于一个小时");
        [df setDateFormat:@"HH:mm"];
        distanceStr = [df stringFromDate:beDate];
        //distanceStr = [NSString stringWithFormat:@"%ld分钟前",(long)distanceTime/60];
    }
        else if(distanceTime <24*60*60 && [nowDay integerValue] == [lastDay integerValue]){//时间小于一天
            NSLog(@"时间小于一天");
            [df setDateFormat:@"HH:mm"];
            distanceStr = [df stringFromDate:beDate];
            //distanceStr = [NSString stringWithFormat:@"今天 %@",timeStr];
    }
    else if(distanceTime<24*60*60*2 && [nowDay integerValue] != [lastDay integerValue]){
  
        if ([nowDay integerValue] - [lastDay integerValue] ==1 || ([lastDay integerValue] - [nowDay integerValue] > 10 && [nowDay integerValue] == 1)) {
            NSLog(@"昨天");
            [df setDateFormat:@"yyyy-MM-dd"];
            distanceStr = [df stringFromDate:beDate];
            //distanceStr = [NSString stringWithFormat:@"昨天 %@",timeStr];
    }
    else{
        [df setDateFormat:@"yyyy-MM-dd"];
        distanceStr = [df stringFromDate:beDate];
    }
    }
    else if(distanceTime <24*60*60*365){
        [df setDateFormat:@"yyyy-MM-dd"];
        distanceStr = [df stringFromDate:beDate];
    }
    else{
        [df setDateFormat:@"yyyy-MM-dd"];
        distanceStr = [df stringFromDate:beDate];
    }
    NSLog(@"distanceStr:%@",distanceStr);
    return distanceStr;
}
-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
    NeighborsSimpleCuteHomeVoiceWookaModel *userListModel = self.likeListArr[indexPath.row];
        NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if (model.userInfo.imgStatus != 3)
    {
        if (!((IsStrEmpty(model.userInfo.imgUrl) && IsStrEmpty(model.userInfo.tempStr7th))))
        {
            if (model.userInfo.gender > 0)
            {
                if (!IsStrEmpty(model.userInfo.country))
                {
                    if (!(IsStrEmpty(model.userInfo.spareStr1st) || [model.userInfo.spareStr1st hasPrefix:@"please"]))
                    {
                        if (!IsStrEmpty(model.userInfo.spareStr9th))
                        {
                            if (!IsStrEmpty(model.userInfo.spareStr8th))
                            {
                                if (!IsStrEmpty(model.userInfo.spareStr2nd))
                                {
                                    if (!IsStrEmpty(model.userInfo.spareStr11th))
                                    {
                                        if (!((IsStrEmpty(model.userInfo.tempStr1st) && IsStrEmpty(model.userInfo.tempStr2nd)) || (IsStrEmpty(model.userInfo.tempStr1st) && model.userInfo.spareNum1st == 3)))
                                        {
                                            if (!((IsStrEmpty(model.userInfo.tempStr8th) && IsStrEmpty(model.userInfo.tempStr9th)) || (IsStrEmpty(model.userInfo.tempStr9th) && model.userInfo.spareNum3rd == 3)))
                                            {
                                                NSCPersonMessageViewController *personMessageVC = [[NSCPersonMessageViewController alloc]init];
                                                personMessageVC.personUserId = userListModel.userId;
                                                personMessageVC.tempStr20th = userListModel.tempStr20th;
                                                personMessageVC.nickName = userListModel.nickName;
                                                personMessageVC.hidesBottomBarWhenPushed = YES;
                                                [self.navigationController pushViewController:personMessageVC animated:NO];
                                                return;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
        self.myMessageView = [[NSCMyMessageView alloc]init];
        self.myMessageView.index = indexPath.row;
        self.myMessageView.delegate = self;
        [[UIApplication sharedApplication].keyWindow addSubview:self.myMessageView];
        [self.myMessageView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.edges.equalTo([UIApplication sharedApplication].keyWindow);
        }];
}

-(void)myMessageIsAllReadyWithIndex:(NSInteger)index
{
    NeighborsSimpleCuteHomeVoiceWookaModel *userListModel = self.likeListArr[index];
    [self.myMessageView removeFromSuperview];
    NSCPersonMessageViewController *personMessageVC = [[NSCPersonMessageViewController alloc]init];
    personMessageVC.personUserId = userListModel.userId;
    personMessageVC.tempStr20th = userListModel.tempStr20th;
    personMessageVC.nickName = userListModel.nickName;
    personMessageVC.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:personMessageVC animated:NO];
}

- (NSString *)ConvertStrToTime:(NSString *)timeStr
{
//long long time=[timeStr longLongValue];
//    如果服务器返回的是13位字符串，需要除以1000，否则显示不正确(13位其实代表的是毫秒，需要除以1000)
long long time=[timeStr longLongValue] / 1000;
NSDate *date = [[NSDate alloc]initWithTimeIntervalSince1970:time];

NSDateFormatter *formatter = [[NSDateFormatter alloc]init];

[formatter setDateFormat:@"yyyy-MM-dd"];

NSString*timeString=[formatter stringFromDate:date];

return timeString;

}
@end

//请求列表

@interface NeighborsSimpleSettingRequestWookaController ()

@property (nonatomic,strong)NeighborsSimpleEmpteryView *emptyImageView;

@end

@implementation NeighborsSimpleSettingRequestWookaController

- (NeighborsSimpleEmpteryView *)emptyImageView
{
    if (!_emptyImageView) {
        _emptyImageView = [[NeighborsSimpleEmpteryView alloc]init];
        _emptyImageView.topImageView.image = [UIImage imageNamed:TUIKitResource(@"zf_setting_videocall")];
        _emptyImageView.titleLab.text = @"You haven't received video call request.";
    }
    return _emptyImageView;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"Video call";
    [self.view addSubview:self.emptyImageView];
    self.emptyImageView.hidden = NO;
    [self.emptyImageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.edges.mas_equalTo(self.view);
    }];
    [self.emptyImageView setNeighborsSimpleEmpteryViewSearchMatchBlock:^{
        self.tabBarController.selectedIndex = 0;
        [self.navigationController popViewControllerAnimated:YES];
    }];
}
@end

@interface NeighborsSimpleCuteHomeVoiceUserInfoWookaModel ()

@end

@implementation NeighborsSimpleCuteHomeVoiceUserInfoWookaModel

@end

@interface NeighborsSimpleCuteHomeVoiceWookaModel()

@end

@implementation NeighborsSimpleCuteHomeVoiceWookaModel

@end


@interface NeighborsSimpleCuteUserVoiceWookaViewCell ()
/*
 @property (strong, nonatomic)  UIView *bg_view;
 @property (strong, nonatomic)  UIImageView *icon_img;
 @property (strong, nonatomic)  UILabel *name_lab;
 @property (strong, nonatomic)  UILabel *other_lab;
 @property (strong, nonatomic)  UIImageView *gh_img;
 */
@end

@implementation NeighborsSimpleCuteUserVoiceWookaViewCell

- (UIImageView *)icon_img
{
    if (!_icon_img) {
        _icon_img = [[UIImageView alloc]init];
        _icon_img.image = [UIImage imageNamed:TUIKitResource(@"zf_setting_vistoer")];
        _icon_img.contentMode = UIViewContentModeScaleAspectFill;
        _icon_img.layer.cornerRadius = ((IPHONE_WIDTH -  30)/2-26)/2;
        _icon_img.layer.masksToBounds = YES;
    }
    return _icon_img;
}

- (UIView *)bg_view
{
    if(!_bg_view){
        _bg_view = [[UIView alloc]init];
        _bg_view.backgroundColor = [UIColor colorWithWhite:1.0 alpha:0.08];
        _bg_view.layer.cornerRadius = ((IPHONE_WIDTH -  30)/2-20)/2;
        _bg_view.layer.masksToBounds = YES;
      
    }
    return _bg_view;
}

- (UILabel *)name_lab
{
    if(!_name_lab){
        _name_lab = [[UILabel alloc]init];
        _name_lab.font = [UIFont systemFontOfSize:17];
        _name_lab.text = @"Summber";
        _name_lab.numberOfLines = 1;
        _name_lab.textAlignment = NSTextAlignmentCenter;
        _name_lab.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
    }
    return _name_lab;
}

- (UILabel *)other_lab
{
    if(!_other_lab){
        _other_lab = [[UILabel alloc]init];
        _other_lab.font = [UIFont systemFontOfSize:12];
        _other_lab.text = @"30, New York";
        _other_lab.numberOfLines = 1;
        _other_lab.textAlignment = NSTextAlignmentCenter;
        _other_lab.textColor = [UIColor whiteColor];
    }
    return _other_lab;
}

- (UIImageView *)gh_img
{
    if (!_gh_img) {
        _gh_img = [[UIImageView alloc]init];
        _gh_img.image = [UIImage imageNamed:TUIKitResource(@"zf_fiter_gh")];
        _gh_img.contentMode = UIViewContentModeScaleAspectFill;
    }
    return _gh_img;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.layer.cornerRadius = 10.0f;
        self.layer.masksToBounds = YES;
        self.backgroundColor = NSC_BGThemColor2;
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self addSubview:self.bg_view];
    [self.bg_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.offset(25);
        make.left.offset(10);
        make.right.offset(-10);
        make.height.mas_equalTo(self.bg_view.mas_width).multipliedBy(1);
    }];
    
    [self addSubview:self.icon_img];
    [self.icon_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.offset(29);
        make.left.offset(14);
        make.right.offset(-14);
        make.height.mas_equalTo(self.icon_img.mas_width).multipliedBy(1);
    }];
    

    
    [self addSubview:self.gh_img];
    [self.gh_img mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.offset(15);
        make.left.offset(10);
        make.width.height.offset(26);
    }];
    
    [self addSubview:self.name_lab];
    [self.name_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.mas_equalTo(self.bg_view.mas_bottom).offset(10);
        make.left.offset(8);
        make.right.offset(-8);
    }];
    
    [self addSubview:self.other_lab];
    [self.other_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.top.mas_equalTo(self.name_lab.mas_bottom).offset(10);
        make.left.offset(8);
        make.right.offset(-8);
    }];
}
@end

@interface NeighborsSimpleCuteFiterModel()

@end

@implementation NeighborsSimpleCuteFiterModel

static NSString *UserModelKey2 = @"FiterUserModelkey";

+ (void)save:(NeighborsSimpleCuteFiterModel *)model
{
    NSDictionary *user = model.mj_keyValues;
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setObject:user forKey:UserModelKey];
    [defaults synchronize];
}
+ (NeighborsSimpleCuteFiterModel *)getUserInfo
{
    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] objectForKey:UserModelKey];
    NeighborsSimpleCuteFiterModel *user =[NeighborsSimpleCuteFiterModel mj_objectWithKeyValues:dict];
    return user;
}
+ (BOOL)isOnline
{
    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] objectForKey:UserModelKey];
    NeighborsSimpleCuteFiterModel *user =[NeighborsSimpleCuteFiterModel mj_objectWithKeyValues:dict];
    if (user.genderStr.length>0)
        return YES;
    return NO;
}
+ (void)logout
{
    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] objectForKey:UserModelKey];
    NeighborsSimpleCuteFiterModel *user =[NeighborsSimpleCuteFiterModel mj_objectWithKeyValues:dict];
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults removeObjectForKey:UserModelKey];
    [defaults synchronize];
    user = nil;
}

@end
//全部的数据功能
@interface NeighborsSimpleCuteHomeAllWookaController()
@property (nonatomic,strong)UIView *topView;
@property (nonatomic,strong)UIButton *leftBtn;
@property (nonatomic,strong)CusLabel *SCAMMERLab;
@property (nonatomic,strong)UILabel  *SCAMMERLab2;
@property (nonatomic,strong)CusLabel *BROWSELab;
@property (nonatomic,strong)UILabel  *BROWSELab2;
@property (nonatomic,strong)UILabel  *SCAMMERLineLab;
@property (nonatomic,strong)UILabel  *BROWSELineLab;
@property (nonatomic,strong)UIButton *rightBtn;
@property (nonatomic,strong)UIButton *filterBtn;
@property (nonatomic, strong) NeighborsSimpleCuteScammerListController *scammervc;
@property (nonatomic, strong) NeighborsSimpleCuteHomeUserListWookaController *userListvc;
@end
@implementation NeighborsSimpleCuteHomeAllWookaController

- (UIButton *)filterBtn
{
    if(!_filterBtn){
        _filterBtn = [[UIButton alloc]init];
        [_filterBtn setImage:[UIImage imageNamed:TUIKitResource(@"zf_sort_icon")] forState:UIControlStateNormal];
        [_filterBtn addTarget:self action:@selector(actionFilterBtn:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _filterBtn;
}
-(void)actionFilterBtn:(UIButton *)btn
{
    NeighborsSimpleCuteFiterController *filtervc = [[NeighborsSimpleCuteFiterController alloc]init];
    filtervc.hidesBottomBarWhenPushed = YES;
    [filtervc setNeighborsSimpleCuteHomeFiterControllerBlock:^(NSString *minStr, NSString *maxStr, NSString *genderStr, NeighborsSimpleCuteResetCountryModel *countryModel, NeighborsSimpleCuteResetCountryModel *stateModel, NeighborsSimpleCuteResetCountryModel *cityModel, BOOL anyWhere) {
        [_userListvc actionNewFiterList2];
    }];
    [self.navigationController pushViewController:filtervc animated:YES];
}
- (NeighborsSimpleCuteScammerListController *)scammervc
{
    if(!_scammervc){
        _scammervc = [[NeighborsSimpleCuteScammerListController alloc]init];
    }
    return _scammervc;
}
- (NeighborsSimpleCuteHomeUserListWookaController *)userListvc
{
    if(!_userListvc){
        _userListvc = [[NeighborsSimpleCuteHomeUserListWookaController alloc]init];
    }
    return _userListvc;
}
//- (UILabel *)SCAMMERLineLab
//{
//    if (!_SCAMMERLineLab) {
//        _SCAMMERLineLab = [[UILabel alloc]init];
//        _SCAMMERLineLab.hidden = YES;
//        _SCAMMERLineLab.backgroundColor = RGB(255, 241, 0);
//        _SCAMMERLineLab.textAlignment = NSTextAlignmentCenter;
//    }
//    return _SCAMMERLineLab;
//}
//- (UILabel *)BROWSELineLab
//{
//    if (!_BROWSELineLab) {
//        _BROWSELineLab = [[UILabel alloc]init];
//        _BROWSELineLab.backgroundColor = RGB(255, 241, 0);
//        _BROWSELineLab.hidden = YES;
//        _BROWSELineLab.textAlignment = NSTextAlignmentCenter;
//    }
//    return _BROWSELineLab;
//}
//- (CusLabel *)SCAMMERLab
//{
//    if(!_SCAMMERLab){
//        _SCAMMERLab = [[CusLabel alloc]init];
//        _SCAMMERLab.text = @"SCAMMER";
//        _SCAMMERLab.hidden = YES;
//        _SCAMMERLab.font = [UIFont systemFontOfSize:17];
//        _SCAMMERLab.textAlignment = NSTextAlignmentCenter;
//    }
//    return _SCAMMERLab;
//}
//- (UILabel *)SCAMMERLab2
//{
//    if (!_SCAMMERLab2) {
//        _SCAMMERLab2 = [[UILabel alloc]init];
//        _SCAMMERLab2.text = @"SCAMMER";
//        _SCAMMERLab2.font = [UIFont systemFontOfSize:17];
//        _SCAMMERLab2.textColor = RGB(197, 197,197);
//        _SCAMMERLab2.textAlignment = NSTextAlignmentCenter;
//    }
//    return _SCAMMERLab2;
//}

//- (CusLabel *)BROWSELab
//{
//    if(!_BROWSELab){
//        _BROWSELab = [[CusLabel alloc]init];
//        _BROWSELab.text = @"BROWSE";
//        _BROWSELab.hidden = YES;
//        _BROWSELab.font = [UIFont systemFontOfSize:17];
//        _BROWSELab.textAlignment = NSTextAlignmentCenter;
//    }
//    return _BROWSELab;
//}
//- (UILabel *)BROWSELab2
//{
//    if (!_BROWSELab2) {
//        _BROWSELab2 = [[UILabel alloc]init];
//        _BROWSELab2.text = @"BROWSE";
//        _BROWSELab2.font = [UIFont systemFontOfSize:17];
//        _BROWSELab2.textColor = RGB(197, 197,197);
//        _BROWSELab2.textAlignment = NSTextAlignmentCenter;
//    }
//    return _BROWSELab2;
//}
//- (UIButton *)rightBtn
//{
//    if (!_rightBtn){
//        _rightBtn = [[UIButton alloc]initWithFrame:CGRectMake(120,0, 240/2, 50)];
//        //[_rightBtn setTitle:@"SUPRISE2" forState:UIControlStateNormal];
//        [_rightBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
//        _rightBtn.titleLabel.font = [UIFont systemFontOfSize:16];
//        [_rightBtn addTarget:self action:@selector(actionRihgtBtn:) forControlEvents:UIControlEventTouchUpInside];
//    }
//    return _rightBtn;
//}

//- (UIButton *)leftBtn
//{
//    if (!_leftBtn){
//        _leftBtn = [[UIButton alloc]initWithFrame:CGRectMake(0,0, 240/2, 50)];
//       // [_leftBtn setTitle:@"SUPRISE" forState:UIControlStateNormal];
//        [_leftBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
//        _leftBtn.titleLabel.font = [UIFont systemFontOfSize:16];
//        [_leftBtn addTarget:self action:@selector(actionLeftBtn:) forControlEvents:UIControlEventTouchUpInside];
//    }
//    return _leftBtn;
//}

//- (UIView *)topView
//{
//    if (!_topView) {
//        _topView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 240, 50)];
//        _topView.backgroundColor = [UIColor clearColor];
//    }
//    return _topView;
//}
/// right bnt
/// @param btn right btn
-(void)actionRihgtBtn:(UIButton *)btn
{
    self.filterBtn.hidden = NO;
    self.BROWSELab.hidden = NO;
    self.BROWSELineLab.hidden = NO;
    self.BROWSELab2.hidden = YES;
    self.SCAMMERLab.hidden = YES;
    self.SCAMMERLab2.hidden = NO;
    self.SCAMMERLineLab.hidden = YES;
    [self addChildViewController:self.userListvc];
    self.userListvc.view.frame = self.view.bounds;
    [self.view addSubview:self.userListvc.view];
    [self.userListvc didMoveToParentViewController:self];
}
/// left btn
/// @param btn left btn
-(void)actionLeftBtn:(UIButton *)btn
{
    self.filterBtn.hidden = YES;
    self.BROWSELab.hidden = YES;
    self.BROWSELineLab.hidden = YES;
    self.BROWSELab2.hidden = NO;
    self.SCAMMERLab.hidden = NO;
    self.SCAMMERLab2.hidden = YES;
    self.SCAMMERLineLab.hidden = NO;
    [self addChildViewController:self.scammervc];
    self.scammervc.view.frame = self.view.bounds;
    [self.view addSubview:self.scammervc.view];
    [self.scammervc didMoveToParentViewController:self];
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    self.filterBtn.frame = CGRectMake(0, 0, 40, 40);
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:self.filterBtn];
    self.topView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 240, 50)];
    self.topView.backgroundColor = [UIColor clearColor];
    self.navigationItem.titleView = self.topView;
    

    self.leftBtn = [[UIButton alloc]initWithFrame:CGRectMake(0,0, 240/2, 50)];
    [self.leftBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    self.leftBtn.titleLabel.font = [UIFont boldSystemFontOfSize:16];
    [self.leftBtn addTarget:self action:@selector(actionLeftBtn:) forControlEvents:UIControlEventTouchUpInside];
    
    self.rightBtn = [[UIButton alloc]initWithFrame:CGRectMake(120,0, 240/2, 50)];
    [self.rightBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    self.rightBtn.titleLabel.font = [UIFont boldSystemFontOfSize:16];
    [self.rightBtn addTarget:self action:@selector(actionRihgtBtn:) forControlEvents:UIControlEventTouchUpInside];
    
    
    _SCAMMERLab = [[CusLabel alloc]initWithFrame:CGRectMake(0, 15, 120, 50)];
    _SCAMMERLab.text = @"Scammer";
    _SCAMMERLab.hidden = NO;
    _SCAMMERLab.font = [UIFont systemFontOfSize:17];
    _SCAMMERLab.textAlignment = NSTextAlignmentCenter;
    
    _SCAMMERLab2 = [[UILabel alloc]initWithFrame:CGRectMake(0, 0, 120, 50)];
    _SCAMMERLab2.text = @"Scammer";
    _SCAMMERLab2.font = [UIFont systemFontOfSize:17];
    _SCAMMERLab2.textColor = [UIColor whiteColor];
    _SCAMMERLab2.textAlignment = NSTextAlignmentCenter;
    
    _SCAMMERLineLab = [[UILabel alloc]initWithFrame:CGRectMake(45, 40, 30, 1.5)];
    _SCAMMERLineLab.hidden = YES;
    _SCAMMERLineLab.backgroundColor = RGB(255,188,62);
    _SCAMMERLineLab.textAlignment = NSTextAlignmentCenter;
    
    
    [self.topView addSubview:self.SCAMMERLab];
    [self.topView addSubview:self.SCAMMERLab2];
    [self.topView addSubview:self.SCAMMERLineLab];

    
    _BROWSELab = [[CusLabel alloc]initWithFrame:CGRectMake(120, 15, 120, 50)];
    _BROWSELab.text = @"Browse";
    _BROWSELab.font = [UIFont systemFontOfSize:17];
    _BROWSELab.textAlignment = NSTextAlignmentCenter;

    _BROWSELab2 = [[UILabel alloc]initWithFrame:CGRectMake(120, 0, 120, 50)];
    _BROWSELab2.text = @"Browse";
    _BROWSELab2.font = [UIFont systemFontOfSize:17];
    _BROWSELab2.textColor = [UIColor whiteColor];
    _BROWSELab2.textAlignment = NSTextAlignmentCenter;

    _BROWSELineLab = [[UILabel alloc]initWithFrame:CGRectMake(165, 40, 30, 1.5)];
    _BROWSELineLab.backgroundColor = RGB(255,188,62);
    _BROWSELineLab.hidden = YES;
    _BROWSELineLab.textAlignment = NSTextAlignmentCenter;
    
    [self.topView addSubview:self.BROWSELab];
    [self.topView addSubview:self.BROWSELab2];
    [self.topView addSubview:self.BROWSELineLab];


    [self.topView addSubview:self.leftBtn];
    [self.topView addSubview:self.rightBtn];
    
    
    self.BROWSELab.hidden = NO;
    self.BROWSELineLab.hidden = NO;
    self.BROWSELab2.hidden = YES;
    self.SCAMMERLab.hidden = YES;
    self.SCAMMERLab2.hidden = NO;
    self.SCAMMERLineLab.hidden = YES;
    [self addChildViewController:self.userListvc];
    self.userListvc.view.frame = self.view.bounds;
    [self.view addSubview:self.userListvc.view];
    [self.userListvc didMoveToParentViewController:self];
}
- (void)onNeighborsSimpleCuteRightBackBtn:(UIButton *)btn
{
    NSLog(@"sort btn");
}

@end
//主页用户列表
@interface NeighborsSimpleCuteHomeUserListWookaController ()<UICollectionViewDelegate,UICollectionViewDataSource,NSCMyMessageViewDelegate>
@property (nonatomic,strong)NeighborsSimpleEmpteryView *emptyImageView;
@property (nonatomic,strong)UICollectionView *homeUserCollectionView;
@property (nonatomic,strong)NSMutableArray *homeuserListArr;
@property (nonatomic,assign)BOOL isMore;
@property (nonatomic,assign)NSInteger page;
@property (nonatomic, strong) NSCMyMessageView *myMessageView;
@end
@implementation NeighborsSimpleCuteHomeUserListWookaController
- (NeighborsSimpleEmpteryView *)emptyImageView
{
    if (!_emptyImageView) {
        _emptyImageView = [[NeighborsSimpleEmpteryView alloc]init];
        _emptyImageView.topImageView.image = [UIImage imageNamed:TUIKitResource(@"编组 2")];
        _emptyImageView.titleLab.text = @"No users found \n Change your filter to refine your results";
    }
    return _emptyImageView;
}
- (NSMutableArray *)homeuserListArr
{
    if (!_homeuserListArr) {
        _homeuserListArr = [NSMutableArray array];
    }
    return _homeuserListArr;
}
- (UICollectionView *)homeUserCollectionView
{
    if (!_homeUserCollectionView) {
        UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc]init];
        flow.sectionHeadersPinToVisibleBounds = YES;//头视图悬浮
        flow.scrollDirection = UICollectionViewScrollDirectionVertical;
        flow.minimumLineSpacing = 10;//行间距
        flow.minimumInteritemSpacing = 10;//列间距
        _homeUserCollectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flow];
        _homeUserCollectionView.backgroundColor = [UIColor clearColor];
        _homeUserCollectionView.showsVerticalScrollIndicator = NO;
        _homeUserCollectionView.showsHorizontalScrollIndicator = NO;
        _homeUserCollectionView.delegate = self;
        _homeUserCollectionView.dataSource = self;
        [_homeUserCollectionView registerClass:[NeighborsSimpleCuteUserVoiceWookaViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteUserVoiceWookaViewCell"];
    }
    return _homeUserCollectionView;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    [self.view addSubview:self.homeUserCollectionView];
    [self.homeUserCollectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    self.emptyImageView.hidden = YES;
    [self.view addSubview:self.emptyImageView];
    [self.emptyImageView mas_makeConstraints:^(MASConstraintMaker *make) {
         make.edges.mas_equalTo(self.view);
     }];
     [self.emptyImageView setNeighborsSimpleEmpteryViewSearchMatchBlock:^{
         NeighborsSimpleCuteFiterController *filtervc = [[NeighborsSimpleCuteFiterController alloc]init];
         filtervc.hidesBottomBarWhenPushed = YES;
         [filtervc setNeighborsSimpleCuteHomeFiterControllerBlock:^(NSString *minStr, NSString *maxStr, NSString *genderStr, NeighborsSimpleCuteResetCountryModel *countryModel, NeighborsSimpleCuteResetCountryModel *stateModel, NeighborsSimpleCuteResetCountryModel *cityModel, BOOL anyWhere) {
             [self actionNewFiterList2];
         }];
         [self.navigationController pushViewController:filtervc animated:YES];
    }];
    self.homeUserCollectionView.mj_header = [MJRefreshNormalHeader headerWithRefreshingTarget:self refreshingAction:@selector(actionNewFiterList)];
    self.homeUserCollectionView.mj_footer = [MJRefreshBackNormalFooter footerWithRefreshingTarget:self refreshingAction:@selector(actionMoreFiterList)];
    [self.homeUserCollectionView.header beginRefreshing];
}
-(void)actionNewFiterList2
{
    self.page = 1;
    [self.homeUserCollectionView.mj_footer resetNoMoreData];
    NeighborsSimpleCuteFiterModel *fitermodel = [NeighborsSimpleCuteFiterModel getUserInfo];
    [self actionloadUserDataWithGender2:fitermodel.genderStr withMaxage:fitermodel.maxStr withMinAge:fitermodel.minStr withPage:@"1" withisAnywhere:fitermodel.isanyWhere];
}
-(void)actionloadUserDataWithGender2:(NSString *)gender withMaxage:(NSString *)maxAge withMinAge:(NSString *)minAge withPage:(NSString *)page withisAnywhere:(BOOL) isanywhere
{
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    NeighborsSimpleCuteFiterModel *fitermodel = [NeighborsSimpleCuteFiterModel getUserInfo];
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"appType"]          =  @"80";
    if (isanywhere == YES) {
        param[@"cityId"]           = @"0";
    }else{
        if (IS_EMPTY(fitermodel.stateStr)) {
            //只有国家
            param[@"countryId"] = fitermodel.countryId;
        }else{
            if (IS_EMPTY(fitermodel.cityStr)) {
                //省份
                param[@"provinceId"]      = fitermodel.stateId;
            }else{
                //城市
                param[@"cityId"]      = fitermodel.cityId;
            }
        }
    }
    param[@"gender"]           = gender;
    param[@"isSugar"]          = @"0";
    param[@"maxAge"]           = maxAge;
    param[@"minAge"]           = minAge;
    param[@"pageNum"]          = page;
    param[@"pageSize"]         = @"20";
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/account/user/list"];
    NSLog(@"param:%@",param);
    NSLog(@"baseUrl11111111:%@",baseUrl);
    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"user/list.data:%@",response.data);
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            if ([page isEqualToString:@"1"]) {
                [self.homeuserListArr removeAllObjects];
                self.homeuserListArr = [NeighborsSimpleCuteHomeVoiceWookaModel mj_objectArrayWithKeyValuesArray:response.data];
                if (self.homeuserListArr.count <=0) {
                    self.emptyImageView.hidden = NO;
                    self.emptyImageView.titleLab.text = @"No users found \n Change your filter to refine your results";
                    [self.emptyImageView.bottomBtn setTitle:@"Update filters" forState:UIControlStateNormal];
                    self.homeUserCollectionView.hidden = YES;
                }else{
                    self.emptyImageView.hidden = YES;
                    self.homeUserCollectionView.hidden = NO;
                }
            }else{
                self.emptyImageView.hidden = YES;
                self.homeUserCollectionView.hidden = NO;
                NSMutableArray *array = [NeighborsSimpleCuteHomeVoiceWookaModel mj_objectArrayWithKeyValuesArray:response.data];
                [self.homeuserListArr addObjectsFromArray:array];

            }
            [self reloadData];
        }else{
            [self.homeUserCollectionView.mj_header endRefreshing];
            //[SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD dismiss];
        [self.homeUserCollectionView.mj_header endRefreshing];
        //[SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}
-(void)actionNewFiterList
{
    self.page = 1;
    [self.homeUserCollectionView.mj_footer resetNoMoreData];
    NeighborsSimpleCuteFiterModel *fitermodel = [NeighborsSimpleCuteFiterModel getUserInfo];
    [self actionloadUserDataWithGender:fitermodel.genderStr withMaxage:fitermodel.maxStr withMinAge:fitermodel.minStr withPage:@"1" withisAnywhere:fitermodel.isanyWhere];
}
-(void)actionloadUserDataWithGender:(NSString *)gender withMaxage:(NSString *)maxAge withMinAge:(NSString *)minAge withPage:(NSString *)page withisAnywhere:(BOOL) isanywhere
{
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    NeighborsSimpleCuteFiterModel *fitermodel = [NeighborsSimpleCuteFiterModel getUserInfo];
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"appType"]          =  @"80";
    if (isanywhere == YES) {
        param[@"cityId"]           = @"0";
    }else{
        if (IS_EMPTY(fitermodel.stateStr)) {
            //只有国家
            param[@"countryId"] = fitermodel.countryId;
        }else{
            if (IS_EMPTY(fitermodel.cityStr)) {
                //省份
                param[@"provinceId"]      = fitermodel.stateId;
            }else{
                //城市
                param[@"cityId"]      = fitermodel.cityId;
            }
        }
    }
    param[@"gender"]           = gender;
    param[@"isSugar"]          = @"0";
    param[@"maxAge"]           = maxAge;
    param[@"minAge"]           = minAge;
    param[@"pageNum"]          = page;
    param[@"pageSize"]         = @"20";
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/account/user/list"];
    NSLog(@"param:%@",param);
    NSLog(@"baseUrl11111111:%@",baseUrl);
    //[SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"user/list.data:%@",response.data);
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            if ([page isEqualToString:@"1"]) {
                [self.homeuserListArr removeAllObjects];
                self.homeuserListArr = [NeighborsSimpleCuteHomeVoiceWookaModel mj_objectArrayWithKeyValuesArray:response.data];
                if (self.homeuserListArr.count <=0) {
                    self.emptyImageView.hidden = NO;
                    self.emptyImageView.titleLab.text = @"No users found \n Change your filter to refine your results";
                    [self.emptyImageView.bottomBtn setTitle:@"Update filters" forState:UIControlStateNormal];
                    self.homeUserCollectionView.hidden = NO;
                }else{
                    self.emptyImageView.hidden = YES;
                    self.homeUserCollectionView.hidden = NO;
                }
            }else{
                self.emptyImageView.hidden = YES;
                self.homeUserCollectionView.hidden = NO;
                NSMutableArray *array = [NeighborsSimpleCuteHomeVoiceWookaModel mj_objectArrayWithKeyValuesArray:response.data];
                [self.homeuserListArr addObjectsFromArray:array];

            }
            [self reloadData];
        }else{
            [self.homeUserCollectionView.mj_header endRefreshing];
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD dismiss];
        [self.homeUserCollectionView.mj_header endRefreshing];
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}

-(void)reloadData{
    dispatch_async(dispatch_get_main_queue(), ^{
        [self.homeUserCollectionView reloadData];
        [SVProgressHUD dismiss];
        [self endRefresh];
    });
}
-(void)endRefresh
{
    [self.homeUserCollectionView.mj_header endRefreshing];
    [self.homeUserCollectionView.mj_footer endRefreshing];
}
-(void)actionMoreFiterList
{
    self.page++;
    NeighborsSimpleCuteFiterModel *fitermodel = [NeighborsSimpleCuteFiterModel getUserInfo];
    [self actionloadUserDataWithGender:fitermodel.genderStr withMaxage:fitermodel.maxStr withMinAge:fitermodel.minStr withPage:[NSString stringWithFormat:@"%ld",(long)self.page] withisAnywhere:fitermodel.isanyWhere];
}
#pragma mark --- NeighborsSimpleCuteHomeUserListWookaController -- UICollectionViewDelegate,UICollectionViewDataSource
-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 1;
}
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return self.homeuserListArr.count;
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    NeighborsSimpleCuteUserVoiceWookaViewCell *userListCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteUserVoiceWookaViewCell" forIndexPath:indexPath];
    NeighborsSimpleCuteHomeVoiceWookaModel *model = self.homeuserListArr[indexPath.row];
    [userListCell.icon_img sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@/%@",[NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th,model.imgUrl]] placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
    userListCell.name_lab.text = model.nickName;
    if (model.memberLevel != 0) {
        userListCell.gh_img.hidden = NO;
    }else{
        userListCell.gh_img.hidden = YES;
    }
    if (IS_EMPTY(model.province)) {
        //只有国家
        userListCell.other_lab.text = [NSString stringWithFormat:@"%ld, %@",(long)model.age,model.country];
    }else{
        if (IS_EMPTY(model.city)) {
            //国家和城市
            userListCell.other_lab.text = [NSString stringWithFormat:@"%ld, %@ %@",(long)model.age,model.country,model.province];
        }else{
            //国家省份城市
            userListCell.other_lab.text = [NSString stringWithFormat:@"%ld, %@ %@",(long)model.age,model.city,model.tempStr5th];
        }
    }
    return userListCell;
}
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    return UIEdgeInsetsMake(10, 10, 10, 10);
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    return CGSizeMake((IPHONE_WIDTH -  30)/2,(IPHONE_WIDTH -  30)/2+80);
}
-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
    NeighborsSimpleCuteHomeVoiceWookaModel *userListModel = self.homeuserListArr[indexPath.row];
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if (model.userInfo.gender > 0)
    {
        if (!IsStrEmpty(model.userInfo.country))
        {
            if (!(IsStrEmpty(model.userInfo.spareStr1st) || [model.userInfo.spareStr1st hasPrefix:@"please"]))
            {
                if (!IsStrEmpty(model.userInfo.spareStr9th))
                {
                    if (!IsStrEmpty(model.userInfo.spareStr8th))
                    {
                        if (!IsStrEmpty(model.userInfo.spareStr2nd))
                        {
                            if (!IsStrEmpty(model.userInfo.spareStr11th))
                            {
                                if (!((IsStrEmpty(model.userInfo.tempStr1st) && IsStrEmpty(model.userInfo.tempStr2nd)) || (IsStrEmpty(model.userInfo.tempStr1st) && model.userInfo.spareNum1st == 3)))
                                {
                                    if (!((IsStrEmpty(model.userInfo.tempStr8th) && IsStrEmpty(model.userInfo.tempStr9th)) || (IsStrEmpty(model.userInfo.tempStr9th) && model.userInfo.spareNum3rd == 3)))
                                    {
                                        NSCPersonMessageViewController *personMessageVC = [[NSCPersonMessageViewController alloc]init];
                                        personMessageVC.personUserId = userListModel.userId;
                                        personMessageVC.tempStr20th = userListModel.tempStr20th;
                                        personMessageVC.nickName = userListModel.nickName;
                                        personMessageVC.hidesBottomBarWhenPushed = YES;
                                        [self.navigationController pushViewController:personMessageVC animated:NO];
                                        return;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    self.myMessageView = [[NSCMyMessageView alloc]init];
    self.myMessageView.index = indexPath.row;
    self.myMessageView.delegate = self;
    [[UIApplication sharedApplication].keyWindow addSubview:self.myMessageView];
    [self.myMessageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.edges.equalTo([UIApplication sharedApplication].keyWindow);
    }];
}

-(void)myMessageIsAllReadyWithIndex:(NSInteger)index
{
    NeighborsSimpleCuteHomeVoiceWookaModel *userListModel = self.homeuserListArr[index];
    [self.myMessageView removeFromSuperview];
    NSCPersonMessageViewController *personMessageVC = [[NSCPersonMessageViewController alloc]init];
    personMessageVC.personUserId = userListModel.userId;
    personMessageVC.tempStr20th = userListModel.tempStr20th;
    personMessageVC.nickName = userListModel.nickName;
    personMessageVC.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:personMessageVC animated:NO];
}

@end
//头部功能
@interface ScammerHeaderViewCell()
/*
 @property (strong, nonatomic)  CXSGradientLabel *titleLab;
 @property (strong, nonatomic)  UIView *bgView;
 @property (strong, nonatomic)  UIButton *writeScammerBtn;
 @property (strong, nonatomic)  UILabel *contentLab;
 @property (strong, nonatomic)  UIButton *wariteScammerBtn;
 */
@end

@implementation ScammerHeaderViewCell

- (UILabel *)contentLab
{
    if (!_contentLab) {
        _contentLab = [[UILabel alloc]init];
        _contentLab.text = @"111111112222222222";
        _contentLab.textColor = RGB(255,188,62);
        _contentLab.numberOfLines = 0;
        _contentLab.font = [UIFont systemFontOfSize:15];
        _contentLab.textAlignment = NSTextAlignmentLeft;
    }
    return _contentLab;
}

- (CusLabel *)titleLab
{
    if (!_titleLab) {
        _titleLab = [[CusLabel alloc]init];
        _titleLab.text = @"Waring";
        _titleLab.font = [UIFont boldSystemFontOfSize:18];
        _titleLab.textAlignment = NSTextAlignmentCenter;
    }
    return _titleLab;
}

- (UIView *)bgView
{
    if(!_bgView){
        _bgView = [[UIView alloc]init];
        _bgView.backgroundColor = NSC_BGThemColor2;
        _bgView.layer.cornerRadius = 8.0f;
        _bgView.layer.masksToBounds = YES;
    }
    return _bgView;
}
- (UIButton *)writeScammerBtn
{
    if (!_writeScammerBtn) {
        _writeScammerBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_writeScammerBtn gradientButtonWithSize:CGSizeMake(240, 60) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        [_writeScammerBtn setTitle:@"Write Scammer Cases" forState:UIControlStateNormal];
        _writeScammerBtn.titleLabel.font = [UIFont boldSystemFontOfSize:17];
        [_writeScammerBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _writeScammerBtn.layer.cornerRadius = 30.0f;
        _writeScammerBtn.layer.masksToBounds = YES;
        [_writeScammerBtn addTarget:self action:@selector(actionWrietBtnClick:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _writeScammerBtn;
}
/// write scammer cases btn
/// @param btn write scammer cases btn
-(void)actionWrietBtnClick:(UIButton *)btn
{
    NSLog(@"actionWrietBtnClick btn");
    if(self.ScammerHeaderViewCellAddBlock){
        self.ScammerHeaderViewCellAddBlock();
    }
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.layer.cornerRadius = 8.0f;
        self.layer.masksToBounds = YES;
        [self setpUI];
    }
    return self;
}

-(void)setpUI
{
    [self addSubview:self.writeScammerBtn];
    [self.writeScammerBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self);
        make.bottom.offset(0);
        make.width.offset(260);
        make.height.offset(60);
    }];
    
    [self addSubview:self.bgView];
    [self.bgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(10);
        make.top.offset(10);
        make.right.offset(-10);
        make.bottom.mas_equalTo(self.writeScammerBtn.mas_top).offset(-10);
    }];
    
    [self.bgView addSubview:self.titleLab];
    [self.titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bgView);
        make.top.offset(15);
    }];

    [self.bgView addSubview:self.contentLab];
    [self.contentLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(8);
        make.right.offset(-8);
        make.top.mas_equalTo(self.titleLab.mas_bottom).offset(10);
    }];
}

@end
//中间部分
@interface ScammerContentViewCell()
/*
 @property (strong, nonatomic) IBOutlet UIView *bgView;
 @property (strong, nonatomic) IBOutlet CXSGradientLabel *titleLab;
 @property (strong, nonatomic) IBOutlet CXSGradientLabel *numberLab;
 @property (strong, nonatomic) IBOutlet UILabel *typeContentLab;
 @property (strong, nonatomic) IBOutlet UIView *detailView;
 @property (strong, nonatomic) IBOutlet CXSGradientLabel *detailLab;
 @property (strong, nonatomic) IBOutlet UILabel *contentLab;
 */
@end

@implementation ScammerContentViewCell

- (UIView *)detailView
{
    if(!_detailView){
        _detailView = [[UIView alloc]init];
        _detailView.backgroundColor = NSC_BGThemColor2;
    }
    return _detailView;
}

- (UIView *)bgView
{
    if(!_bgView){
        _bgView = [[UIView alloc]init];
        _bgView.backgroundColor = NSC_BGThemColor2;
        _bgView.layer.cornerRadius = 8.0f;
        _bgView.layer.masksToBounds = YES;
    }
    return _bgView;
}
- (CusLabel *)titleLab
{
    if (!_titleLab){
        _titleLab = [[CusLabel alloc]init];
        _titleLab.text = @"Scammer Cases";
        _titleLab.font = [UIFont systemFontOfSize:18];
        _titleLab.textAlignment = NSTextAlignmentCenter;
    }
    return _titleLab;
}

- (CusLabel *)numberLab
{
    if (!_numberLab) {
        _numberLab = [[CusLabel alloc]init];
        _numberLab.text = @"Case No.1";
        _numberLab.font = [UIFont systemFontOfSize:15];
        _numberLab.textAlignment = NSTextAlignmentLeft;
    }
    return _numberLab;
}
- (CusLabel *)typeLab
{
    if(!_typeLab){
        _typeLab = [[CusLabel alloc]init];
        _typeLab.text = @"Type:";
        _typeLab.font = [UIFont systemFontOfSize:15];
        _typeLab.textAlignment = NSTextAlignmentLeft;
    }
    return _typeLab;
}

- (CusLabel *)detailLab
{
    if (!_detailLab){
        _detailLab = [[CusLabel alloc]init];
        _detailLab.text = @"Details:";
        _detailLab.font = [UIFont systemFontOfSize:15];
        _detailLab.textAlignment = NSTextAlignmentLeft;
    }
    return _detailLab;
}

- (UILabel *)typeContentLab
{
    if(!_typeContentLab){
        _typeContentLab = [[UILabel alloc]init];
        _typeContentLab.text = @"111111112222222222";
        _typeContentLab.textColor  = [UIColor whiteColor];
        _typeContentLab.numberOfLines = 0;
        _typeContentLab.font = [UIFont systemFontOfSize:14];
        _typeContentLab.textAlignment = NSTextAlignmentLeft;
    }
    return _typeContentLab;
}

- (UILabel *)contentLab
{
    if (!_contentLab) {
        _contentLab = [[UILabel alloc]init];
        _contentLab.text = @"111111112222222222";
        _contentLab.textColor = [UIColor whiteColor];
        _contentLab.numberOfLines = 0;
        _contentLab.font = [UIFont systemFontOfSize:15];
        _contentLab.textAlignment = NSTextAlignmentLeft;
    }
    return _contentLab;
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self addSubview:self.bgView];
    [self.bgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(10);
        make.top.offset(10);
        make.right.offset(-10);
        make.bottom.offset(0);
    }];
    
    [self.bgView addSubview:self.titleLab];
    [self.titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bgView);
        make.top.offset(20);
    }];
    
    [self.bgView addSubview:self.numberLab];
    [self.numberLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(8);
        make.right.offset(-8);
        make.top.mas_equalTo(self.titleLab.mas_bottom).offset(20);
    }];
    
    [self.bgView addSubview:self.typeLab];
    [self.typeLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(8);
        make.width.offset(50);
        make.top.mas_equalTo(self.numberLab.mas_bottom).offset(20);
    }];
    
    [self.bgView addSubview:self.typeContentLab];
    [self.typeContentLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.typeLab);
        make.right.offset(-8);
        make.left.mas_equalTo(self.typeLab.mas_right).offset(8);
    }];
    
    [self.bgView addSubview:self.detailView];
    [self.detailView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(8);
        make.right.offset(-8);
        make.top.mas_equalTo(self.typeLab.mas_bottom).offset(20);
        make.bottom.offset(0);
    }];
    
    [self.detailView addSubview:self.detailLab];
    [self.detailLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(0);
        make.top.offset(0);
    }];
    
    [self.detailView addSubview:self.contentLab];
    [self.contentLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(0);
        make.right.offset(0);
        make.top.offset(0);
    }];
}

@end

@interface ScammerModelUserInfo()

@end

@implementation ScammerModelUserInfo

@end


@interface ScammerModel ()

@end

@implementation ScammerModel

@end

//SCCAMMER 系统
@interface  NeighborsSimpleCuteScammerListController()<UICollectionViewDelegate,UICollectionViewDataSource>
@property (nonatomic,strong)UICollectionView *scammerCollectionView;
@property (nonatomic,strong)NSMutableArray *scammerListArr;
@property (nonatomic, assign) NSInteger pageNum;
@end
@implementation NeighborsSimpleCuteScammerListController

- (NSMutableArray *)scammerListArr
{
    if(!_scammerListArr){
        _scammerListArr = [NSMutableArray array];
    }
    return _scammerListArr;
}
- (UICollectionView *)scammerCollectionView
{
    if (!_scammerCollectionView) {
        UICollectionViewFlowLayout *flowLayout = [[UICollectionViewFlowLayout alloc] init];
        flowLayout.scrollDirection = UICollectionViewScrollDirectionVertical;
        flowLayout.minimumLineSpacing = 0; //纵向间距
        flowLayout.minimumInteritemSpacing = 0; //横向间距
        _scammerCollectionView = [[UICollectionView alloc] initWithFrame:CGRectZero collectionViewLayout:flowLayout];
        _scammerCollectionView.delegate = self;
        _scammerCollectionView.dataSource = self;
        _scammerCollectionView.backgroundColor = [UIColor clearColor];
        _scammerCollectionView.showsVerticalScrollIndicator = NO;
        [_scammerCollectionView registerClass:[ScammerHeaderViewCell class] forCellWithReuseIdentifier:@"ScammerHeaderViewCell"];
        [_scammerCollectionView registerClass:[ScammerContentViewCell class] forCellWithReuseIdentifier:@"ScammerContentViewCell"];
    }
    return _scammerCollectionView;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    [[NSNotificationCenter defaultCenter]removeObserver:self name:@"SendDynamicNoti" object:nil];
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(requestScammerRefrshPageListHttp) name:@"SendDynamicNoti" object:nil];
    [self.view addSubview:self.scammerCollectionView];
    [self.scammerCollectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
    [self actionNewScammerList];
    self.scammerCollectionView.mj_header = [MJRefreshNormalHeader headerWithRefreshingTarget:self refreshingAction:@selector(actionNewScammerList)];
}

-(void)requestScammerRefrshPageListHttp
{
    [self actionNewScammerList];
}

-(void)actionNewScammerList
{
    self.pageNum = 1;
    NSMutableDictionary *para = [NSMutableDictionary dictionary];
    [para setObject:@"82" forKey:@"appType"];
    [para setObject:@"1" forKey:@"audit"];
    [para setObject:@"0" forKey:@"gender"];
    [para setObject:@"recommend" forKey:@"orderType"];
    [para setObject:@(self.pageNum) forKey:@"pageNum"];
    [para setObject:@"20" forKey:@"pageSize"];
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/dynamic/new/day/list"];
    NSLog(@"param:%@",para);
    NSLog(@"baseUrl:%@",baseUrl);
    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:para success:^(NeighborsSimpleCuteResposeModel *response) {
        NSLog(@"response.data.list:%@",response.data);;
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            if (self.pageNum == 1) {
                [self.scammerListArr removeAllObjects];
                self.scammerListArr = [NSMutableArray arrayWithArray:[ScammerModel mj_objectArrayWithKeyValuesArray:response.data]];
                if (self.scammerListArr.count == 20) {
                    [self addFooterForList];
                }
            }
            else {
                [self.scammerCollectionView.mj_footer endRefreshing];
                [self.scammerListArr addObjectsFromArray:[ScammerModel mj_objectArrayWithKeyValuesArray:response.data]];
                self.pageNum ++;
            }
            [self.scammerCollectionView reloadData];
            [self.scammerCollectionView.mj_header endRefreshing];
        }
        else {
            [SVProgressHUD showErrorWithStatus:response.msg];
            [self.scammerCollectionView.mj_header endRefreshing];
            [self.scammerCollectionView.mj_footer endRefreshing];
        }
    } failure:^(NSError *error) {
        [SVProgressHUD dismiss];
        [SVProgressHUD showErrorWithStatus:error.domain];
        [self.scammerCollectionView.mj_header endRefreshing];
        [self.scammerCollectionView.mj_footer endRefreshing];
    }];
}
-(void)addFooterForList
{
    WeakSelf;
    self.scammerCollectionView.mj_footer = [MJRefreshAutoStateFooter footerWithRefreshingBlock:^{
        [weakSelf requestNextPageMoreHttp];
    }];
}
- (void)requestNextPageMoreHttp
{
    self.pageNum++;
    [self actionScammerListNewWithPage:self.pageNum];
}
-(void)actionScammerListNewWithPage:(NSInteger) page
{
    NSMutableDictionary *para = [NSMutableDictionary dictionary];
    [para setObject:@"82" forKey:@"appType"];
    [para setObject:@"1" forKey:@"audit"];
    [para setObject:@"0" forKey:@"gender"];
    [para setObject:@"recommend" forKey:@"orderType"];
    [para setObject:@(self.pageNum) forKey:@"pageNum"];
    [para setObject:@"20" forKey:@"pageSize"];
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/dynamic/new/day/list"];
    NSLog(@"param:%@",para);
    NSLog(@"urlStr:%@",baseUrl);
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:para success:^(NeighborsSimpleCuteResposeModel *response) {
        NSLog(@"response.data.list:%@",response.data);;
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            [self.scammerListArr addObjectsFromArray:[ScammerModel mj_objectArrayWithKeyValuesArray:response.data]];
            [self.scammerCollectionView reloadData];
            [self.scammerCollectionView.mj_footer endRefreshing];
            [self.scammerCollectionView.mj_header endRefreshing];
        }
        else {
            [SVProgressHUD showErrorWithStatus:response.msg];
            [self.scammerCollectionView.mj_header endRefreshing];
            [self.scammerCollectionView.mj_footer endRefreshing];
        }
    } failure:^(NSError *error) {
        [SVProgressHUD dismiss];
        [SVProgressHUD showErrorWithStatus:error.domain];
        [self.scammerCollectionView.mj_header endRefreshing];
        [self.scammerCollectionView.mj_footer endRefreshing];
    }];
}
#pragma mark -- NeighborsSimpleCuteScammerListController -- UICollectionViewDelegate,UICollectionViewDataSource
-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 2;
}
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    if (section == 0) {
        return 1 ;
    }else{
        return self.scammerListArr.count;
    }
}
//定义每个Section的四边间距
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    return UIEdgeInsetsZero;
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath{
    if (indexPath.section == 0) {
        NSString *stateSet = [NeighborsSimpleCuteUserModel getUserInfo].appClient.stateSet;
        NSLog(@"stateSetstateSetstateSet:%@",stateSet);
        NSArray *stateSetArr = [stateSet componentsSeparatedByString:@";"];
        NSLog(@"stateSetArr:%lu",(unsigned long)stateSetArr.count);
        for (int i = 0; i<stateSetArr.count;i++) {
            NSLog(@"stateSetArr[%d]----%@",i,stateSetArr[i]);
        }
        CGFloat titleH = 50;
        CGFloat contentH = [self GetLabelHeightWithText:stateSetArr[3] width:Screen_Width-36 font:15];
        return CGSizeMake(IPHONE_WIDTH, titleH + contentH + 100);
    }else{
        ScammerModel *model = self.scammerListArr[indexPath.row];
        NSString *textStr = model.text;
        if (textStr.length  > 0) {
            if ([textStr containsString:@"s123c1a1m1m1e1r;"]) {
                NSArray *array = [textStr componentsSeparatedByString:@"s123c1a1m1m1e1r;"];
                CGFloat height = [self GetLabelHeightWithText:array[1] width:Screen_Width-40 font:15];
                return CGSizeMake(IPHONE_WIDTH,height+160);
            }else{
                return CGSizeMake(IPHONE_WIDTH,180);
            }
        }else{
            return CGSizeMake(IPHONE_WIDTH,180);
        }
    }
}
-(float)GetLabelHeightWithText:(NSString *)text width:(float)width font: (float)font
{
    CGRect rect = [text boundingRectWithSize:CGSizeMake(width, MAXFLOAT) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:font]} context:nil];
    return rect.size.height;
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.section == 0) {
        ScammerHeaderViewCell *headerCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"ScammerHeaderViewCell" forIndexPath:indexPath];
        [headerCell setScammerHeaderViewCellAddBlock:^{
            NSLog(@"add block");
            NeighborsSimpleCuteScammerSendController *scammerSendVc = [[NeighborsSimpleCuteScammerSendController alloc]init];
            scammerSendVc.hidesBottomBarWhenPushed = YES;
            [self.navigationController pushViewController:scammerSendVc animated:YES];
        }];
        NSString *stateSet = [NeighborsSimpleCuteUserModel getUserInfo].appClient.stateSet;
        NSLog(@"stateSetstateSetstateSet:%@",stateSet);
        NSArray *stateSetArr = [stateSet componentsSeparatedByString:@";"];
        NSLog(@"stateSetArr:%lu",(unsigned long)stateSetArr.count);
        for (int i = 0; i<stateSetArr.count;i++) {
            NSLog(@"stateSetArr[%d]----%@",i,stateSetArr[i]);
        }
        headerCell.titleLab.text = stateSetArr[2];
        headerCell.contentLab.text = stateSetArr[3];
        return headerCell;
    }else{
        ScammerContentViewCell *contenCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"ScammerContentViewCell" forIndexPath:indexPath];
        ScammerModel *model = self.scammerListArr[indexPath.row];
        contenCell.numberLab.text = [NSString stringWithFormat:@"Case No.%d",(int)indexPath.row+1];
        NSString *textStr = model.text;
        NSLog(@"textStr:%@",textStr);
        if (textStr.length  > 0) {
            if ([textStr containsString:@"s123c1a1m1m1e1r;"]) {
                NSArray *arry = [textStr componentsSeparatedByString:@"s123c1a1m1m1e1r;"];
                NSLog(@"arry[0]:%@",arry[0]);
                NSLog(@"arry[1]:%@",arry[1]);
                contenCell.typeContentLab.text = arry[0];
                contenCell.contentLab.text = [NSString stringWithFormat:@"                %@",arry[1]];
            }else{
                contenCell.typeContentLab.text = @"";
                contenCell.contentLab.text = @"     ";
            }
        }else{
            contenCell.typeContentLab.text = @"";
            contenCell.contentLab.text = @"     ";
        }
        return contenCell;
    }
}

-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
}
- (void)dealloc
{
    [[NSNotificationCenter defaultCenter]removeObserver:self];
}
@end

@interface ScammerSendTitleViewCell()
//@property (strong, nonatomic) CusLabel *titleLab;
@end

@implementation ScammerSendTitleViewCell

- (CusLabel *)titleLab
{
    if (!_titleLab) {
        _titleLab = [[CusLabel alloc]init];
        _titleLab.text = @"Select Case type";
        _titleLab.font = [UIFont boldSystemFontOfSize:16];
        _titleLab.textAlignment = NSTextAlignmentLeft;
    }
    return _titleLab;
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    [self addSubview:self.titleLab];
    [self.titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self);
        make.left.offset(10);
    }];
}
@end

//头部cell
@interface ScammerSendHeaderViewCell()
/*
 @property (strong, nonatomic)  UIButton *firstBtn;
 @property (strong, nonatomic)  UIButton *secondBtn;
 @property (strong, nonatomic)  UIButton *thirdBtn;
 @property (strong, nonatomic)  UIButton *fourBtn;
 */
@end

@implementation ScammerSendHeaderViewCell

- (UIButton *)firstBtn
{
    if(!_firstBtn){
        _firstBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_firstBtn gradientButtonWithSize:CGSizeMake(310, 42) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [_firstBtn setTitle:@"Ask me to give money first to get money" forState:UIControlStateNormal];
        _firstBtn.titleLabel.font = [UIFont systemFontOfSize:15];
        [_firstBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _firstBtn.layer.cornerRadius = 30.0f;
        _firstBtn.layer.masksToBounds = YES;
        _firstBtn.tag = 0;
        [_firstBtn addTarget:self action:@selector(actionChooseTypeBtnClick:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _firstBtn;
}

- (UIButton *)secondBtn
{
    if (!_secondBtn) {
        _secondBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_secondBtn gradientButtonWithSize:CGSizeMake(280, 42) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [_secondBtn setTitle:@"Ask my bank number and password" forState:UIControlStateNormal];
        _secondBtn.titleLabel.font = [UIFont systemFontOfSize:15];
        [_secondBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _secondBtn.layer.cornerRadius = 30.0f;
        _secondBtn.layer.masksToBounds = YES;
        _secondBtn.tag = 1;
        [_secondBtn addTarget:self action:@selector(actionChooseTypeBtnClick:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _secondBtn;
}

- (UIButton *)thirdBtn
{
    if (!_thirdBtn) {
        _thirdBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_thirdBtn gradientButtonWithSize:CGSizeMake(240, 42) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [_thirdBtn setTitle:@"Ask my credit card information" forState:UIControlStateNormal];
        _thirdBtn.titleLabel.font = [UIFont systemFontOfSize:15];
        [_thirdBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _thirdBtn.layer.cornerRadius = 30.0f;
        _thirdBtn.layer.masksToBounds = YES;
        _thirdBtn.tag = 2;
        [_thirdBtn addTarget:self action:@selector(actionChooseTypeBtnClick:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _thirdBtn;
}

- (UIButton *)fourBtn
{
    if (!_fourBtn){
        _fourBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_fourBtn gradientButtonWithSize:CGSizeMake(160, 42) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [_fourBtn setTitle:@"Other scammer type" forState:UIControlStateNormal];
        _fourBtn.titleLabel.font = [UIFont systemFontOfSize:15];
        [_fourBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _fourBtn.layer.cornerRadius = 30.0f;
        _fourBtn.layer.masksToBounds = YES;
        _fourBtn.tag = 3;
        [_fourBtn addTarget:self action:@selector(actionChooseTypeBtnClick:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _fourBtn;
}

-(void)actionChooseTypeBtnClick:(UIButton *)btn
{
    int tag = (int)btn.tag;
    NSString *contentStr = nil;
    if (tag == 0) {
        [self.firstBtn gradientButtonWithSize:CGSizeMake(310, 42) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [self.secondBtn gradientButtonWithSize:CGSizeMake(280, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [self.thirdBtn gradientButtonWithSize:CGSizeMake(240, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [self.fourBtn gradientButtonWithSize:CGSizeMake(160, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        contentStr = self.firstBtn.titleLabel.text;
    }else if(tag == 1){
        [self.firstBtn gradientButtonWithSize:CGSizeMake(310, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [self.secondBtn gradientButtonWithSize:CGSizeMake(280, 42) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [self.thirdBtn gradientButtonWithSize:CGSizeMake(240, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [self.fourBtn gradientButtonWithSize:CGSizeMake(160, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        contentStr = self.secondBtn.titleLabel.text;
    }else if(tag == 2){
        [self.firstBtn gradientButtonWithSize:CGSizeMake(310, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [self.secondBtn gradientButtonWithSize:CGSizeMake(280, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [self.thirdBtn gradientButtonWithSize:CGSizeMake(240, 42) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [self.fourBtn gradientButtonWithSize:CGSizeMake(160, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        contentStr = self.thirdBtn.titleLabel.text;
    }else{
        [self.firstBtn gradientButtonWithSize:CGSizeMake(310, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [self.secondBtn gradientButtonWithSize:CGSizeMake(280, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [self.thirdBtn gradientButtonWithSize:CGSizeMake(240, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [self.fourBtn gradientButtonWithSize:CGSizeMake(160, 42) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        contentStr = self.fourBtn.titleLabel.text;
    }
    NSString *typeStr = [NSString stringWithFormat:@"%d",tag];
    if (self.ScammerSendHeaderViewCellChooseTypeBlock) {
        self.ScammerSendHeaderViewCellChooseTypeBlock(typeStr,contentStr);
    }
    
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.firstBtn.layer.cornerRadius = 5.0f;
        self.firstBtn.layer.masksToBounds = YES;
        
        self.secondBtn.layer.cornerRadius = 5.0f;
        self.secondBtn.layer.masksToBounds = YES;
        
        self.thirdBtn.layer.cornerRadius = 5.0f;
        self.thirdBtn.layer.masksToBounds = YES;
        
        self.fourBtn.layer.cornerRadius = 5.0f;
        self.fourBtn.layer.masksToBounds = YES;
        
        [self.firstBtn gradientButtonWithSize:CGSizeMake(310, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [self.secondBtn gradientButtonWithSize:CGSizeMake(280, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [self.thirdBtn gradientButtonWithSize:CGSizeMake(240, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [self.fourBtn gradientButtonWithSize:CGSizeMake(160, 42) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self addSubview:self.firstBtn];
    [self.firstBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.top.offset(15);
        make.width.offset(310);
        make.height.offset(42);
    }];
    
    [self addSubview:self.secondBtn];
    [self.secondBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.top.mas_equalTo(self.firstBtn.mas_bottom).offset(10);
        make.width.offset(280);
        make.height.offset(42);
    }];
    
    [self addSubview:self.thirdBtn];
    [self.thirdBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.top.mas_equalTo(self.secondBtn.mas_bottom).offset(10);
        make.width.offset(240);
        make.height.offset(42);
    }];
    
    [self addSubview:self.fourBtn];
    [self.fourBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.top.mas_equalTo(self.thirdBtn.mas_bottom).offset(10);
        make.width.offset(160);
        make.height.offset(42);
    }];
}

@end

//中间cell
@interface ScammerSendMiddleViewCell ()
@property (strong, nonatomic) IQTextView *middleDetailInpuView;
@end

@implementation ScammerSendMiddleViewCell

- (IQTextView *)middleDetailInpuView
{
    if (!_middleDetailInpuView){
        _middleDetailInpuView  = [[IQTextView alloc]init];
        _middleDetailInpuView.backgroundColor = RGB(40, 40, 40);
        _middleDetailInpuView.layer.cornerRadius = 5;
        _middleDetailInpuView.layer.masksToBounds = YES;
        _middleDetailInpuView.placeholder = @"Please write scammer case type";
        _middleDetailInpuView.placeholderTextColor = RGB(153, 153, 153);
        _middleDetailInpuView.textColor = [UIColor whiteColor];
        _middleDetailInpuView.font = [UIFont systemFontOfSize:16];
        _middleDetailInpuView.textAlignment = NSTextAlignmentLeft;
    }
    return _middleDetailInpuView;
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    [self addSubview:self.middleDetailInpuView];
    [self.middleDetailInpuView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(10);
        make.top.offset(10);
        make.right.offset(-10);
        make.bottom.offset(-10);
    }];
}
@end
//底部cell
@interface ScammerSendBottomViewCell ()
@property (strong, nonatomic) IQTextView *middleDetailInpuView2;
@end

@implementation ScammerSendBottomViewCell

- (IQTextView *)middleDetailInpuView2
{
    if(!_middleDetailInpuView2){
        _middleDetailInpuView2 = [[IQTextView alloc]init];
        _middleDetailInpuView2.backgroundColor = RGB(40, 40, 40);
        _middleDetailInpuView2.layer.cornerRadius = 5;
        _middleDetailInpuView2.layer.masksToBounds = YES;
        _middleDetailInpuView2.placeholder = @"Describe the details of the scammer's fraud";
        _middleDetailInpuView2.placeholderTextColor = RGB(153, 153, 153);
        _middleDetailInpuView2.textColor = [UIColor whiteColor];
        _middleDetailInpuView2.font = [UIFont systemFontOfSize:16];
        _middleDetailInpuView2.textAlignment = NSTextAlignmentLeft;
    }
    return _middleDetailInpuView2;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    [self addSubview:self.middleDetailInpuView2];
    [self.middleDetailInpuView2 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(10);
        make.top.offset(10);
        make.right.offset(-10);
        make.bottom.offset(-10);
    }];
}
@end
///空cell
@interface ScammerEmptyViewCell ()

@end

@implementation ScammerEmptyViewCell

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        
    }
    return self;
}
@end
@interface NeighborsSimpleCuteScammerSendController()<UICollectionViewDelegate,UICollectionViewDataSource>
@property (nonatomic,strong)UIButton *submitBtn;
@property (nonatomic,strong)UICollectionView *sendSammerCollectionView;
@property (nonatomic,strong)ScammerSendBottomViewCell *bottomCell;
@property (nonatomic,strong)ScammerSendMiddleViewCell *middleCell;
@property (nonatomic,copy)NSString  *typeStr;
@property (nonatomic,copy)NSString  *contentStr;
@end
@implementation NeighborsSimpleCuteScammerSendController

- (UICollectionView *)sendSammerCollectionView
{
    if(!_sendSammerCollectionView){
        UICollectionViewFlowLayout *flowLayout = [[UICollectionViewFlowLayout alloc] init];
        flowLayout.scrollDirection = UICollectionViewScrollDirectionVertical;
        flowLayout.minimumLineSpacing = 0; //纵向间距
        flowLayout.minimumInteritemSpacing = 0; //横向间距
        _sendSammerCollectionView = [[UICollectionView alloc] initWithFrame:CGRectZero collectionViewLayout:flowLayout];
        _sendSammerCollectionView.delegate = self;
        _sendSammerCollectionView.dataSource = self;
        _sendSammerCollectionView.backgroundColor = [UIColor clearColor];
        _sendSammerCollectionView.showsVerticalScrollIndicator = NO;
        [_sendSammerCollectionView registerClass:[ScammerSendTitleViewCell class] forCellWithReuseIdentifier:@"ScammerSendTitleViewCell"];
        [_sendSammerCollectionView registerClass:[ScammerSendHeaderViewCell class] forCellWithReuseIdentifier:@"ScammerSendHeaderViewCell"];
        [_sendSammerCollectionView registerClass:[ScammerSendMiddleViewCell class] forCellWithReuseIdentifier:@"ScammerSendMiddleViewCell"];
        [_sendSammerCollectionView registerClass:[ScammerSendBottomViewCell class] forCellWithReuseIdentifier:@"ScammerSendBottomViewCell"];
        [_sendSammerCollectionView registerClass:[ScammerEmptyViewCell class] forCellWithReuseIdentifier:@"ScammerEmptyViewCell"];
    }
    return _sendSammerCollectionView;
}
- (UIButton *)submitBtn
{
    if(!_submitBtn){
        _submitBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_submitBtn gradientButtonWithSize:CGSizeMake(240, 42) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromTopToBottom];
        [_submitBtn setTitle:@"Submit" forState:UIControlStateNormal];
        _submitBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15];
        [_submitBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _submitBtn.layer.cornerRadius = 30.0f;
        _submitBtn.layer.masksToBounds = YES;
        [_submitBtn addTarget:self action:@selector(actionSubmitClick:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _submitBtn;
}
-(void)actionSubmitClick:(UIButton *)btn
{
    NSLog(@"submit btn");
    [self.view endEditing:YES];
    if (self.typeStr.length == 0) {
        [SVProgressHUD showInfoWithStatus:@"Please select Case type"];
        return;
    }
    if ([self.typeStr isEqualToString:@"3"]) {
        if (self.middleCell.middleDetailInpuView.text.length == 0) {
            [SVProgressHUD showInfoWithStatus:@"Please write scammer case type"];
            return;
        }else{
            self.contentStr = self.middleCell.middleDetailInpuView.text;
        }
    }
    if (self.bottomCell.middleDetailInpuView2.text.length == 0) {
        [SVProgressHUD showInfoWithStatus:@"Describe the details of the scammer's fraud"];
        return;
    }
    [SVProgressHUD show];
    NSMutableDictionary *para = [NSMutableDictionary dictionary];
    [para setObject:@"83" forKey:@"appTypeId"];
    [para setObject:@"" forKey:@"images"];
    [para setObject:@"" forKey:@"labels"];
    [para setObject:@"" forKey:@"lbs"];
    [para setObject:@"" forKey:@"location"];
    NSString *textStr = [NSString stringWithFormat:@"%@s123c1a1m1m1e1r;%@",self.contentStr,self.bottomCell.middleDetailInpuView2.text];
    [para setObject:textStr forKey:@"text"];
    NSString *url = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/dynamic/publishDynamic"];
    NSLog(@"param:%@",para);
    NSLog(@"urlStr:%@",url);
    NSLog(@"Token:%@",[NeighborsSimpleCuteUserModel getUserInfo].tokenDto.token);
    NSLog(@"userID:%ld",(long)[NeighborsSimpleCuteUserModel getUserInfo].userInfo.userId);
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:url parameters:para success:^(NeighborsSimpleCuteResposeModel *response) {
        NSLog(@"responseObject:%@",response);
        [SVProgressHUD dismiss];
        if (response.code ==  0) {
            [self.navigationController popViewControllerAnimated:YES];
            [[NSNotificationCenter defaultCenter]postNotificationName:@"SendDynamicNoti" object:self userInfo:nil];
        }else{
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    } failure:^(NSError *error) {
        
    }];
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"Write Scammer Cases";
    [self.view addSubview:self.submitBtn];
    [self.submitBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.bottom.offset(-10);
        make.width.offset(240);
        make.height.offset(60);
    }];
    [self.view addSubview:self.sendSammerCollectionView];
    [self.sendSammerCollectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.top.right.offset(0);
        make.bottom.offset(-70);
    }];
}

#pragma mark -- NeighborsSimpleCuteScammerSendController -- UICollectionViewDelegate,UICollectionViewDataSource
-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 5;
}

-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return 1;
}
//定义每个Section的四边间距
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    return UIEdgeInsetsZero;
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath{
    if (indexPath.section == 0) {
        return CGSizeMake(IPHONE_WIDTH, 50);
    }else if(indexPath.section == 1){
        return CGSizeMake(IPHONE_WIDTH,230);
    }else if(indexPath.section == 2){
        if ([self.typeStr isEqualToString:@"3"]) {
            return CGSizeMake(IPHONE_WIDTH,100);
        }else{
            return CGSizeMake(IPHONE_WIDTH,0.01);
        }
    }else if(indexPath.section == 3){
        return CGSizeMake(IPHONE_WIDTH,50);
    }else{
        return CGSizeMake(IPHONE_WIDTH,300);
    }
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.section == 0) {
        ScammerSendTitleViewCell *titleCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"ScammerSendTitleViewCell" forIndexPath:indexPath];
        titleCell.titleLab.text = @"Select Case type";
        return titleCell;
    }else if(indexPath.section == 1){
        ScammerSendHeaderViewCell *headerCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"ScammerSendHeaderViewCell" forIndexPath:indexPath];
        [headerCell setScammerSendHeaderViewCellChooseTypeBlock:^(NSString * _Nonnull typeStr, NSString * _Nonnull contentStr) {
            self.typeStr = typeStr;
            self.contentStr = contentStr;
            [self.sendSammerCollectionView reloadData];
        }];
        return headerCell;
    }else if(indexPath.section == 2){
        if ([self.typeStr isEqualToString:@"3"]) {
            self.middleCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"ScammerSendMiddleViewCell" forIndexPath:indexPath];
            return self.middleCell;
        }else{
            ScammerEmptyViewCell *emptyCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"ScammerEmptyViewCell" forIndexPath:indexPath];
            return emptyCell;
        }
    }else if(indexPath.section == 3){
        ScammerSendTitleViewCell *titleCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"ScammerSendTitleViewCell" forIndexPath:indexPath];
        titleCell.titleLab.text = @"Scammer details";
        return titleCell;
    }else{
        self.bottomCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"ScammerSendBottomViewCell" forIndexPath:indexPath];
        return self.bottomCell;
    }
}

-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
}
@end

//@interface MyPickerView()


@interface NeighborsSimpleCuteCountryModel ()

@end

@implementation NeighborsSimpleCuteCountryModel

@end


@interface NeighborsSimpleCuteResetCountryModel ()

@end

@implementation NeighborsSimpleCuteResetCountryModel

-(instancetype)initWithName:(NSString *)name withID:(NSInteger)id withCode:(NSString *)code
{
    self = [super init];
    if(self){
        _name = name;
        _id = id;
        _code = code;
    }
    return self;
}
@end

@interface NeighborsSimpleCuteCountryViewCell()

@end

@implementation NeighborsSimpleCuteCountryViewCell

- (UIButton *)content_btn
{
    if (!_content_btn) {
        _content_btn = [[UIButton alloc]init];
        _content_btn.userInteractionEnabled = NO;
        [_content_btn setTitle:@"test" forState:UIControlStateNormal];
        [_content_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _content_btn.titleLabel.font = [UIFont systemFontOfSize:15];
        _content_btn.backgroundColor =  RGB(27, 27, 27);
    }
    return _content_btn;
}
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.layer.cornerRadius = self.frame.size.height/2;
        self.layer.masksToBounds = YES;
        [self setupUI];
    }
    return self;
}



-(void)setupUI
{
    [self.contentView addSubview:self.content_btn];
    [self.content_btn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(0);
        make.right.offset(0);
        make.top.offset(0);
        make.bottom.offset(0);
    }];
}
- (void)setSelected:(BOOL)selected
{
    NSLog(@"%@",selected?@"YES":@"NO");
    if (selected) {//选中
        [self.content_btn gradientButtonWithSize:CGSizeMake(self.content_btn.frame.size.width, self.content_btn.frame.size.height) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 6)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        [self.content_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        NSLog(@"asasasas-1");
    }else {//未选中
        [self.content_btn gradientButtonWithSize:CGSizeMake(self.content_btn.frame.size.width, self.content_btn.frame.size.height) colorArray:@[(id)RGB(27, 27, 27),(id)RGB(27, 27, 27)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        [self.content_btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    }
    [super setSelected:selected];
}

@end

@interface NeighborsSimpleCuteCountryReusableView ()

@end

@implementation NeighborsSimpleCuteCountryReusableView
- (UILabel *)title_lab
{
    if(!_title_lab){
        _title_lab = [[UILabel alloc]init];
        _title_lab.text = @"1111";
        _title_lab.textColor = [UIColor whiteColor];
        _title_lab.font = [UIFont systemFontOfSize:16];
        _title_lab.textAlignment = NSTextAlignmentLeft;
    }
    return _title_lab;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self addSubview:self.title_lab];
    [self.title_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self);
        make.left.offset(15);
    }];
}
@end

@interface UICollectionViewLayoutAttributes (LeftAligned)

- (void)leftAlignFrameWithSectionInset:(UIEdgeInsets)sectionInset;

@end

@implementation UICollectionViewLayoutAttributes (LeftAligned)

- (void)leftAlignFrameWithSectionInset:(UIEdgeInsets)sectionInset
{
    CGRect frame = self.frame;
    frame.origin.x = sectionInset.left;
    self.frame = frame;
}

@end

#pragma mark -

@implementation UICollectionViewLeftAlignedLayout

#pragma mark - UICollectionViewLayout

- (NSArray *)layoutAttributesForElementsInRect:(CGRect)rect {
    NSArray *originalAttributes = [super layoutAttributesForElementsInRect:rect];
    NSMutableArray *updatedAttributes = [NSMutableArray arrayWithArray:originalAttributes];
    for (UICollectionViewLayoutAttributes *attributes in originalAttributes) {
        if (!attributes.representedElementKind) {
            NSUInteger index = [updatedAttributes indexOfObject:attributes];
            updatedAttributes[index] = [self layoutAttributesForItemAtIndexPath:attributes.indexPath];
        }
    }

    return updatedAttributes;
}

- (UICollectionViewLayoutAttributes *)layoutAttributesForItemAtIndexPath:(NSIndexPath *)indexPath {
    UICollectionViewLayoutAttributes* currentItemAttributes = [[super layoutAttributesForItemAtIndexPath:indexPath] copy];
    UIEdgeInsets sectionInset = [self evaluatedSectionInsetForItemAtIndex:indexPath.section];

    BOOL isFirstItemInSection = indexPath.item == 0;
    CGFloat layoutWidth = CGRectGetWidth(self.collectionView.frame) - sectionInset.left - sectionInset.right;

    if (isFirstItemInSection) {
        [currentItemAttributes leftAlignFrameWithSectionInset:sectionInset];
        return currentItemAttributes;
    }

    NSIndexPath* previousIndexPath = [NSIndexPath indexPathForItem:indexPath.item-1 inSection:indexPath.section];
    CGRect previousFrame = [self layoutAttributesForItemAtIndexPath:previousIndexPath].frame;
    CGFloat previousFrameRightPoint = previousFrame.origin.x + previousFrame.size.width;
    CGRect currentFrame = currentItemAttributes.frame;
    CGRect strecthedCurrentFrame = CGRectMake(sectionInset.left,
                                              currentFrame.origin.y,
                                              layoutWidth,
                                              currentFrame.size.height);
    // if the current frame, once left aligned to the left and stretched to the full collection view
    // widht intersects the previous frame then they are on the same line
    BOOL isFirstItemInRow = !CGRectIntersectsRect(previousFrame, strecthedCurrentFrame);

    if (isFirstItemInRow) {
        // make sure the first item on a line is left aligned
        [currentItemAttributes leftAlignFrameWithSectionInset:sectionInset];
        return currentItemAttributes;
    }

    CGRect frame = currentItemAttributes.frame;
    frame.origin.x = previousFrameRightPoint + [self evaluatedMinimumInteritemSpacingForSectionAtIndex:indexPath.section];
    currentItemAttributes.frame = frame;
    return currentItemAttributes;
}

- (CGFloat)evaluatedMinimumInteritemSpacingForSectionAtIndex:(NSInteger)sectionIndex
{
    if ([self.collectionView.delegate respondsToSelector:@selector(collectionView:layout:minimumInteritemSpacingForSectionAtIndex:)]) {
        id<UICollectionViewDelegateLeftAlignedLayout> delegate = (id<UICollectionViewDelegateLeftAlignedLayout>)self.collectionView.delegate;

        return [delegate collectionView:self.collectionView layout:self minimumInteritemSpacingForSectionAtIndex:sectionIndex];
    } else {
        return self.minimumInteritemSpacing;
    }
}

- (UIEdgeInsets)evaluatedSectionInsetForItemAtIndex:(NSInteger)index
{
    if ([self.collectionView.delegate respondsToSelector:@selector(collectionView:layout:insetForSectionAtIndex:)]) {
        id<UICollectionViewDelegateLeftAlignedLayout> delegate = (id<UICollectionViewDelegateLeftAlignedLayout>)self.collectionView.delegate;

        return [delegate collectionView:self.collectionView layout:self insetForSectionAtIndex:index];
    } else {
        return self.sectionInset;
    }
}

@end

@interface NeighborsSimpleCuteLocationShowView ()<UICollectionViewDelegate ,UICollectionViewDataSource>
@property (nonatomic,strong)NSMutableArray   *locationAllListArr;
@property (nonatomic,strong)UICollectionView *locationCollectionView;
@property (nonatomic,strong)NSMutableArray   *dataSource;
@property (nonatomic,strong)NeighborsSimpleCuteResetCountryModel *countryModel;
@property (nonatomic,strong)NeighborsSimpleCuteResetCountryModel *stateModel;
@property (nonatomic,strong)NeighborsSimpleCuteResetCountryModel *cityModel;
@property (nonatomic,strong)NSMutableArray *hotCountryListArr;
@property (nonatomic,assign)BOOL isCountry;
@property (nonatomic,assign)BOOL isState;
@property (nonatomic,assign)BOOL isCity;
@end

@implementation NeighborsSimpleCuteLocationShowView

- (UILabel *)title_lab
{
    if(!_title_lab){
        _title_lab = [[CusLabel alloc]init];
        _title_lab.text = @"Country";
        _title_lab.font = [UIFont systemFontOfSize:16];
        _title_lab.textColor = RGB(235, 142, 63);
        _title_lab.textAlignment = NSTextAlignmentCenter;
    }
    return _title_lab;
}

- (UIView *)bg_view
{
    if(!_bg_view){
        _bg_view = [[UIView alloc]init];
        _bg_view.backgroundColor = RGB(50, 50, 50);
        _bg_view.layer.cornerRadius = 8.0f;
        _bg_view.layer.masksToBounds = YES;
    }
    return _bg_view;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    self.backgroundColor =  [[UIColor blackColor] colorWithAlphaComponent:0.5];
    [self addSubview:self.bg_view];
    [self.bg_view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self);
        make.left.offset(20);
        make.right.offset(-20);
        make.height.offset(480);
    }];
    [self.bg_view addSubview:self.title_lab];
    [self.title_lab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.bg_view);
        make.top.offset(20);
    }];
    [self.bg_view addSubview:self.locationCollectionView];
    [self.locationCollectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.offset(40);
        make.left.right.bottom.offset(0);
    }];
    [self setupHotCoutryData];
    [self actionGetCountryListWithCode:@"1" withType:@"1"];
}

-(void)setupHotCoutryData
{
    [self.hotCountryListArr removeAllObjects];
    NeighborsSimpleCuteResetCountryModel *model = [[NeighborsSimpleCuteResetCountryModel alloc]initWithName:@"Canada" withID:31 withCode:@"CA"];
    NeighborsSimpleCuteResetCountryModel *model2 = [[NeighborsSimpleCuteResetCountryModel alloc]initWithName:@"United States" withID:259 withCode:@"US"];
    NeighborsSimpleCuteResetCountryModel *model3 = [[NeighborsSimpleCuteResetCountryModel alloc]initWithName:@"United Kingdom" withID:180 withCode:@"GB"];
    [self.hotCountryListArr addObject:model];
    [self.hotCountryListArr addObject:model2];
    [self.hotCountryListArr addObject:model3];
}
- (void)dismiss
{
    [UIView animateWithDuration:0.3 animations:^{
        self.alpha = 0;
    } completion:^(BOOL finished) {
        [self removeFromSuperview];
    }];
}
- (UICollectionView *)locationCollectionView
{
    if (!_locationCollectionView) {
        UICollectionViewLeftAlignedLayout * flowLayout = [[UICollectionViewLeftAlignedLayout alloc]init];
        flowLayout.minimumInteritemSpacing = 15;
        flowLayout.sectionInset = UIEdgeInsetsMake(10, 10, 10, 10);
        _locationCollectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flowLayout];
        _locationCollectionView.dataSource = self;
        _locationCollectionView.delegate = self;
        _locationCollectionView.backgroundColor = [UIColor clearColor];
        [_locationCollectionView registerClass:[NeighborsSimpleCuteCountryViewCell class] forCellWithReuseIdentifier:@"NeighborsSimpleCuteCountryViewCell"];
        [_locationCollectionView registerClass:[NeighborsSimpleCuteCountryReusableView class] forSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:@"NeighborsSimpleCuteCountryReusableView"];
    }
    return _locationCollectionView;
}
- (NSMutableArray *)hotCountryListArr
{
    if (!_hotCountryListArr) {
        _hotCountryListArr = [NSMutableArray array];
    }
    return _hotCountryListArr;
}
- (NSMutableArray *)dataSource
{
    if (!_dataSource) {
        _dataSource = [NSMutableArray array];
    }
    return _dataSource;
}
- (NSMutableArray *)locationAllListArr
{
    if (!_locationAllListArr) {
        _locationAllListArr = [NSMutableArray array];
    }
    return _locationAllListArr;
}
#pragma mark -- NeighborsSimpleCuteLocationShowView | UICollectionViewDelegate | UICollectionViewDataSource
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    if (self.isCountry == YES) {
        return self.dataSource.count+1;
    }else{
        return self.dataSource.count;
    }
}
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    if (self.isCountry == YES) {
        if (section == 0) {
            return self.hotCountryListArr.count;
        }else{
            return [self.dataSource[section-1] count];
        }
    }else{
        return [self.dataSource[section] count];
    }
}
- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (self.isCountry == YES) {
        if (indexPath.section == 0) {
            NeighborsSimpleCuteCountryViewCell *countryCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteCountryViewCell" forIndexPath:indexPath];
            NeighborsSimpleCuteResetCountryModel *model = self.hotCountryListArr[indexPath.row];
            [countryCell.content_btn setTitle:model.name forState:UIControlStateNormal];
            return countryCell;
        }else{
            NeighborsSimpleCuteCountryViewCell *countryCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteCountryViewCell" forIndexPath:indexPath];
            NeighborsSimpleCuteResetCountryModel *model = self.dataSource[indexPath.section-1][indexPath.row];
            [countryCell.content_btn setTitle:model.name forState:UIControlStateNormal];
            return countryCell;
        }
    }else{
        NeighborsSimpleCuteCountryViewCell *countryCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NeighborsSimpleCuteCountryViewCell" forIndexPath:indexPath];
        NeighborsSimpleCuteResetCountryModel *model = self.dataSource[indexPath.section][indexPath.row];
        [countryCell.content_btn setTitle:model.name forState:UIControlStateNormal];
        return countryCell;
    }
  
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (self.isCountry == YES) {
        if (indexPath.section == 0) {
            NeighborsSimpleCuteResetCountryModel *model = self.hotCountryListArr[indexPath.row];
            return [self getSizeWithText:model.name];
        }else{
            NeighborsSimpleCuteResetCountryModel *model = self.dataSource[indexPath.section-1][indexPath.row];
            return [self getSizeWithText:model.name];
        }
    }else{
        NeighborsSimpleCuteResetCountryModel *model = self.dataSource[indexPath.section][indexPath.row];
        return [self getSizeWithText:model.name];
    }
}
/**
 根据文本长度计算文本的大小
 */
-(CGSize)getSizeWithText:(NSString *)text {
    NSMutableParagraphStyle *style = [[NSMutableParagraphStyle alloc] init];
    //以字符为单位换行，以字符为单位截断
    style.lineBreakMode = NSLineBreakByCharWrapping;
    CGSize size = [text boundingRectWithSize:CGSizeMake(CGFLOAT_MAX, 24) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:12.0f],NSParagraphStyleAttributeName:style} context:nil].size;
    if (size.width + 2 * 8 >= [UIScreen mainScreen].bounds.size.width - 2 * 20 ) {
        
        size.width = [UIScreen mainScreen].bounds.size.width - 2 * 20 - 2 * 15.f;
    }
    return CGSizeMake(ceilf(size.width + 2*8)+30, 30);
}
- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    NeighborsSimpleCuteResetCountryModel *model = nil;
    if (self.isCountry == YES) {
        if (indexPath.section == 0) {
            model = self.hotCountryListArr[indexPath.row];
        }else{
            model = self.dataSource[indexPath.section-1][indexPath.row];
            self.countryModel = model;
        }
        self.countryModel = model;
        [self actionGetCountryStateListWithCode:@(model.id) withType:@"2"];
    }else if(self.isState == YES){
        model = self.dataSource[indexPath.section][indexPath.row];
        self.stateModel = model;
        [self actionGetCountryCityListWithCode:@(model.id) withType:@"3"];
    }else if(self.isCity == YES){
        model = self.dataSource[indexPath.section][indexPath.row];
        self.cityModel  = model;
        if (self.NeighborsSimpleCuteLocationShowViewSelectBlock) {
            self.NeighborsSimpleCuteLocationShowViewSelectBlock(self.countryModel, self.stateModel, self.cityModel);
        }
        [self dismiss];
    }
}
- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath
{
    if (self.isCountry == YES) {
        if (indexPath.section == 0) {
            NeighborsSimpleCuteCountryReusableView * headView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:@"NeighborsSimpleCuteCountryReusableView" forIndexPath:indexPath];
            headView.title_lab.text = @"Hot country";
            headView.title_lab.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
            return headView;
        }else{
            NeighborsSimpleCuteCountryReusableView * headView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:@"NeighborsSimpleCuteCountryReusableView" forIndexPath:indexPath];
            NeighborsSimpleCuteResetCountryModel *model = [self.dataSource[indexPath.section-1] firstObject];
            headView.title_lab.text = model.sectionTitle;
            headView.title_lab.textColor = [UIColor whiteColor];
            return headView;
        }
    }else{
        NeighborsSimpleCuteCountryReusableView * headView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:@"NeighborsSimpleCuteCountryReusableView" forIndexPath:indexPath];
        NeighborsSimpleCuteResetCountryModel *model = [self.dataSource[indexPath.section] firstObject];
        headView.title_lab.text = model.sectionTitle;
        headView.title_lab.textColor = [UIColor whiteColor];
        return headView;
    }
   
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout referenceSizeForHeaderInSection:(NSInteger)section
{
    return CGSizeMake(IPHONE_WIDTH, 30);
}
/// country
/// @param code code
/// @param type type
-(void)actionGetCountryListWithCode:(NSString *)code withType:(NSString *)type
{
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"code"] = code;
    param[@"type"] = type;
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/base/list"];
    NSLog(@"param:%@",param);
    NSLog(@"baseUrl:%@",baseUrl);
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"response.data:%@",response.data);
        if (response.code == 0) {
            [self.locationAllListArr removeAllObjects];
            self.locationAllListArr = [NeighborsSimpleCuteCountryModel mj_objectArrayWithKeyValuesArray:response.data];
            [self setupDataWithData:self.locationAllListArr];
            self.isCountry = YES;
            self.isCity    = NO;
            self.isState   = NO;
        }else{
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}
/// state
/// @param code code
/// @param type type
-(void)actionGetCountryStateListWithCode:(NSString *)code withType:(NSString *)type
{
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"code"] = code;
    param[@"type"] = type;
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/base/list"];
    NSLog(@"param:%@",param);
    NSLog(@"baseUrl:%@",baseUrl);
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"response.data:%@",response.data);
        if (response.code == 0) {
            [self.locationAllListArr removeAllObjects];
            self.locationAllListArr = [NeighborsSimpleCuteCountryModel mj_objectArrayWithKeyValuesArray:response.data];
            [self setupDataWithData:self.locationAllListArr];
            self.isState   = YES;
            self.isCountry = NO;
            self.isCity   = NO;
            if (self.locationAllListArr.count == 0) {
                if (self.NeighborsSimpleCuteLocationShowViewSelectBlock) {
                    self.NeighborsSimpleCuteLocationShowViewSelectBlock(self.countryModel, self.stateModel, self.cityModel);
                }
                [self dismiss];
            }else{
                self.title_lab.text = @"State";
            }
        }else{
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}
/// city
/// @param code code
/// @param type type
-(void)actionGetCountryCityListWithCode:(NSString *)code withType:(NSString *)type
{
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"code"] = code;
    param[@"type"] = type;
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/base/list"];
    NSLog(@"param:%@",param);
    NSLog(@"baseUrl:%@",baseUrl);
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"response.data:%@",response.data);
        if (response.code == 0) {
            [self.locationAllListArr removeAllObjects];
            self.locationAllListArr = [NeighborsSimpleCuteCountryModel mj_objectArrayWithKeyValuesArray:response.data];
            [self setupDataWithData:self.locationAllListArr];
            self.isCity   = YES;
            self.isCountry = NO;
            self.isState   = NO;
            if (self.locationAllListArr.count == 0) {
                if (self.NeighborsSimpleCuteLocationShowViewSelectBlock) {
                    self.NeighborsSimpleCuteLocationShowViewSelectBlock(self.countryModel, self.stateModel, self.cityModel);
                }
                [self dismiss];
            }else{
                self.title_lab.text = @"City";
            }
        }else{
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}
/// 重新组装数据
/// @param dataArray 重新组装数据
-(void)setupDataWithData:(NSMutableArray *)dataArray{
    NSMutableArray *personArr = [NSMutableArray arrayWithCapacity:dataArray.count];
    for (NeighborsSimpleCuteCountryModel *model in dataArray) {
        NSString *name = model.name;
        NSInteger id   = model.id;
        NeighborsSimpleCuteResetCountryModel *person = [[NeighborsSimpleCuteResetCountryModel alloc]initWithName:name withID:id withCode:model.code];
        [personArr addObject:person];
    }
    UILocalizedIndexedCollation *collation = [UILocalizedIndexedCollation currentCollation];
    NSLog(@"%@", collation.sectionTitles);
    //1.获取获取section标题
    NSArray *titles = collation.sectionTitles;
    //2.构建每个section数组
    NSMutableArray *secionArray = [NSMutableArray arrayWithCapacity:titles.count];
    for (int i = 0; i < titles.count; i++) {
        NSMutableArray *subArr = [NSMutableArray array];
        [secionArray addObject:subArr];
    }
    //3.排序
    //3.1 按照将需要排序的对象放入到对应分区数组
//    for (FriendMdoel *person in personArr) {
//        NSInteger section = [collation sectionForObject:person collationStringSelector:@selector(name)];
//        NSMutableArray *subArr = secionArray[section];
//
//        [subArr addObject:person];
//    }
    for (NSInteger i = 0; i <personArr.count; i++) {
        NeighborsSimpleCuteResetCountryModel *person = personArr[i];
        NSInteger section = [collation sectionForObject:person collationStringSelector:@selector(name)];
        NSMutableArray *subArr = secionArray[section];
        NSString *sectionTitle = @"";
        if (titles.count > section) {
            sectionTitle = titles[section];
        }
        person.sectionTitle = sectionTitle;

        [subArr addObject:person];
    }
    //3.2 分别对分区进行排序
    for (NSMutableArray *subArr in secionArray) {
        NSArray *sortArr = [collation sortedArrayFromArray:subArr collationStringSelector:@selector(name)];
        [subArr removeAllObjects];
        [subArr addObjectsFromArray:sortArr];
    }
    //修改数据源
    NSMutableArray *tempArray = [NSMutableArray new];
    for (NSArray *array in secionArray) {
        if (array.count) {
            [tempArray addObject:array];
        }
    }
    self.dataSource = [NSMutableArray arrayWithArray:tempArray];
    NSLog(@"self.dataSource.count:%lu",(unsigned long)self.dataSource.count);
    [self.locationCollectionView reloadData];
}
@end





@interface NeighborsSimpleCuteFiterController()

@property (nonatomic,strong)UILabel *angeLab;
@property (nonatomic,strong)CusLabel *minTitleLab;
@property (nonatomic,strong)CusLabel *maxTitleLab;
@property (nonatomic,strong)CusLabel *minContentLab;
@property (nonatomic,strong)CusLabel *maxContentLab;
@property (nonatomic,strong)UIView *minView;
@property (nonatomic,strong)UIView *maxView;
@property (nonatomic,strong)UIView *lineView;

@property (nonatomic,strong)UILabel *showMeLab;
@property (nonatomic,strong)UIView *leftView;
@property (nonatomic,strong)UIImageView *leftImageView;
@property (nonatomic,strong)UIImageView *rightImageView;
@property (nonatomic,strong)UIButton *leftBtn;
@property (nonatomic,strong)UIView *centerView;
@property (nonatomic,strong)UIImageView *centerImageView;
@property (nonatomic,strong)UIButton *centerBtn;
@property (nonatomic,strong)UIView *rightView;
@property (nonatomic,strong)UIImageView *rightImageView2;
@property (nonatomic,strong)UIButton *rightBtn;

@property (nonatomic,strong)UILabel *locationLab;
@property (nonatomic,strong)UIView *locationView;
@property (nonatomic,strong)CusLabel *anywhereLab;
@property (nonatomic,strong)UILabel *anywhereSubLab;
@property (nonatomic,strong)UIButton *anywhereBtn;
@property (nonatomic,strong)UIImageView *locationImage;
@property (nonatomic,strong)UILabel *locationSubLab;
@property (nonatomic,strong)UIButton *anywhereBtn2;
@property (nonatomic,strong)UIButton *changeBtn2;

@property (nonatomic,strong)UIButton *saveBtn;


@property (nonatomic,copy) NSString *genderStr;
@property (nonatomic,copy) NSString *minStr;
@property (nonatomic,copy) NSString *maxStr;
@property (nonatomic,copy) NSString *countryStr;
@property (nonatomic,copy) NSString *countryId;
@property (nonatomic,copy) NSString *stateStr;
@property (nonatomic,copy) NSString *stateId;
@property (nonatomic,copy) NSString *cityStr;
@property (nonatomic,copy) NSString *cityId;
@property (nonatomic,assign)BOOL isAnyWhere; //是否是任何地方
@property (nonatomic,strong)NeighborsSimpleCuteResetCountryModel *countryModel;
@property (nonatomic,strong)NeighborsSimpleCuteResetCountryModel *stateModel;
@property (nonatomic,strong)NeighborsSimpleCuteResetCountryModel *cityModel;

@end
@implementation NeighborsSimpleCuteFiterController

- (UIImageView *)locationImage
{
    if (!_locationImage) {
        _locationImage = [[UIImageView alloc]init];
        _locationImage.contentMode = UIViewContentModeScaleAspectFit;
        _locationImage.image = [UIImage imageNamed:TUIKitResource(@"zf_fiter_location")];
    }
    return _locationImage;
}

- (UILabel *)locationSubLab
{
    if(!_locationSubLab){
        _locationSubLab = [[UILabel alloc]init];
        _locationSubLab.text = @"New York | New York | United States";
        _locationSubLab.textColor = RGB(206,206,206);
        _locationSubLab.font = [UIFont systemFontOfSize:16];
        _locationSubLab.numberOfLines = 0;
        _locationSubLab.textAlignment = NSTextAlignmentLeft;
    }
    return _locationSubLab;
}

- (UIButton *)changeBtn2
{
    if(!_changeBtn2){
        _changeBtn2 = [UIButton buttonWithType:UIButtonTypeCustom];
        [_changeBtn2 gradientButtonWithSize:CGSizeMake(65, 35) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        _changeBtn2.layer.cornerRadius = 15;
        _changeBtn2.layer.masksToBounds = YES;
        [_changeBtn2 setTitle:@"Change" forState:UIControlStateNormal];
        [_changeBtn2 setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _changeBtn2.titleLabel.font = [UIFont systemFontOfSize:12];
        [_changeBtn2 addTarget:self action:@selector(actionSaveChangeClick2:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _changeBtn2;
}

-(void)actionSaveChangeClick2:(UIButton *)btn
{
    NSLog(@"actionSaveChangeClick2 btn");
    self.isAnyWhere = NO;
    NeighborsSimpleCuteLocationShowView *locationShowView = [[NeighborsSimpleCuteLocationShowView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
    [locationShowView setNeighborsSimpleCuteLocationShowViewSelectBlock:^(NeighborsSimpleCuteResetCountryModel * _Nonnull countryModel, NeighborsSimpleCuteResetCountryModel * _Nonnull statemodel, NeighborsSimpleCuteResetCountryModel * _Nonnull cityModel) {
        self.locationImage.hidden = NO;
        self.locationSubLab.hidden = NO;
        self.anywhereSubLab.hidden = YES;
        self.changeBtn2.hidden = NO;
        self.anywhereBtn2.hidden = NO;
        self.anywhereBtn.hidden = YES;
        self.countryModel = countryModel;
        self.stateModel = statemodel;
        self.cityModel  = cityModel;
        if (IS_EMPTY(self.stateModel.name)) {
            //只有国家
            self.anywhereLab.text = @"Country";
            self.locationSubLab.text = [NSString stringWithFormat:@"%@",countryModel.name];
            self.countryStr = self.countryModel.name;
            self.countryId  = [NSString stringWithFormat:@"%ld",(long)self.countryModel.id];
        }else{
            if (IS_EMPTY(self.cityModel.name)) {
                //省份
                self.anywhereLab.text = @"State";
                self.locationSubLab.text = [NSString stringWithFormat:@"%@ |  %@",statemodel.name,countryModel.name];
                self.countryStr = self.countryModel.name;
                self.countryId  = [NSString stringWithFormat:@"%ld",(long)self.countryModel.id];
                self.stateStr   = self.stateModel.name;
                self.stateId    =  [NSString stringWithFormat:@"%ld",(long)self.stateModel.id];
            }else{
                //城市
                self.anywhereLab.text = @"City";
                self.locationSubLab.text = [NSString stringWithFormat:@"%@ | %@ |\n%@",cityModel.name,statemodel.name,countryModel.name];
                self.countryStr = self.countryModel.name;
                self.countryId  = [NSString stringWithFormat:@"%ld",(long)self.countryModel.id];
                self.stateStr   = self.stateModel.name;
                self.stateId    =  [NSString stringWithFormat:@"%ld",(long)self.stateModel.id];
                self.cityStr    =  self.cityModel.name;
                self.cityId     =  [NSString stringWithFormat:@"%ld",(long)self.cityModel.id];
            }
        }
    }];
    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    NSCParameterAssert(window);
    [window addSubview:locationShowView];
}

- (UIButton *)anywhereBtn2
{
    if(!_anywhereBtn2){
        _anywhereBtn2 = [UIButton buttonWithType:UIButtonTypeCustom];
        [_anywhereBtn2 gradientButtonWithSize:CGSizeMake(270, 56) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        _anywhereBtn2.layer.cornerRadius = 15;
        _anywhereBtn2.layer.masksToBounds = YES;
        [_anywhereBtn2 setTitle:@"Anywhere" forState:UIControlStateNormal];
        [_anywhereBtn2 setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _anywhereBtn2.titleLabel.font = [UIFont systemFontOfSize:12];
        [_anywhereBtn2 addTarget:self action:@selector(actionSaveAnyWhereClick2:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _anywhereBtn2;
}

-(void)actionSaveAnyWhereClick2:(UIButton *)btn
{
    NSLog(@"anywhere btn");
    self.isAnyWhere = YES;
    self.anywhereBtn2.hidden = YES;
    self.changeBtn2.hidden = YES;
    self.locationImage.hidden = YES;
    self.locationSubLab.hidden = YES;
    self.anywhereBtn.hidden = NO;
    self.anywhereSubLab.hidden = NO;
    self.anywhereLab.text = @"AnyWhere";
    self.anywhereSubLab.text = @"Show all users in your country";
    self.countryStr = @"";
    self.countryId  = @"";
    self.stateStr   = @"";
    self.stateId    = @"";
    self.cityStr    = @"";
    self.cityId     = @"";
}

- (CusLabel *)anywhereLab
{
    if(!_anywhereLab){
        _anywhereLab = [[CusLabel alloc]init];
        _anywhereLab.text = @"AnyWhere";
        _anywhereLab.font = [UIFont systemFontOfSize:16];
        _anywhereLab.textAlignment = NSTextAlignmentCenter;
    }
    return _anywhereLab;
}

- (UILabel *)anywhereSubLab
{
    if(!_anywhereSubLab){
        _anywhereSubLab = [[UILabel alloc]init];
        _anywhereSubLab.text = @"Show all users in your country";
        _anywhereSubLab.textColor = RGB(206,206,206);
        _anywhereSubLab.font = [UIFont systemFontOfSize:16];
        _anywhereSubLab.textAlignment = NSTextAlignmentCenter;
    }
    return _anywhereSubLab;
}

- (UIButton *)anywhereBtn
{
    if(!_anywhereBtn){
        _anywhereBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_anywhereBtn gradientButtonWithSize:CGSizeMake(270, 56) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        _anywhereBtn.layer.cornerRadius = 15;
        _anywhereBtn.layer.masksToBounds = YES;
        [_anywhereBtn setTitle:@"Change" forState:UIControlStateNormal];
        [_anywhereBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _anywhereBtn.titleLabel.font = [UIFont systemFontOfSize:15];
        [_anywhereBtn addTarget:self action:@selector(actionSaveAnyWhereClick:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _anywhereBtn;
}

-(void)actionSaveAnyWhereClick:(UIButton *)btn
{
    NSLog(@"actionSaveAnyWhereClick btn change");
    self.isAnyWhere = NO;
    NeighborsSimpleCuteLocationShowView *locationShowView = [[NeighborsSimpleCuteLocationShowView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
    [locationShowView setNeighborsSimpleCuteLocationShowViewSelectBlock:^(NeighborsSimpleCuteResetCountryModel * _Nonnull countryModel, NeighborsSimpleCuteResetCountryModel * _Nonnull statemodel, NeighborsSimpleCuteResetCountryModel * _Nonnull cityModel) {
        self.locationImage.hidden = NO;
        self.locationSubLab.hidden = NO;
        self.anywhereSubLab.hidden = YES;
        self.changeBtn2.hidden = NO;
        self.anywhereBtn2.hidden = NO;
        self.anywhereBtn.hidden = YES;
        self.countryModel = countryModel;
        self.stateModel = statemodel;
        self.cityModel  = cityModel;
        if (IS_EMPTY(self.stateModel.name)) {
            //只有国家
            self.anywhereLab.text = @"Country";
            self.locationSubLab.text = [NSString stringWithFormat:@"%@",countryModel.name];
            self.countryStr = self.countryModel.name;
            self.countryId  = [NSString stringWithFormat:@"%ld",(long)self.countryModel.id];
        }else{
            if (IS_EMPTY(self.cityModel.name)) {
                //省份
                self.anywhereLab.text = @"State";
                self.locationSubLab.text = [NSString stringWithFormat:@"%@ |  %@",statemodel.name,countryModel.name];
                self.countryStr = self.countryModel.name;
                self.countryId  = [NSString stringWithFormat:@"%ld",(long)self.countryModel.id];
                self.stateStr   = self.stateModel.name;
                self.stateId    =  [NSString stringWithFormat:@"%ld",(long)self.stateModel.id];
            }else{
                //城市
                self.anywhereLab.text = @"City";
                self.locationSubLab.text = [NSString stringWithFormat:@"%@ | %@ |\n%@",cityModel.name,statemodel.name,countryModel.name];
                self.countryStr = self.countryModel.name;
                self.countryId  = [NSString stringWithFormat:@"%ld",(long)self.countryModel.id];
                self.stateStr   = self.stateModel.name;
                self.stateId    =  [NSString stringWithFormat:@"%ld",(long)self.stateModel.id];
                self.cityStr    =  self.cityModel.name;
                self.cityId     =  [NSString stringWithFormat:@"%ld",(long)self.cityModel.id];
            }
        }
    }];
    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    NSCParameterAssert(window);
    [window addSubview:locationShowView];
}

- (UILabel *)locationLab
{
    if (!_locationLab) {
        _locationLab = [[UILabel alloc]init];
        _locationLab.text = @"Location";
        _locationLab.font = [UIFont boldSystemFontOfSize:17];
        _locationLab.textColor = [UIColor whiteColor];
        _locationLab.textAlignment = NSTextAlignmentLeft;
    }
    return _locationLab;
}

- (UIView *)locationView
{
    if (!_locationView) {
        _locationView = [[UIView alloc]init];
        _locationView.layer.cornerRadius = 8.0f;
        _locationView.layer.masksToBounds = YES;
        _locationView.backgroundColor = NSC_BGThemColor2;
    }
    return _locationView;
}

- (UIButton *)saveBtn
{
    if (!_saveBtn) {
        _saveBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_saveBtn gradientButtonWithSize:CGSizeMake(270, 56) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        _saveBtn.layer.cornerRadius = 56/2;
        _saveBtn.layer.masksToBounds = YES;
        [_saveBtn setTitle:@"Save" forState:UIControlStateNormal];
        [_saveBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _saveBtn.titleLabel.font = [UIFont systemFontOfSize:15];
        [_saveBtn addTarget:self action:@selector(actionSaveBtnClick:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _saveBtn;
}
-(void)actionSaveBtnClick:(UIButton *)btn
{
    NSLog(@"Save btn");
    NeighborsSimpleCuteFiterModel *model = [NeighborsSimpleCuteFiterModel getUserInfo];
    model.genderStr = self.genderStr;
    model.maxStr    = self.maxContentLab.text;
    model.minStr    = self.minContentLab.text;
    model.countryStr    = self.countryStr;
    model.countryId     = self.countryId;
    model.stateStr      = self.stateStr;
    model.stateId       = self.stateId;
    model.cityStr       = self.cityStr;
    model.cityId        = self.cityId;
    model.isanyWhere    = self.isAnyWhere;
    [NeighborsSimpleCuteFiterModel save:model];
    
    if (self.NeighborsSimpleCuteHomeFiterControllerBlock) {
        self.NeighborsSimpleCuteHomeFiterControllerBlock(self.minContentLab.text,self.maxContentLab.text,self.genderStr,self.countryModel,self.stateModel,self.cityModel,self.isAnyWhere);
    }
    [self.navigationController popViewControllerAnimated:YES];
}
- (UILabel *)showMeLab
{
    if(!_showMeLab){
        _showMeLab = [[UILabel alloc]init];
        _showMeLab.text = @"Show Me";
        _showMeLab.font = [UIFont boldSystemFontOfSize:17];
        _showMeLab.textColor = [UIColor whiteColor];
        _showMeLab.textAlignment = NSTextAlignmentLeft;
    }
    return _showMeLab;
}

- (UIImageView *)leftImageView
{
    if(!_leftImageView){
        _leftImageView = [[UIImageView alloc]init];
        _leftImageView.contentMode = UIViewContentModeScaleAspectFit;
        _leftImageView.image = [UIImage imageNamed:TUIKitResource(@"zf_filter_femalel")];
    }
    return _leftImageView;
}

- (UIImageView *)rightImageView
{
    if(!_rightImageView){
        _rightImageView = [[UIImageView alloc]init];
        _rightImageView.contentMode = UIViewContentModeScaleAspectFit;
        _rightImageView.image = [UIImage imageNamed:TUIKitResource(@"zf_filter_malel")];
    }
    return _rightImageView;
}

- (UIButton *)leftBtn
{
    if(!_leftBtn){
        _leftBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_leftBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH-60), 50) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        [_leftBtn addTarget:self action:@selector(actionLeftBottomBtnClick:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _leftBtn;
}

-(void)actionLeftBottomBtnClick:(UIButton *)btn
{
    NSLog(@"actionLeftBottomBtnClick btn");
    [self.leftBtn gradientButtonWithSize:CGSizeMake(90, 95) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    [self.centerBtn gradientButtonWithSize:CGSizeMake(90, 50) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    [self.rightBtn gradientButtonWithSize:CGSizeMake(90, 50) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    self.genderStr = @"0";
}
- (UIView *)leftView
{
    if (!_leftView) {
        _leftView = [[UIView alloc]init];
        _leftView.layer.cornerRadius = 8.0f;
        _leftView.layer.masksToBounds = YES;
        _leftView.backgroundColor = NSC_BGThemColor2;
    }
    return _leftView;
}

- (UIView *)centerView
{
    if (!_centerView) {
        _centerView = [[UIView alloc]init];
        _centerView.layer.cornerRadius = 8.0f;
        _centerView.layer.masksToBounds = YES;
        _centerView.backgroundColor = NSC_BGThemColor2;
    }
    return _centerView;
}

- (UIImageView *)centerImageView
{
    if(!_centerImageView){
        _centerImageView = [[UIImageView alloc]init];
        _centerImageView.contentMode = UIViewContentModeScaleAspectFit;
        _centerImageView.image = [UIImage imageNamed:TUIKitResource(@"zf_filter_malel")];
    }
    return _centerImageView;
}

- (UIButton *)centerBtn
{
    if (!_centerBtn) {
        _centerBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_centerBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH-60), 50) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        [_centerBtn addTarget:self action:@selector(actionCenterBottomBtnClick:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _centerBtn;
}

-(void)actionCenterBottomBtnClick:(UIButton *)btn
{
    NSLog(@"actionCenterBottomBtnClick btn");
    [self.centerBtn gradientButtonWithSize:CGSizeMake(90, 95) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    [self.leftBtn gradientButtonWithSize:CGSizeMake(90, 95) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    [self.rightBtn gradientButtonWithSize:CGSizeMake(90, 95) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    self.genderStr = @"1";
}

- (UIView *)rightView
{
    if (!_rightView) {
        _rightView = [[UIView alloc]init];
        _rightView.layer.cornerRadius = 8.0f;
        _rightView.layer.masksToBounds = YES;
        _rightView.backgroundColor = NSC_BGThemColor2;
    }
    return _rightView;
}

- (UIImageView *)rightImageView2
{
    if (!_rightImageView2) {
        _rightImageView2 = [[UIImageView alloc]init];
        _rightImageView2.contentMode = UIViewContentModeScaleAspectFit;
        _rightImageView2.image = [UIImage imageNamed:TUIKitResource(@"zf_filter_femalel")];
    }
    return _rightImageView2;
}

- (UIButton *)rightBtn
{
    if (!_rightBtn) {
        _rightBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [_rightBtn gradientButtonWithSize:CGSizeMake((IPHONE_WIDTH-60), 50) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        [_rightBtn addTarget:self action:@selector(actionRightBottomBtnClick:) forControlEvents:UIControlEventTouchUpInside];
    }
    return  _rightBtn;
}

-(void)actionRightBottomBtnClick:(UIButton *)btn
{
    NSLog(@"actionRightBottomBtnClick btn");
    [self.rightBtn gradientButtonWithSize:CGSizeMake(90, 95) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    [self.leftBtn gradientButtonWithSize:CGSizeMake(90, 95) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    [self.centerBtn gradientButtonWithSize:CGSizeMake(90, 95) colorArray:@[(id)RGB(50, 50, 50),(id)RGB(50, 50, 50)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    self.genderStr = @"2";
}

- (UILabel *)angeLab
{
    if (!_angeLab) {
        _angeLab = [[UILabel alloc]init];
        _angeLab.text = @"Age Range";
        _angeLab.font = [UIFont boldSystemFontOfSize:17];
        _angeLab.textColor = [UIColor whiteColor];
        _angeLab.textAlignment = NSTextAlignmentLeft;
    }
    return _angeLab;
}
- (CusLabel *)minContentLab
{
    if (!_minContentLab) {
        _minContentLab = [[CusLabel alloc]init];
        _minContentLab.text = @"18";
        _minContentLab.font = [UIFont systemFontOfSize:16];
        _minContentLab.textAlignment = NSTextAlignmentCenter;
    }
    return _minContentLab;
}
- (CusLabel *)maxContentLab
{
    if (!_maxContentLab) {
        _maxContentLab = [[CusLabel alloc]init];
        _maxContentLab.text = @"99";
        _maxContentLab.font = [UIFont systemFontOfSize:16];
        _maxContentLab.textAlignment = NSTextAlignmentCenter;
    }
    return _maxContentLab;
}
- (CusLabel *)minTitleLab
{
    if(!_minTitleLab){
        _minTitleLab = [[CusLabel alloc]init];
        _minTitleLab.text = @"Min";
        _minTitleLab.font = [UIFont systemFontOfSize:16];
        _minTitleLab.textAlignment = NSTextAlignmentCenter;
    }
    return _minTitleLab;
}
- (CusLabel *)maxTitleLab
{
    if(!_maxTitleLab){
        _maxTitleLab = [[CusLabel alloc]init];
        _maxTitleLab.text = @"Max";
        _maxTitleLab.font = [UIFont systemFontOfSize:16];
        _maxTitleLab.textAlignment = NSTextAlignmentCenter;
    }
    return _maxTitleLab;
}

- (UIView *)lineView
{
    if (!_lineView) {
        _lineView = [[UIView alloc]init];
        _lineView.backgroundColor = RGB(247, 192, 70);
    }
    return _lineView;
}
- (UIView *)minView
{
    if (!_minView) {
        _minView = [[UIView alloc]init];
        _minView.layer.cornerRadius = 8.0f;
        _minView.layer.masksToBounds = YES;
        _minView.backgroundColor = NSC_BGThemColor2;
        _minView.userInteractionEnabled = YES;
        UITapGestureRecognizer *chooseAgeGesture = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(actionChooseMin:)];
        [_minView addGestureRecognizer:chooseAgeGesture];
    }
    return _minView;
}


-(void)actionChooseMin:(UITapGestureRecognizer *)gesture
{
    NSMutableArray *arr = [NSMutableArray array];
    for(int i=18;i<100;i++){
        [arr addObject:[NSString stringWithFormat:@"%d",i]];
    }
    [EditMyPickerView showWithData:[NSArray arrayWithArray:arr] flag:1 tipText:@"Age" block:^(NSArray * _Nonnull arr) {
        NSString *str = [arr firstObject];
        self.minContentLab.text = str;
    }];
}

- (UIView *)maxView
{
    if (!_maxView) {
        _maxView = [[UIView alloc]init];
        _maxView.layer.cornerRadius = 8.0f;
        _maxView.layer.masksToBounds = YES;
        _maxView.backgroundColor = NSC_BGThemColor2;
        _maxView.userInteractionEnabled = YES;
        UITapGestureRecognizer *chooseAgeGesture = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(actionChooseMax:)];
        [_maxView addGestureRecognizer:chooseAgeGesture];
    }
    return _maxView;
}
-(void)actionChooseMax:(UITapGestureRecognizer *)gesture
{
    NSLog(@"actionChooseMax actionChooseMax");
    NSMutableArray *arr = [NSMutableArray array];
    for(int i=18;i<100;i++){
        [arr addObject:[NSString stringWithFormat:@"%d",i]];
    }
    [EditMyPickerView showWithData:[NSArray arrayWithArray:arr] flag:1 tipText:@"Age" block:^(NSArray * _Nonnull arr) {
        NSString *str = [arr firstObject];
        self.maxContentLab.text = str;
    }];
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"Filters";
    [self.view addSubview:self.angeLab];
    [self.angeLab mas_makeConstraints:^(MASConstraintMaker *make){
        make.left.offset(20);
        make.top.offset(20);
    }];
    
    [self.view addSubview:self.minView];
    [self.minView mas_makeConstraints:^(MASConstraintMaker *make){
        make.left.offset(30);
        make.top.mas_equalTo(self.angeLab.mas_bottom).offset(50);
        make.width.height.offset(40);
    }];
    
    [self.minView addSubview:self.minContentLab];
    [self.minContentLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.minView);
    }];

    [self.maxView addSubview:self.maxContentLab];
    [self.maxContentLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.mas_equalTo(self.maxView);
    }];
    
    [self.view addSubview:self.maxView];
    [self.maxView mas_makeConstraints:^(MASConstraintMaker *make){
        make.right.offset(-30);
        make.top.mas_equalTo(self.angeLab.mas_bottom).offset(50);
        make.width.height.offset(40);
    }];
    
    [self.view addSubview:self.lineView];
    [self.lineView mas_makeConstraints:^(MASConstraintMaker *make){
        make.centerY.mas_equalTo(self.maxView);
        make.left.mas_equalTo(self.minView.mas_right).offset(10);
        make.right.mas_equalTo(self.maxView.mas_left).offset(-10);
        make.height.offset(2);
    }];

    [self.view addSubview:self.minTitleLab];
    [self.minTitleLab mas_makeConstraints:^(MASConstraintMaker *make){
        make.centerX.mas_equalTo(self.minView);
        make.bottom.mas_equalTo(self.minView.mas_top).offset(-15);
    }];
    
    [self.view addSubview:self.maxTitleLab];
    [self.maxTitleLab mas_makeConstraints:^(MASConstraintMaker *make){
        make.centerX.mas_equalTo(self.maxView);
        make.bottom.mas_equalTo(self.maxView.mas_top).offset(-15);
    }];
    
    [self.view addSubview:self.showMeLab];
    [self.showMeLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.top.mas_equalTo(self.minView.mas_bottom).offset(30);
    }];
    
    
    [self.view addSubview:self.centerView];
    [self.centerView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.mas_equalTo(self.view);
        make.top.mas_equalTo(self.showMeLab.mas_bottom).offset(20);
        make.width.offset(90);
        make.height.offset(95);
    }];
    
    [self.centerView addSubview:self.centerBtn];
    [self.centerBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.bottom.left.right.offset(0);
    }];
    
    [self.centerView addSubview:self.centerImageView];
    [self.centerImageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.centerX.mas_equalTo(self.centerView);
        make.width.offset(30);
        make.height.offset(45);
    }];
    
    [self.view addSubview:self.leftView];
    [self.leftView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.top.mas_equalTo(self.showMeLab.mas_bottom).offset(20);
        make.width.offset(90);
        make.height.offset(95);
    }];
    
    [self.leftView addSubview:self.leftBtn];
    [self.leftBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.bottom.left.right.offset(0);
    }];
    
    [self.leftView addSubview:self.leftImageView];
    [self.leftImageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(10);
        make.centerY.mas_equalTo(self.leftView);
        make.width.offset(30);
        make.height.offset(45);
    }];
    
    [self.leftView addSubview:self.rightImageView];
    [self.rightImageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-10);
        make.centerY.mas_equalTo(self.leftView);
        make.width.offset(30);
        make.height.offset(45);
    }];
    
    [self.view addSubview:self.rightView];
    [self.rightView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-20);
        make.top.mas_equalTo(self.showMeLab.mas_bottom).offset(20);
        make.width.offset(90);
        make.height.offset(95);
    }];
    [self.rightView addSubview:self.rightBtn];
    [self.rightBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.bottom.left.right.offset(0);
    }];
    
    [self.rightView addSubview:self.rightImageView2];
    [self.rightImageView2 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.centerX.mas_equalTo(self.rightView);
        make.width.offset(30);
        make.height.offset(45);
    }];
    
    [self.view addSubview:self.locationLab];
    [self.locationLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.top.mas_equalTo(self.leftView.mas_bottom).offset(30);
    }];
    
    [self.view addSubview:self.locationView];
    [self.locationView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(20);
        make.right.offset(-20);
        make.top.mas_equalTo(self.locationLab.mas_bottom).offset(20);
        make.height.offset(110);
    }];
    
    [self.view addSubview:self.saveBtn];
    [self.saveBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.mas_equalTo(self.locationView.mas_bottom).offset(30);
        make.centerX.mas_equalTo(self.view);
        make.width.offset(270);
        make.height.offset(56);
    }];
    
    [self.locationView addSubview:self.anywhereBtn];
    [self.anywhereBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.offset(-15);
        make.centerY.mas_equalTo(self.locationView);
        make.width.offset(65);
        make.height.offset(50);
    }];
    
    
    [self.locationView addSubview:self.anywhereLab];
    [self.anywhereLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.top.offset(30);
    }];
    [self.locationView addSubview:self.anywhereSubLab];
    [self.anywhereSubLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.top.mas_equalTo(self.anywhereLab.mas_bottom).offset(10);
    }];
    
    [self.locationView addSubview:self.anywhereBtn2];
    self.anywhereBtn2.hidden = YES;
    [self.anywhereBtn2 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.offset(15);
        make.right.offset(-15);
        make.width.offset(65);
        make.height.offset(35);
    }];
    
    [self.locationView addSubview:self.changeBtn2];
    self.changeBtn2.hidden = YES;
    [self.changeBtn2 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.bottom.offset(-15);
        make.right.offset(-15);
        make.width.offset(65);
        make.height.offset(35);
    }];
    
    [self.locationView addSubview:self.locationImage];
    self.locationImage.hidden = YES;
    [self.locationImage mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.offset(15);
        make.top.mas_equalTo(self.anywhereLab.mas_bottom).offset(15);
        make.width.offset(13);
        make.width.offset(19);
    }];
    [self.locationView addSubview:self.locationSubLab];
    self.locationSubLab.hidden = YES;
    [self.locationSubLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.mas_equalTo(self.locationImage);
        make.left.mas_equalTo(self.locationImage.mas_right).offset(10);
        make.right.mas_equalTo(self.changeBtn2.mas_left).offset(-10);
    }];
    [self setupFiterData];
}

-(void)setupFiterData
{
    NeighborsSimpleCuteFiterModel  *model = [NeighborsSimpleCuteFiterModel getUserInfo];
    self.countryStr = model.countryStr;
    self.countryId  = model.countryId;
    self.stateStr   = model.stateStr;
    self.stateId    = model.stateId;
    self.cityStr    = model.cityStr;
    self.cityId     = model.cityId;
    self.genderStr = model.genderStr;
    self.isAnyWhere = model.isanyWhere;
    self.minContentLab.text = [NSString stringWithFormat:@"%@",model.minStr];
    self.maxContentLab.text = [NSString stringWithFormat:@"%@",model.maxStr];
    NSLog(@"self.genderStr:%@",self.genderStr);
    if ([self.genderStr isEqualToString:@"0"]) {
        [self.leftBtn gradientButtonWithSize:CGSizeMake(90, 95) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }else if([self.genderStr isEqualToString:@"1"]){
        [self.centerBtn gradientButtonWithSize:CGSizeMake(90, 95) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }else if([self.genderStr isEqualToString:@"2"]){
        [self.rightBtn gradientButtonWithSize:CGSizeMake(90, 95) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 63)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
    }
    if (self.isAnyWhere == YES) {
        self.anywhereBtn2.hidden = YES;
        self.changeBtn2.hidden = YES;
        self.anywhereBtn.hidden = NO;
        self.anywhereLab.text = @"Anywhere";
        self.locationImage.hidden = YES;
        self.locationSubLab.hidden = YES;
        self.anywhereSubLab.hidden = NO;
        self.anywhereSubLab.text = @"Show all users in your country";
    }else{
        self.anywhereBtn2.hidden = NO;
        self.changeBtn2.hidden = NO;
        self.anywhereBtn.hidden = YES;
        self.locationImage.hidden = NO;
        self.locationSubLab.hidden = NO;
        self.anywhereSubLab.hidden = YES;
        NSString *fiterStr = nil;
        if (IS_EMPTY(model.stateStr)) {
            //只有国家
            self.anywhereLab.text = @"Country";
            fiterStr = [NSString stringWithFormat:@"%@",model.countryStr];
        }else{
            if (IS_EMPTY(model.cityStr)) {
                //省份
                self.anywhereLab.text = @"State";
                fiterStr = [NSString stringWithFormat:@"%@ | %@",model.stateStr,model.countryStr];
            }else{
                //城市
                self.anywhereLab.text = @"City";
                fiterStr = [NSString stringWithFormat:@"%@ | %@ | \n %@",model.cityStr,model.stateStr,model.countryStr];
            }
        }
        self.locationSubLab.text = fiterStr;
    }
}
@end

#pragma mark ---  完善个人资料的功能
@interface GradientTextHelp()

@end

@implementation GradientTextHelp
/*
 view 是要设置渐变字体的控件   bgVIew是view的父视图  colors是渐变的组成颜色  startPoint是渐变开始点 endPoint结束点
 */
+(void)TextGradientview:(UIView *)view bgVIew:(UIView *)bgVIew gradientColors:(NSArray *)colors gradientStartPoint:(CGPoint)startPoint endPoint:(CGPoint)endPoint{
    
    CAGradientLayer* gradientLayer1 = [CAGradientLayer layer];
    gradientLayer1.frame = view.frame;
    gradientLayer1.colors = colors;
    gradientLayer1.startPoint =startPoint;
    gradientLayer1.endPoint = endPoint;
    [bgVIew.layer addSublayer:gradientLayer1];
    gradientLayer1.mask = view.layer;
    view.frame = gradientLayer1.bounds;
}
 
/*
 control 是要设置渐变字体的控件   bgVIew是control的父视图  colors是渐变的组成颜色  startPoint是渐变开始点 endPoint结束点
 */
+(void)TextGradientControl:(UIControl *)control bgVIew:(UIView *)bgVIew gradientColors:(NSArray *)colors gradientStartPoint:(CGPoint)startPoint endPoint:(CGPoint)endPoint{
 
    CAGradientLayer* gradientLayer1 = [CAGradientLayer layer];
    gradientLayer1.frame = control.frame;
    gradientLayer1.colors = colors;
    gradientLayer1.startPoint = startPoint;
    gradientLayer1.endPoint = endPoint;
    [bgVIew.layer addSublayer:gradientLayer1];
    gradientLayer1.mask = control.layer;
    control.frame = gradientLayer1.bounds;

}

@end


@interface NSCPersonMessageInfoModel ()

@end

@implementation NSCPersonMessageInfoModel

@end

@interface NSCPersonMessagePhotoModel ()

@end

@implementation NSCPersonMessagePhotoModel

@end

@interface NSCPersonMessageMainModel ()

@end

@implementation NSCPersonMessageMainModel

+ (NSDictionary *)mj_objectClassInArray
{
    return @{@"photos" : @"NSCPersonMessagePhotoModel"};
}

@end

@implementation UIButton (MCLayout)

- (void)layoutWithStatus:(MCLayoutStatus)status andMargin:(CGFloat)margin{
    CGFloat imgWidth = self.imageView.bounds.size.width;
    CGFloat imgHeight = self.imageView.bounds.size.height;
    CGFloat labWidth = self.titleLabel.bounds.size.width;
    CGFloat labHeight = self.titleLabel.bounds.size.height;
    CGSize textSize = [self.titleLabel.text sizeWithAttributes:@{NSFontAttributeName:self.titleLabel.font}];
    CGSize frameSize = CGSizeMake(ceilf(textSize.width), ceilf(textSize.height));
    if (labWidth < frameSize.width) {
        labWidth = frameSize.width;
    }
    CGFloat kMargin = margin/2.0;
    switch (status) {
        case MCLayoutStatusNormal://图左字右
            [self setImageEdgeInsets:UIEdgeInsetsMake(0, -kMargin, 0, kMargin)];
            [self setTitleEdgeInsets:UIEdgeInsetsMake(0, kMargin, 0, -kMargin)];
            break;
        case MCLayoutStatusImageRight://图右字左
            [self setImageEdgeInsets:UIEdgeInsetsMake(0, labWidth + kMargin, 0, -labWidth - kMargin)];
            [self setTitleEdgeInsets:UIEdgeInsetsMake(0, -imgWidth - kMargin, 0, imgWidth + kMargin)];
            break;
        case MCLayoutStatusImageTop://图上字下
            [self setImageEdgeInsets:UIEdgeInsetsMake(0,0, labHeight + margin, -labWidth)];

            [self setTitleEdgeInsets:UIEdgeInsetsMake(imgHeight + margin, -imgWidth, 0, 0)];
            break;
        case MCLayoutStatusImageBottom://图下字上
            [self setImageEdgeInsets:UIEdgeInsetsMake(labHeight + margin,0, 0, -labWidth)];
            
            [self setTitleEdgeInsets:UIEdgeInsetsMake(0, -imgWidth, imgHeight + margin, 0)];

            break;
        default:
            break;
    }
}
@end
static const void *zw_placeHolderKey;
@interface UITextView ()
@property (nonatomic, readonly) UILabel *zw_placeHolderLabel;
@end

@implementation UITextView (ZWPlaceHolder)
+(void)load{
    [super load];
    method_exchangeImplementations(class_getInstanceMethod(self.class, NSSelectorFromString(@"layoutSubviews")),
                                   class_getInstanceMethod(self.class, @selector(zwPlaceHolder_swizzling_layoutSubviews)));
    method_exchangeImplementations(class_getInstanceMethod(self.class, NSSelectorFromString(@"dealloc")),
                                   class_getInstanceMethod(self.class, @selector(zwPlaceHolder_swizzled_dealloc)));
    method_exchangeImplementations(class_getInstanceMethod(self.class, NSSelectorFromString(@"setText:")),
                                   class_getInstanceMethod(self.class, @selector(zwPlaceHolder_swizzled_setText:)));
}
#pragma mark - swizzled
- (void)zwPlaceHolder_swizzled_dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    [self zwPlaceHolder_swizzled_dealloc];
}
- (void)zwPlaceHolder_swizzling_layoutSubviews {
    if (self.zw_placeHolder) {
        UIEdgeInsets textContainerInset = self.textContainerInset;
        CGFloat lineFragmentPadding = self.textContainer.lineFragmentPadding;
        CGFloat x = lineFragmentPadding + textContainerInset.left + self.layer.borderWidth;
        CGFloat y = textContainerInset.top + self.layer.borderWidth;
        CGFloat width = CGRectGetWidth(self.bounds) - x - textContainerInset.right - 2*self.layer.borderWidth;
        CGFloat height = [self.zw_placeHolderLabel sizeThatFits:CGSizeMake(width, 0)].height;
        self.zw_placeHolderLabel.frame = CGRectMake(x, y, width, height);
    }
    [self zwPlaceHolder_swizzling_layoutSubviews];
}
- (void)zwPlaceHolder_swizzled_setText:(NSString *)text{
    [self zwPlaceHolder_swizzled_setText:text];
    if (self.zw_placeHolder) {
        [self updatePlaceHolder];
    }
}
#pragma mark - associated
-(NSString *)zw_placeHolder{
    return objc_getAssociatedObject(self, &zw_placeHolderKey);
}
-(void)setZw_placeHolder:(NSString *)zw_placeHolder{
    objc_setAssociatedObject(self, &zw_placeHolderKey, zw_placeHolder, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
    [self updatePlaceHolder];
}
-(UIColor *)zw_placeHolderColor{
    return self.zw_placeHolderLabel.textColor;
}
-(void)setZw_placeHolderColor:(UIColor *)zw_placeHolderColor{
    self.zw_placeHolderLabel.textColor = zw_placeHolderColor;
}
-(NSString *)placeholder{
    return self.zw_placeHolder;
}
-(void)setPlaceholder:(NSString *)placeholder{
    self.zw_placeHolder = placeholder;
}
#pragma mark - update
- (void)updatePlaceHolder{
    if (self.text.length) {
        [self.zw_placeHolderLabel removeFromSuperview];
        return;
    }
    self.zw_placeHolderLabel.font = self.font?self.font:self.cacutDefaultFont;
    self.zw_placeHolderLabel.textAlignment = self.textAlignment;
    self.zw_placeHolderLabel.text = self.zw_placeHolder;
    [self insertSubview:self.zw_placeHolderLabel atIndex:0];
}
#pragma mark - lazzing
-(UILabel *)zw_placeHolderLabel{
    UILabel *placeHolderLab = objc_getAssociatedObject(self, @selector(zw_placeHolderLabel));
    if (!placeHolderLab) {
        placeHolderLab = [[UILabel alloc] init];
        placeHolderLab.numberOfLines = 0;
        placeHolderLab.textColor = [UIColor lightGrayColor];
        objc_setAssociatedObject(self, @selector(zw_placeHolderLabel), placeHolderLab, OBJC_ASSOCIATION_RETAIN);
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(updatePlaceHolder) name:UITextViewTextDidChangeNotification object:self];
    }
    return placeHolderLab;
}
- (UIFont *)cacutDefaultFont{
    static UIFont *font = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        UITextView *textview = [[UITextView alloc] init];
        textview.text = @" ";
        font = textview.font;
    });
    return font;
}
@end

@protocol NSCPersonMessageHeaderViewDelegate <NSObject>
//点击轮播
- (void)selectScrollViewIndex:(NSInteger )index;
@end
@interface NSCPersonMessageHeaderView ()<SDCycleScrollViewDelegate>
@property (weak, nonatomic) id <NSCPersonMessageHeaderViewDelegate> delegate;
@property (strong, nonatomic) SDCycleScrollView *adScrollView;
@property (strong,nonatomic)UIImageView *botttomImage;
- (void)setDataArr:(NSArray *)arr;
@end

@implementation NSCPersonMessageHeaderView
- (instancetype)initWithFrame:(CGRect)frame{
    self = [super initWithFrame:frame];
    
    self.adScrollView = [SDCycleScrollView cycleScrollViewWithFrame:CGRectZero delegate:self placeholderImage:[UIImage imageNamed:TUIKitResource(@"n_default_bg")]];
    [self addSubview:self.adScrollView];
    [self.adScrollView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.left.right.equalTo(self);
        make.height.mas_equalTo(kWSizeRatio(526));
    }];
    self.adScrollView.backgroundColor = RGB(38, 38, 38);
    self.adScrollView.currentPageDotColor = RGB(250, 204, 72);//[UIColor colorWithPatternImage:[UIImage imageNamed:@"udate-top-bg"]];
    self.adScrollView.pageDotColor  = [UIColor whiteColor];
    self.adScrollView.showPageControl = YES;
    self.adScrollView.autoScrollTimeInterval = 3;
    
    self.adScrollView.bannerImageViewContentMode = UIViewContentModeScaleAspectFill;
    
    self.botttomImage = [[UIImageView alloc]init];
    self.botttomImage.contentMode = UIViewContentModeScaleAspectFill;
    self.botttomImage.image = [UIImage imageNamed:TUIKitResource(@"wokomengcen")];
    [self addSubview:self.botttomImage];
    [self.botttomImage mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.equalTo(self);
        make.bottom.offset(0);
        make.height.mas_equalTo(kWSizeRatio(40));
    }];
    return self;
}

- (void)setDataArr:(NSArray *)arr
{
    self.adScrollView.imageURLStringsGroup = arr;
}
/** 点击图片回调 */
- (void)cycleScrollView:(SDCycleScrollView *)cycleScrollView didSelectItemAtIndex:(NSInteger)index{
    if([self.delegate respondsToSelector:@selector(selectScrollViewIndex:)]){
        [self.delegate selectScrollViewIndex:index];
    }
}
/** 图片滚动回调 */
- (void)cycleScrollView:(SDCycleScrollView *)cycleScrollView didScrollToIndex:(NSInteger)index
{
    
}
@end


@interface NSCPersonMessageInfoTableViewCell()<LeeTagViewDelegate>
@property (strong, nonatomic) UIView *bgView;
@property (strong, nonatomic) LeeTagView *tagView;
//@property (strong, nonatomic) UIButton *topButton;
@property (strong, nonatomic) UILabel *topLabel;

@property (strong, nonatomic) UIImageView *topImageView;

@property (strong, nonatomic) UILabel *nameLabel;
@end

@implementation NSCPersonMessageInfoTableViewCell
- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {
    if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]) {
        
        self.bgView = [[UIView alloc]init];
        [self.contentView addSubview:self.bgView];
        [self.bgView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.contentView).offset(kWSizeRatio(14));
            make.left.equalTo(self.contentView.mas_left).offset(kWSizeRatio(16));
            make.right.equalTo(self.contentView.mas_right).offset(kWSizeRatio(-16));
            make.bottom.equalTo(self.contentView.mas_bottom);
        }];
        self.bgView.backgroundColor = RGB(54, 54, 54);
        self.bgView.layer.cornerRadius = kWSizeRatio(15);
        self.bgView.layer.masksToBounds = YES;
        
        self.topLabel = [[UILabel alloc]init];
        [self.bgView addSubview:self.topLabel];
        [self.topLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.equalTo(self.bgView.mas_centerX).offset(kWSizeRatio(-15));
            make.top.equalTo(self.bgView.mas_top).offset(kWSizeRatio(29));
        }];
        self.topLabel.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        self.topLabel.textAlignment = 1;
        self.topLabel.font = MyFont(Font_Regular, 18);
        
        self.topImageView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:TUIKitResource(@"person_message_vip")]];
        [self.bgView addSubview:self.topImageView];
        [self.topImageView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerY.equalTo(self.topLabel.mas_centerY);
            make.left.equalTo(self.topLabel.mas_right).offset(kWSizeRatio(4));
            make.size.mas_equalTo(CGSizeMake(27, 24));
        }];
        self.topImageView.hidden = YES;
        
        self.nameLabel = [[UILabel alloc]init];
        [self.bgView addSubview:self.nameLabel];
        [self.nameLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.bgView.mas_left).offset(kWSizeRatio(8));
            make.right.equalTo(self.bgView.mas_right).offset(kWSizeRatio(-8));
            make.top.equalTo(self.bgView.mas_top).offset(kWSizeRatio(60));
        }];
        self.nameLabel.text = @"38, Female, Now York, NY, USA";
        self.nameLabel.textColor = RGB(255, 255, 255);
        self.nameLabel.textAlignment = 1;
        self.nameLabel.font = MyFont(Font_Regular, 15);
        
        self.tagView = [[LeeTagView alloc]init];
        [self.bgView addSubview:self.tagView];
        [self.tagView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.bottom.equalTo(self.contentView);
            make.top.equalTo(self.nameLabel.mas_bottom).offset(kWSizeRatio(22));
            make.left.equalTo(self.bgView.mas_left).offset(kWSizeRatio(8));
            make.right.equalTo(self.bgView.mas_right).offset(kWSizeRatio(8));
        }];
        self.tagView.backgroundColor = [UIColor clearColor];
        self.tagView.delegate = self;
        self.tagView.tagViewSelectionStyle = LeeTagViewStyleSelectSingle;
        self.tagView.tagViewLineStyle = LeeTagViewLineStyleMulti;
        self.tagView.tagViewPadding = UIEdgeInsetsMake(14, 7, 14, 7);
        CGFloat width = self.frame.size.width;
        width = Screen_Width - kWSizeRatio(46);
        self.tagView.tagViewMaxWidth = width;
        
    }
    return self;
}

-(void)reloadUIWithModel:(NSCPersonMessageInfoModel *)model data:(NSArray *)data
{
    self.topLabel.text = model.nickName;
    if (model.memberLevel > 0)
    {
        self.topImageView.hidden = NO;
    }
    
    if (IsStrEmpty(model.province)) {
        self.nameLabel.text = [NSString stringWithFormat:@"%ld, %@%@",(long)model.age,(model.gender == 1)?@"Male":@"Female",IsStrEmpty(model.country) ? @"" : [NSString stringWithFormat:@", %@",model.country]];
    }
    else
    {
        if (IsStrEmpty(model.city)) {
            self.nameLabel.text = [NSString stringWithFormat:@"%ld, %@%@%@",(long)model.age,(model.gender == 1)?@"Male":@"Female",IsStrEmpty(model.province) ? @"" : [NSString stringWithFormat:@", %@",model.province],IsStrEmpty(model.country) ? @"" : [NSString stringWithFormat:@", %@",model.country]];
        }
        else
        {
            self.nameLabel.text = [NSString stringWithFormat:@"%ld, %@%@%@%@",(long)model.age,(model.gender == 1)?@"Male":@"Female",IsStrEmpty(model.city) ? @"" : [NSString stringWithFormat:@", %@",model.city],IsStrEmpty(model.tempStr5th) ? @"" : [NSString stringWithFormat:@", %@",model.tempStr5th],IsStrEmpty(model.tempStr6th) ? @"" : [NSString stringWithFormat:@", %@",model.tempStr6th]];
        }
    }
    
    [self.tagView removeAllTags];
    [data enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        LeeTagItemViewModel * item = (LeeTagItemViewModel *)obj;
        [self.tagView addTag:item];
    }];
}

-(void)reloadUIWithName:(NSString *)name info:(NSString *)info data:(NSArray *)data
{
    self.nameLabel.text = info;
    [self.tagView removeAllTags];
    [data enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        LeeTagItemViewModel * item = (LeeTagItemViewModel *)obj;
        [self.tagView addTag:item];
    }];
}

-(void)leeTagView:(LeeTagView *)tagView tapTagItem:(LeeTagItem *)tagItem atIndex:(NSInteger)index
{
    
}
@end

@interface NSCPersonMessageAboutMeTableViewCell()
@property (strong, nonatomic) UIButton *topButton;
@property (strong, nonatomic) UILabel *messageLabel;
@end

@implementation NSCPersonMessageAboutMeTableViewCell

- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {
    if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]) {
        
        UIView *bgView = [[UIView alloc]init];
        [self.contentView addSubview:bgView];
        [bgView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.contentView).offset(kWSizeRatio(14));
            make.left.equalTo(self.contentView.mas_left).offset(kWSizeRatio(16));
            make.right.equalTo(self.contentView.mas_right).offset(kWSizeRatio(-16));
            make.bottom.equalTo(self.contentView.mas_bottom);
        }];
        bgView.backgroundColor = RGB(54, 54, 54);
        bgView.layer.cornerRadius = kWSizeRatio(15);
        bgView.layer.masksToBounds = YES;
        
        self.topButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
        self.topButton.frame = CGRectMake(0, kWSizeRatio(29), Screen_Width - kWSizeRatio(32), kWSizeRatio(20));
        [bgView addSubview:self.topButton];
        [self.topButton setTitle:@"About Me" forState:(UIControlStateNormal)];
        self.topButton.titleLabel.font = MyFont(Font_Bold, 18);
        [self.topButton setTitleColor:[UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]] forState:UIControlStateNormal];
        [self.topButton setImage:[UIImage imageNamed:TUIKitResource(@"person_message_aboume")] forState:(UIControlStateNormal)];
        //[GradientTextHelp TextGradientControl:self.topButton bgVIew:bgView gradientColors:@[(id)RGB(235, 142, 63).CGColor, (id)RGB(250, 204, 72).CGColor] gradientStartPoint:CGPointMake(0, 1) endPoint:CGPointMake(1, 1)];
        [self.topButton layoutWithStatus:(MCLayoutStatusNormal) andMargin:10];
        
        self.messageLabel = [[UILabel alloc]init];
        [bgView addSubview:self.messageLabel];
        [self.messageLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(bgView.mas_top).offset(kWSizeRatio(29 + 49));
            make.left.equalTo(bgView.mas_left).offset(kWSizeRatio(12));
            make.bottom.equalTo(bgView.mas_bottom).offset(kWSizeRatio(-34));
            make.right.equalTo(bgView.mas_right).offset(kWSizeRatio(-12));
        }];
        self.messageLabel.textColor=RGB(255, 255, 255);
        self.messageLabel.textAlignment = 0;
        self.messageLabel.font = MyFont(Font_Regular, 15);
        self.messageLabel.numberOfLines = 0;
    }
    return self;
}
-(void)reloadUIWithStr:(NSString *)str
{
    self.messageLabel.text = str;
}
@end

@interface NSCPersonMessageAboutMatchTableViewCell()
@property (strong, nonatomic) UIButton *topButton;
@property (strong, nonatomic) UILabel *messageLabel;
@end

@implementation NSCPersonMessageAboutMatchTableViewCell
- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {
    if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]) {
        UIView *bgView = [[UIView alloc]init];
        [self.contentView addSubview:bgView];
        [bgView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.contentView).offset(kWSizeRatio(14));
            make.left.equalTo(self.contentView.mas_left).offset(kWSizeRatio(16));
            make.right.equalTo(self.contentView.mas_right).offset(kWSizeRatio(-16));
            make.bottom.equalTo(self.contentView.mas_bottom);
        }];
        bgView.backgroundColor = RGB(54, 54, 54);
        bgView.layer.cornerRadius = kWSizeRatio(15);
        bgView.layer.masksToBounds = YES;
        
        self.topButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
        self.topButton.frame = CGRectMake(0, kWSizeRatio(29), Screen_Width - kWSizeRatio(32), kWSizeRatio(20));
        [bgView addSubview:self.topButton];
        [self.topButton setTitle:@"About Match" forState:(UIControlStateNormal)];
        self.topButton.titleLabel.font = MyFont(Font_Bold, 18);
        [self.topButton setTitleColor:[UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]] forState:UIControlStateNormal];
        [self.topButton setImage:[UIImage imageNamed:TUIKitResource(@"person_message_abmatch")] forState:(UIControlStateNormal)];
        [self.topButton layoutWithStatus:(MCLayoutStatusNormal) andMargin:10];
        //[GradientTextHelp TextGradientControl:self.topButton bgVIew:bgView gradientColors:@[(id)RGB(235, 142, 63).CGColor, (id)RGB(250, 204, 72).CGColor] gradientStartPoint:CGPointMake(0, 1) endPoint:CGPointMake(1, 1)];
        
        self.messageLabel = [[UILabel alloc]init];
        [bgView addSubview:self.messageLabel];
        [self.messageLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(bgView.mas_top).offset(kWSizeRatio(29 + 49));
            make.left.equalTo(bgView.mas_left).offset(kWSizeRatio(12));
            make.bottom.equalTo(bgView.mas_bottom).offset(kWSizeRatio(-34));
            make.right.equalTo(bgView.mas_right).offset(kWSizeRatio(-12));
        }];
        self.messageLabel.textColor=RGB(255, 255, 255);
        self.messageLabel.textAlignment = 0;
        self.messageLabel.font = MyFont(Font_Regular, 15);
        self.messageLabel.numberOfLines = 0;
        
    }
    return self;
}

-(void)reloadUIWithStr:(NSString *)str
{
    self.messageLabel.text = str;
    
}
@end

@interface NSCPersonMessageContaceHeightCell2()

@property (nonatomic,strong)UILabel *titleLab;

@end

@implementation NSCPersonMessageContaceHeightCell2

- (UILabel *)titleLab
{
    if (!_titleLab) {
        _titleLab = [[UILabel alloc]init];
        _titleLab.backgroundColor = [UIColor blackColor];
        _titleLab.layer.cornerRadius = 5;
        _titleLab.layer.masksToBounds = YES;
        _titleLab.text = @"4'5\"(135 cm)";
        _titleLab.textColor = RGB(184, 184, 184);
        _titleLab.font = [UIFont systemFontOfSize:14];
        _titleLab.textAlignment = NSTextAlignmentCenter;
        [_titleLab sizeToFit];
    }
    return _titleLab;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}
-(void)setupUI
{
    [self.contentView addSubview:self.titleLab];
    [self.titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.top.bottom.offset(0);
        make.width.offset(0);
    }];
}
- (void)setIncomStr:(NSString *)incomStr
{
    _incomStr = incomStr;
    self.titleLab.text = incomStr;
    float textWidth =  [XSDKResourceUtil measureSinglelineStringWidth:incomStr andFont:[UIFont systemFontOfSize:14]];
    if (textWidth >=  Screen_Width - 30) {
          textWidth = Screen_Width - 30;
      }else{
          textWidth += 20;
    }
    NSLog(@"textWidthtextWidthtextWidthtextWidth:%f",textWidth);
    [self.titleLab mas_updateConstraints:^(MASConstraintMaker *make) {
        make.top.bottom.offset(0);
        make.left.offset(15);
        make.width.offset(textWidth);
    }];
}
- (void)setSelected:(BOOL)selected
{
    [super setSelected:selected];
    if (selected) {
        self.titleLab.textColor = [UIColor whiteColor];
        self.titleLab.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
    }else{
        self.titleLab.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
        self.titleLab.textColor = [UIColor whiteColor];
    }
}


@end


@interface NSCPersonMessageContaceHeightCell()

@property (nonatomic,strong)UILabel *titleLab;

@end

@implementation NSCPersonMessageContaceHeightCell

- (UILabel *)titleLab
{
    if (!_titleLab) {
        _titleLab = [[UILabel alloc]init];
        _titleLab.backgroundColor = [UIColor blackColor];
        _titleLab.layer.cornerRadius = 5;
        _titleLab.layer.masksToBounds = YES;
        _titleLab.text = @"4'5\"(135 cm)";
        _titleLab.textColor = RGB(184, 184, 184);
        _titleLab.font = [UIFont systemFontOfSize:14];
        _titleLab.textAlignment = NSTextAlignmentCenter;
    }
    return _titleLab;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self setupUI];
    }
    return self;
}

-(void)setupUI
{
    [self.contentView addSubview:self.titleLab];
    [self.titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.bottom.offset(0);
    }];
}

- (void)setSelected:(BOOL)selected
{
    [super setSelected:selected];
    if (selected) {
        self.titleLab.textColor = [UIColor whiteColor];
        self.titleLab.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
    }else{
        self.titleLab.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
        self.titleLab.textColor = [UIColor whiteColor];
    }
}
@end


@interface NSCPersonMessageContactTableViewCell ()
@property (strong, nonatomic) UIButton *topButton;
@property (strong, nonatomic) UILabel *messageLabel;
@end

@implementation NSCPersonMessageContactTableViewCell
- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {
    if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]) {
        
        UIView *bgView = [[UIView alloc]init];
        [self.contentView addSubview:bgView];
        [bgView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.contentView).offset(kWSizeRatio(14));
            make.left.equalTo(self.contentView.mas_left).offset(kWSizeRatio(16));
            make.right.equalTo(self.contentView.mas_right).offset(kWSizeRatio(-16));
            make.bottom.equalTo(self.contentView.mas_bottom);
        }];
        bgView.backgroundColor = RGB(54, 54, 54);
        bgView.layer.cornerRadius = kWSizeRatio(15);
        bgView.layer.masksToBounds = YES;
        
        self.topButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
        self.topButton.frame = CGRectMake(0, kWSizeRatio(29), Screen_Width - kWSizeRatio(32), kWSizeRatio(20));
        [bgView addSubview:self.topButton];
        [self.topButton setTitle:@"Contact" forState:(UIControlStateNormal)];
        self.topButton.titleLabel.font = MyFont(Font_Bold, 18);
        [self.topButton setTitleColor:[UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]] forState:UIControlStateNormal];
        [self.topButton setImage:[UIImage imageNamed:TUIKitResource(@"person_message_contac")] forState:(UIControlStateNormal)];
        [self.topButton layoutWithStatus:(MCLayoutStatusNormal) andMargin:10];
        //[GradientTextHelp TextGradientControl:self.topButton bgVIew:bgView gradientColors:@[(id)RGB(235, 142, 63).CGColor, (id)RGB(250, 204, 72).CGColor] gradientStartPoint:CGPointMake(0, 1) endPoint:CGPointMake(1, 1)];
        
        self.messageLabel = [[UILabel alloc]init];
        [bgView addSubview:self.messageLabel];
        [self.messageLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(bgView.mas_top).offset(kWSizeRatio(29 + 49));
            make.left.equalTo(bgView.mas_left).offset(kWSizeRatio(12));
            make.bottom.equalTo(bgView.mas_bottom).offset(kWSizeRatio(-34));
            make.right.equalTo(bgView.mas_right).offset(kWSizeRatio(-12));
        }];
        self.messageLabel.textColor=RGB(255, 255, 255);
        self.messageLabel.textAlignment = 0;
        self.messageLabel.font = MyFont(Font_Regular, 15);
        self.messageLabel.numberOfLines = 0;
    }
    return self;
}

-(void)reloadUIWithStr:(NSString *)str
{
    self.messageLabel.text = str;
}
@end

@interface NSCPersonMessageContactNoDataTableViewCell ()
@property (strong, nonatomic) UIButton *topButton;
@end

@implementation NSCPersonMessageContactNoDataTableViewCell
- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {
    if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]){
        UIView *bgView = [[UIView alloc]init];
        [self.contentView addSubview:bgView];
        [bgView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.contentView).offset(kWSizeRatio(14));
            make.left.equalTo(self.contentView.mas_left).offset(kWSizeRatio(16));
            make.right.equalTo(self.contentView.mas_right).offset(kWSizeRatio(-16));
            make.bottom.equalTo(self.contentView.mas_bottom);
        }];
        bgView.backgroundColor = RGB(54, 54, 54);
        bgView.layer.cornerRadius = kWSizeRatio(15);
        bgView.layer.masksToBounds = YES;
        
        self.topButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
        self.topButton.frame = CGRectMake(0, kWSizeRatio(29), Screen_Width - kWSizeRatio(32), kWSizeRatio(20));
        [bgView addSubview:self.topButton];
        [self.topButton setTitle:@"Contact" forState:(UIControlStateNormal)];
        self.topButton.titleLabel.font = MyFont(Font_Bold, 18);
        [self.topButton setTitleColor:[UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]] forState:UIControlStateNormal];
        [self.topButton setImage:[UIImage imageNamed:TUIKitResource(@"person_message_contac")] forState:(UIControlStateNormal)];
        [self.topButton layoutWithStatus:(MCLayoutStatusNormal) andMargin:10];
        //[GradientTextHelp TextGradientControl:self.topButton bgVIew:bgView gradientColors:@[(id)RGB(235, 142, 63).CGColor, (id)RGB(250, 204, 72).CGColor] gradientStartPoint:CGPointMake(0, 1) endPoint:CGPointMake(1, 1)];
        
        UIButton *visorButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
        [bgView addSubview:visorButton];
        [visorButton mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.equalTo(bgView.mas_centerX);
            make.top.equalTo(bgView.mas_top).offset(kWSizeRatio(77));
            make.bottom.equalTo(bgView.mas_bottom).offset(kWSizeRatio(-40));
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(133), kWSizeRatio(37)));
        }];
        visorButton.backgroundColor =  [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
        [visorButton setTitle:@"Click to view" forState:(UIControlStateNormal)];
        visorButton.layer.cornerRadius = kWSizeRatio(5);
        visorButton.layer.masksToBounds = YES;
        [visorButton addTarget:self action:@selector(clickVisorButton:) forControlEvents:(UIControlEventTouchUpInside)];
    }
    return self;
}
-(void)clickVisorButton:(UIButton *)btn
{
    if (_delegate && [_delegate respondsToSelector:@selector(clickVisorButton)]) {
        [_delegate clickVisorButton];
    }
}
@end

@protocol NSCMyMessageTagTableViewCellDelegate <NSObject>
-(void)tapTagItem:(LeeTagItem *)tagItem index:(NSInteger)index;
-(void)tapTagItemWithTitle:(NSString *)titleStr index:(NSInteger)index;
@end

@interface NSCMyMessageTagTableView ()<LeeTagViewDelegate,UICollectionViewDelegate,UICollectionViewDataSource>
@property (assign, nonatomic) NSInteger index;
@property (nonatomic,copy)NSString *typeStr;
@property (nonatomic, weak) id<NSCMyMessageTagTableViewCellDelegate> delegate;
-(void)reloadUIWithData:(NSArray *)data;
@property (strong, nonatomic) LeeTagView *tagView;
@property (nonatomic,strong) UICollectionView *heightCollectionview;
@property (nonatomic,strong) NSMutableArray *heightListArr;
@end

@implementation NSCMyMessageTagTableView

- (NSMutableArray *)heightListArr
{
    if (!_heightListArr) {
        _heightListArr = [NSMutableArray array];
    }
    return _heightListArr;
}
- (UICollectionView *)heightCollectionview
{
    if (!_heightCollectionview) {
        UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc]init];
        flow.scrollDirection = UICollectionViewScrollDirectionVertical;
        flow.minimumLineSpacing = 8;//行间距
        flow.minimumInteritemSpacing = 8;//列间距
        _heightCollectionview = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:flow];
        _heightCollectionview.backgroundColor = [UIColor clearColor];
        _heightCollectionview.showsVerticalScrollIndicator = NO;
        _heightCollectionview.showsHorizontalScrollIndicator = NO;
        _heightCollectionview.delegate = self;
        _heightCollectionview.dataSource = self;
        [_heightCollectionview registerClass:[NSCPersonMessageContaceHeightCell class] forCellWithReuseIdentifier:@"NSCPersonMessageContaceHeightCell"];
        [_heightCollectionview registerClass:[NSCPersonMessageContaceHeightCell2 class] forCellWithReuseIdentifier:@"NSCPersonMessageContaceHeightCell2"];
    }
    return _heightCollectionview;
}
- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {
    if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]){
        self.contentView.backgroundColor = [UIColor redColor];
        self.tagView = [[LeeTagView alloc]init];
        [self.contentView addSubview:self.tagView];
        [self.tagView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.bottom.equalTo(self.contentView);
            make.top.equalTo(self.contentView.mas_top);
            make.left.equalTo(self.contentView.mas_left).offset(kWSizeRatio(6));
            make.right.equalTo(self.contentView.mas_right).offset(kWSizeRatio(6));
        }];
        self.tagView.backgroundColor = [UIColor clearColor];
        self.tagView.delegate = self;
        self.tagView.tagViewSelectionStyle = LeeTagViewStyleSelectSingle;
        self.tagView.tagViewLineStyle = LeeTagViewLineStyleMulti;
        self.tagView.tagViewPadding = UIEdgeInsetsMake(10, 10, 10, 10);
        CGFloat width = self.frame.size.width;
        width = Screen_Width - 30;
        self.tagView.tagViewMaxWidth = width;
        self.tagView.hidden = YES;
        [self.contentView addSubview:self.heightCollectionview];
        [self.heightCollectionview mas_makeConstraints:^(MASConstraintMaker *make) {
            //make.bottom.equalTo(self.contentView);
            make.height.offset(kWSizeRatio(580)-kWSizeRatio(152));
            make.top.equalTo(self.contentView.mas_top);
            make.left.equalTo(self.contentView.mas_left).offset(0);
            make.right.equalTo(self.contentView.mas_right).offset(0);
        }];
    }
    return self;
}

#pragma mark -- UICollectionViewDelegate,UICollectionViewDataSource
-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 1;
}
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return self.heightListArr.count;
}
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    return UIEdgeInsetsMake(8 , 8, 8, 8);;
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (self.index == 4) {
        return CGSizeMake(kWSizeRatio(350), 32);
    }else{
        return CGSizeMake((kWSizeRatio(350)-35)/3, 32);
    }
}
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (self.index == 4) {
        NSCPersonMessageContaceHeightCell2 *heightCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NSCPersonMessageContaceHeightCell2" forIndexPath:indexPath];
        LeeTagItemViewModel *model = self.heightListArr[indexPath.row];
        NSLog(@"model.normalTitle:%@",model.normalTitle);
        heightCell.incomStr = model.normalTitle;
        return heightCell;
    }else{
        NSCPersonMessageContaceHeightCell *heightCell = [collectionView dequeueReusableCellWithReuseIdentifier:@"NSCPersonMessageContaceHeightCell" forIndexPath:indexPath];
        LeeTagItemViewModel *model = self.heightListArr[indexPath.row];
        heightCell.titleLab.text = model.normalTitle;
        return heightCell;
    }
}
-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    NSLog(@"indexpath.row:%ld",(long)indexPath.row);
    LeeTagItemViewModel *tagItem = self.heightListArr[indexPath.row];
    if (_delegate && [_delegate respondsToSelector:@selector(tapTagItemWithTitle:index:)]) {
        [_delegate tapTagItemWithTitle:tagItem.normalTitle index:self.index];
    }
//    if (_delegate && [_delegate respondsToSelector:@selector(tapTagItem:index:)]) {
//        [_delegate tapTagItem:nil index:self.index];
//    }
//    NSCPersonMessageContaceHeightCell *cell = (NSCPersonMessageContaceHeightCell *)[self collectionView:collectionView cellForItemAtIndexPath: indexPath];//  即为要得到的cell
//    cell.titleLab.textColor = [UIColor redColor];
//    [self.heightCollectionview reloadData];
}
-(void)reloadUIWithData2:(NSArray *)data
{
    self.heightCollectionview.hidden = NO;
    self.tagView.hidden = YES;
    [self.heightListArr removeAllObjects];
    [data enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        LeeTagItemViewModel * item = (LeeTagItemViewModel *)obj;
        NSLog(@"item.title:%@",item.normalTitle);
        [self.heightListArr addObject:item];
    }];
    NSLog(@"self.heightListArr.count:%lu",(unsigned long)self.heightListArr.count);
    [self.heightCollectionview reloadData];
}
-(void)reloadUIWithData:(NSArray *)data
{
    self.heightCollectionview.hidden = YES;
    self.tagView.hidden = NO;
    [self.tagView removeAllTags];
    [data enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        LeeTagItemViewModel * item = (LeeTagItemViewModel *)obj;
        [self.tagView addTag:item];
    }];
}

-(void)leeTagView:(LeeTagView *)tagView tapTagItem:(LeeTagItem *)tagItem atIndex:(NSInteger)index{
    if (_delegate && [_delegate respondsToSelector:@selector(tapTagItem:index:)]) {
        [_delegate tapTagItem:tagItem index:self.index];
    }
}
@end

@interface NSCMyMessageView ()
<UITableViewDelegate,UITableViewDataSource,NSCMyMessageTagTableViewCellDelegate,UITextViewDelegate,TZImagePickerControllerDelegate>
//上传头像视图
@property (strong, nonatomic) UIView *myHeadView;
@property (strong, nonatomic) UIButton *selectHeadButton;

//性别
@property (strong, nonatomic) UIView *sexView;
@property (strong, nonatomic) UIButton *boyButton;
@property (strong, nonatomic) UIButton *girlButton;

//住址
@property (strong, nonatomic) UIView *addressView;
@property (nonatomic,strong)NeighborsSimpleCuteResetCountryModel *countryModel;
@property (nonatomic,strong)NeighborsSimpleCuteResetCountryModel *stateModel;
@property (nonatomic,strong)NeighborsSimpleCuteResetCountryModel *cityModel;
@property (strong, nonatomic) UIButton *loacationButton;

//身高
@property (strong, nonatomic) UIView *myHeightView;
@property (strong, nonatomic)UITableView *heightTableView;

//学历
@property (strong, nonatomic) UIView *educationalView;
@property (strong, nonatomic)UITableView *educationalTableView;

//职业
@property (strong, nonatomic) UIView *professionView;
@property (strong, nonatomic)UITableView *professionTableView;

//体型
@property (strong, nonatomic) UIView *bodyTypeView;
@property (strong, nonatomic)UITableView *bodyTypeTableView;

//收入
@property (strong, nonatomic) UIView *incomeView;
@property (strong, nonatomic)UITableView *incomeTableView;

//aboutMe
@property (strong, nonatomic) UIView *aboutMeView;
@property (strong, nonatomic) UITextView *abourMeTextView;
@property (strong, nonatomic) UILabel *aboutMeNumLabel;

//About match
@property (strong, nonatomic) UIView *aboutMatchView;
@property (strong, nonatomic) UITextView *abourMatchTextView;
@property (strong, nonatomic) UILabel *aboutMatchNumLabel;

@property (assign, nonatomic) NSInteger status;
@end

@implementation NSCMyMessageView

- (instancetype)initWithFrame:(CGRect)frame{
    self = [super initWithFrame:frame];
    
    self.backgroundColor = RGB(0, 0, 0);
    [self createMyHeadImageView];
   // [self createSexView];
    return self;
}

-(void)createMyHeadImageView
{
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if (model.userInfo.imgStatus == 3)
    {
        self.myHeadView = [[UIView alloc]init];
        [self addSubview:self.myHeadView];
        [self.myHeadView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(self);
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(350), kWSizeRatio(580)));
        }];
        self.myHeadView.backgroundColor = RGB(57, 57, 57);
        self.myHeadView.layer.cornerRadius = 15;
        self.myHeadView.layer.masksToBounds = YES;
        
        UIImageView *topImageView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
        [self.myHeadView addSubview:topImageView];
        [topImageView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.top.right.equalTo(self.myHeadView);
            make.height.mas_equalTo(kWSizeRatio(48));
        }];
        
        UILabel *topLabel = [[UILabel alloc]init];
        [self.myHeadView addSubview:topLabel];
        [topLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(topImageView);
        }];
        topLabel.text = @"Complete your profile";
        topLabel.textColor = RGB(255, 255, 255);
        topLabel.textAlignment = 1;
        topLabel.font = MyFont(Font_Regular, 18);
    
        UILabel *messageLabel = [[UILabel alloc]init];
        [self.myHeadView addSubview:messageLabel];
        [messageLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.myHeadView.mas_left).offset(kWSizeRatio(40));
            make.right.equalTo(self.myHeadView.mas_right).offset(kWSizeRatio(-40));
            make.top.equalTo(topImageView.mas_bottom).offset(kWSizeRatio(52));
        }];
        messageLabel.text = @"Your photo has been rejected.please upload it again.";
        messageLabel.numberOfLines = 0;
        messageLabel.textAlignment = 1;
        messageLabel.font = MyFont(Font_Bold, 17);
        messageLabel.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        
        self.selectHeadButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
        [self.myHeadView addSubview:self.selectHeadButton];
        [self.selectHeadButton mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.equalTo(self.myHeadView);
            make.top.equalTo(messageLabel.mas_bottom).offset(kWSizeRatio(70));
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(176), kWSizeRatio(176)));
        }];
        self.selectHeadButton.layer.cornerRadius = kWSizeRatio(88);
        self.selectHeadButton.layer.masksToBounds = YES;
        [self.selectHeadButton setImage:[UIImage imageNamed:TUIKitResource(@"person_message_head_up")] forState:(UIControlStateNormal)];
        [self.selectHeadButton addTarget:self action:@selector(clickHeadButton:) forControlEvents:(UIControlEventTouchUpInside)];
        
        return;
    }
    [self createMyHeadImageView1];
}

-(void)clickHeadButton:(UIButton *)btn
{
    self.status = 0;
    self.hidden = YES;
    TZImagePickerController *imagePickerVc = [[TZImagePickerController alloc] initWithMaxImagesCount:1 columnNumber:4 delegate:self pushPhotoPickerVc:YES];
    [imagePickerVc setAllowPreview:NO];
    [imagePickerVc setNaviBgColor:[UIColor blackColor]];
    [imagePickerVc setAllowPickingVideo:NO];
    [imagePickerVc setIsSelectOriginalPhoto:NO];
    imagePickerVc.allowTakePicture = YES;
    [imagePickerVc setDidFinishPickingPhotosHandle:^(NSArray<UIImage *> *photos, NSArray *assets, BOOL isSelectOriginalPhoto) {
        self.hidden = NO;
        [self.selectHeadButton setImage:photos[0] forState:(UIControlStateNormal)];
        [self acitonGetQiNiuTokenWithImage:photos[0]];
    }];
    imagePickerVc.modalPresentationStyle = UIModalPresentationFullScreen;
    [self.window.rootViewController presentViewController:imagePickerVc animated:NO completion:nil];
}

-(NSMutableString *)getRandWithLetters
{
    NSMutableString *changeString;
    NSMutableArray *araay = [[NSMutableArray alloc]initWithObjects:@"a",@"b",@"c",@"d",@"e",@"f",@"g",@"h",@"i",@"j",@"k",@"l",@"m",@"n",@"o",@"p",@"q",@"r",@"s",@"t",@"u",@"v",@"w",@"x",@"y",@"z",@"A",@"B",@"C",@"D",@"E",@"F",@"G",@"H",@"I",@"J",@"K",@"L",@"M",@"N",@"O",@"P",@"Q",@"R",@"S",@"T",@"U",@"V",@"W",@"X",@"Y",@"Z",nil];//存放多个数，以备随机取,也可以加上大写字母和其他符号
    NSMutableString* getStr = [[NSMutableString alloc]initWithCapacity:5];
    changeString = [[NSMutableString alloc]initWithCapacity:6];//申请内存空间
    for(int i = 0; i < 6; i++) {
    NSInteger index =arc4random()%([araay count]-1);//循环六次，得到一个随机数，作为下标值取数组里面的数放到一个可变字符串里，在存放到自身定义的可变字符串
    getStr = araay[index];
    changeString= (NSMutableString*)[changeString stringByAppendingString:getStr];
    }
    NSLog(@"%@",changeString);
    return changeString;
}
/// 获取七牛token
-(void)acitonGetQiNiuTokenWithImage:(UIImage *)uploadImage
{
    NSString *urlStr  = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/qiniu/upload"];
    [SVProgressHUD showWithStatus:@"uploading..."];
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
    [manager.requestSerializer setValue:@"application/json;charset=utf-8" forHTTPHeaderField:@"Content-Type"];
        manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@"application/json",@"text/json",@"text/javascript",@"text/html", nil];
        manager.requestSerializer = [AFJSONRequestSerializer serializer];
        AFJSONResponseSerializer *response = [AFJSONResponseSerializer serializer];
        response.removesKeysWithNullValues = YES;//去除空值
        manager.responseSerializer = response;//申明返回的结果是json
        //                                                               NeighborsSimpleCuteUserModel *usermodel = [NeighborsSimpleCuteUserModel getUserInfo];
        NSString *token = [[NSUserDefaults standardUserDefaults]valueForKey:NeighborsSimple_Token];
        NSLog(@"token:%@",token);
        [manager.requestSerializer setValue:token forHTTPHeaderField:@"token"];
        NSDateFormatter *formatter=[[NSDateFormatter alloc]init];
        formatter.dateFormat=@"yyyyMMddHHmmss";
        NSString *str=[formatter stringFromDate:[NSDate date]];
        NSString *fileName=[NSString stringWithFormat:@"%@%@.jpg",str,[self getRandWithLetters]];
        NSMutableDictionary *param = [NSMutableDictionary dictionary];
        param[@"fileName"] = fileName;
        NSLog(@"param:%@",param);
        [manager POST:urlStr parameters:param headers:nil constructingBodyWithBlock:^(id<AFMultipartFormData>  _Nonnull formData) {
            NSData *imageData = UIImageJPEGRepresentation(uploadImage, 0.5);
            [formData appendPartWithFileData:imageData name:@"picFile" fileName:fileName mimeType:@"image/jpg"];
        } progress:^(NSProgress * _Nonnull uploadProgress) {
        } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
            [SVProgressHUD dismiss];
            NSLog(@"responseObject:%@",responseObject);
            [self uploadHeadImage:responseObject[@"data"]];
        } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
            NSLog(@"error:%@",error);
            [SVProgressHUD dismiss];
            [SVProgressHUD showErrorWithStatus:@"Request failed"];
            return;
        }];
}
-(void)uploadHeadImage:(NSString *)pictureStr
{
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"imgStatus"] = @"2";
    param[@"imgUrl"] = pictureStr;
    param[@"tempStr7th"] = pictureStr;
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/account/user/update"];
    NSLog(@"param:%@",param);
    NSLog(@"baseurl:%@",baseUrl);
    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        NSLog(@"create.data:%@",response.data);
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            if (self.status == 0)
            {
                NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
                model.userInfo.imImgStatus = 2;
                model.userInfo.imgUrl = pictureStr;
                model.userInfo.tempStr7th = pictureStr;
                [NeighborsSimpleCuteUserModel save:model];
                [self.myHeadView removeFromSuperview];
                [self createMyHeadImageView1];
            }
            else if (self.status == 1)
            {
                NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
                model.userInfo.imImgStatus = 2;
                model.userInfo.imgUrl = pictureStr;
                model.userInfo.tempStr7th = pictureStr;
                [NeighborsSimpleCuteUserModel save:model];
                [self.myHeadView removeFromSuperview];
                [self createSexView];
            }
        }else{
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
    }failure:^(NSError * _Nonnull error) {
        [SVProgressHUD dismiss];
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}

-(void) createMyHeadImageView1
{
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if (IsStrEmpty(model.userInfo.imgUrl) && IsStrEmpty(model.userInfo.tempStr7th))
    {
        self.myHeadView = [[UIView alloc]init];
        [self addSubview:self.myHeadView];
        [self.myHeadView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(self);
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(350), kWSizeRatio(580)));
        }];
        self.myHeadView.backgroundColor = RGB(57, 57, 57);
        self.myHeadView.layer.cornerRadius = 15;
        self.myHeadView.layer.masksToBounds = YES;
        
        UIImageView *topImageView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
        [self.myHeadView addSubview:topImageView];
        [topImageView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.top.right.equalTo(self.myHeadView);
            make.height.mas_equalTo(kWSizeRatio(48));
        }];
        
        UILabel *topLabel = [[UILabel alloc]init];
        [self.myHeadView addSubview:topLabel];
        [topLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(topImageView);
        }];
        topLabel.text = @"Complete your profile";
        topLabel.textColor = RGB(255, 255, 255);
        topLabel.textAlignment = 1;
        topLabel.font = MyFont(Font_Regular, 18);
    
        UILabel *messageLabel = [[UILabel alloc]init];
        [self.myHeadView addSubview:messageLabel];
        [messageLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.myHeadView.mas_left).offset(kWSizeRatio(40));
            make.right.equalTo(self.myHeadView.mas_right).offset(kWSizeRatio(-40));
            make.top.equalTo(topImageView.mas_bottom).offset(kWSizeRatio(52));
        }];
        messageLabel.text = @"Upload photo";
        messageLabel.numberOfLines = 0;
        messageLabel.textAlignment = 1;
        messageLabel.font = MyFont(Font_Bold, 17);
        messageLabel.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        
        self.selectHeadButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
        [self.myHeadView addSubview:self.selectHeadButton];
        [self.selectHeadButton mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.equalTo(self.myHeadView);
            make.top.equalTo(messageLabel.mas_bottom).offset(kWSizeRatio(70));
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(176), kWSizeRatio(176)));
        }];
        self.selectHeadButton.layer.cornerRadius = kWSizeRatio(88);
        self.selectHeadButton.layer.masksToBounds = YES;
        [self.selectHeadButton setImage:[UIImage imageNamed:TUIKitResource(@"person_message_head_up")] forState:(UIControlStateNormal)];
        [self.selectHeadButton addTarget:self action:@selector(clickHeadButton1:) forControlEvents:(UIControlEventTouchUpInside)];
        
        return;
    }
    [self createSexView];
}

-(void)clickHeadButton1:(UIButton *)btn
{
    self.status = 1;
    self.hidden = YES;
    TZImagePickerController *imagePickerVc = [[TZImagePickerController alloc] initWithMaxImagesCount:1 columnNumber:4 delegate:self pushPhotoPickerVc:YES];
    [imagePickerVc setAllowPreview:NO];
    [imagePickerVc setNaviBgColor:[UIColor blackColor]];
    [imagePickerVc setAllowPickingVideo:NO];
    [imagePickerVc setIsSelectOriginalPhoto:NO];
    imagePickerVc.allowTakePicture = YES;
    [imagePickerVc setDidFinishPickingPhotosHandle:^(NSArray<UIImage *> *photos, NSArray *assets, BOOL isSelectOriginalPhoto) {
        self.hidden = NO;
        [self.selectHeadButton setImage:photos[0] forState:(UIControlStateNormal)];
        [self acitonGetQiNiuTokenWithImage:photos[0]];
    }];
    imagePickerVc.modalPresentationStyle = UIModalPresentationFullScreen;
    [self.window.rootViewController presentViewController:imagePickerVc animated:NO completion:nil];
}

-(void)createSexView
{
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if (model.userInfo.gender == 0)
    {
        self.sexView = [[UIView alloc]init];
        [self addSubview:self.sexView];
        [self.sexView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(self);
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(350), kWSizeRatio(580)));
        }];
        self.sexView.backgroundColor = RGB(57, 57, 57);
        self.sexView.layer.cornerRadius = 15;
        self.sexView.layer.masksToBounds = YES;
        
        UIImageView *topImageView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
        [self.sexView addSubview:topImageView];
        [topImageView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.top.right.equalTo(self.sexView);
            make.height.mas_equalTo(kWSizeRatio(48));
        }];
        
        UILabel *topLabel = [[UILabel alloc]init];
        [self.sexView addSubview:topLabel];
        [topLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(topImageView);
        }];
        topLabel.text = @"Complete your profile";
        topLabel.textColor = RGB(255, 255, 255);
        topLabel.textAlignment = 1;
        topLabel.font = MyFont(Font_Regular, 18);
    
        UILabel *messageLabel = [[UILabel alloc]init];
        [self.sexView addSubview:messageLabel];
        [messageLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.sexView.mas_left).offset(kWSizeRatio(40));
            make.right.equalTo(self.sexView.mas_right).offset(kWSizeRatio(-40));
            make.top.equalTo(topImageView.mas_bottom).offset(kWSizeRatio(52));
        }];
        messageLabel.text = @"Choose your gender";
        messageLabel.numberOfLines = 0;
        messageLabel.textAlignment = 1;
        messageLabel.font = MyFont(Font_Bold, 17);
        messageLabel.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        
        self.boyButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
        [self.sexView addSubview:self.boyButton];
        [self.boyButton mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(messageLabel.mas_bottom).offset(kWSizeRatio(111));
            make.left.equalTo(self.sexView.mas_left).offset(kWSizeRatio(32));
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(119), kWSizeRatio(132)));
        }];
        self.boyButton.layer.cornerRadius = kWSizeRatio(5);
        self.boyButton.layer.masksToBounds = YES;
        [self.boyButton setImage:[UIImage imageNamed:TUIKitResource(@"person_message_boy")] forState:(UIControlStateNormal)];
        self.boyButton.backgroundColor = RGB(50, 50, 50);
        [self.boyButton addTarget:self action:@selector(clickBoyButton:) forControlEvents:(UIControlEventTouchUpInside)];
        
        self.girlButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
        [self.sexView addSubview:self.girlButton];
        [self.girlButton mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(messageLabel.mas_bottom).offset(kWSizeRatio(111));
            make.right.equalTo(self.sexView.mas_right).offset(kWSizeRatio(-32));
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(119), kWSizeRatio(132)));
        }];
        self.girlButton.layer.cornerRadius = kWSizeRatio(5);
        self.girlButton.layer.masksToBounds = YES;
        [self.girlButton setImage:[UIImage imageNamed:TUIKitResource(@"person_message_girl")] forState:(UIControlStateNormal)];
        self.girlButton.backgroundColor = RGB(50, 50, 50);
        [self.girlButton addTarget:self action:@selector(clickGirlButton:) forControlEvents:(UIControlEventTouchUpInside)];
        
        return;
    }
    [self createAddressView];
}

-(void)clickBoyButton:(UIButton *)btn
{
    self.boyButton.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
    self.girlButton.backgroundColor = RGB(50, 50, 50);
    self.status = 2;
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    dic[@"gender"]     = @"1";
    [self uploadUserInfoWithInfo:dic index:self.status];
}

-(void)clickGirlButton:(UIButton *)btn
{
    self.boyButton.backgroundColor = RGB(50, 50, 50);
    self.girlButton.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
    self.status = 2;
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    dic[@"gender"]     = @"2";
    [self uploadUserInfoWithInfo:dic index:self.status];
}

-(void)createAddressView
{
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if (IsStrEmpty(model.userInfo.country))
    {
        self.addressView = [[UIView alloc]init];
        [self addSubview:self.addressView];
        [self.addressView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(self);
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(350), kWSizeRatio(580)));
        }];
        self.addressView.backgroundColor = RGB(57, 57, 57);
        self.addressView.layer.cornerRadius = 15;
        self.addressView.layer.masksToBounds = YES;
        
        UIImageView *topImageView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
        [self.addressView addSubview:topImageView];
        [topImageView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.top.right.equalTo(self.addressView);
            make.height.mas_equalTo(kWSizeRatio(48));
        }];
        
        UILabel *topLabel = [[UILabel alloc]init];
        [self.addressView addSubview:topLabel];
        [topLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(topImageView);
        }];
        topLabel.text = @"Complete your profile";
        topLabel.textColor = RGB(255, 255, 255);
        topLabel.textAlignment = 1;
        topLabel.font = MyFont(Font_Regular, 18);
    
        UILabel *messageLabel = [[UILabel alloc]init];
        [self.addressView addSubview:messageLabel];
        [messageLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.addressView.mas_left).offset(kWSizeRatio(40));
            make.right.equalTo(self.addressView.mas_right).offset(kWSizeRatio(-40));
            make.top.equalTo(topImageView.mas_bottom).offset(kWSizeRatio(52));
        }];
        messageLabel.text = @"Where do you live";
        messageLabel.numberOfLines = 0;
        messageLabel.textAlignment = 1;
        messageLabel.font = MyFont(Font_Bold, 17);
        messageLabel.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        
        self.loacationButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
        [self.addressView addSubview:self.loacationButton];
        [self.loacationButton mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.addressView.mas_left).offset(kWSizeRatio(38));
            make.right.equalTo(self.addressView.mas_right).offset(kWSizeRatio(-38));
            make.top.equalTo(messageLabel.mas_bottom).offset(kWSizeRatio(136));
            make.height.mas_equalTo(kWSizeRatio(40));
        }];
        [self.loacationButton setImage:[UIImage imageNamed:TUIKitResource(@"person_message_location")] forState:(UIControlStateNormal)];
        [self.loacationButton setTitle:@"  Click to select location" forState:(UIControlStateNormal)];
        [self.loacationButton setTitleColor:RGB(235, 143, 63) forState:(UIControlStateNormal)];
        [self.loacationButton addTarget:self action:@selector(clickLocationButton:) forControlEvents:(UIControlEventTouchUpInside)];
        
        UILabel *hengLabel = [[UILabel alloc]init];
        [self.addressView addSubview:hengLabel];
        [hengLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.addressView.mas_left).offset(kWSizeRatio(38));
            make.right.equalTo(self.addressView.mas_right).offset(kWSizeRatio(-38));
            make.top.equalTo(self.loacationButton.mas_bottom);
            make.height.mas_equalTo(1);
        }];
        hengLabel.backgroundColor = RGB(235, 143, 63);
        
        return;
    }
    [self createHeightView];
}

-(void)clickLocationButton:(UIButton *)btn
{
    NeighborsSimpleCuteLocationShowView *locationShowView = [[NeighborsSimpleCuteLocationShowView alloc]initWithFrame:CGRectMake(0, 0, IPHONE_WIDTH, IPHONE_HEIGHT)];
    [locationShowView setNeighborsSimpleCuteLocationShowViewSelectBlock:^(NeighborsSimpleCuteResetCountryModel * _Nonnull countryModel, NeighborsSimpleCuteResetCountryModel * _Nonnull statemodel, NeighborsSimpleCuteResetCountryModel * _Nonnull cityModel) {
        
        self.countryModel = countryModel;
        self.stateModel = statemodel;
        self.cityModel  = cityModel;
        if (IS_EMPTY(self.cityModel.name)) {
            if (IS_EMPTY(self.stateModel.name)) {
                [self.loacationButton setTitle:[NSString stringWithFormat:@"%@",countryModel.name] forState:(UIControlStateNormal)];
            }else{
                [self.loacationButton setTitle:[NSString stringWithFormat:@"%@, %@",statemodel.name,countryModel.name] forState:(UIControlStateNormal)];
            }
        }else{
            [self.loacationButton setTitle:[NSString stringWithFormat:@"%@, %@,  %@",cityModel.name,statemodel.name,countryModel.name] forState:(UIControlStateNormal)];
        }
        NSMutableDictionary *param = [NSMutableDictionary dictionary];
        param[@"country"]    = self.countryModel.name;
        param[@"countryId"]  = @(self.countryModel.id);
        param[@"tempStr6th"] = self.countryModel.code;
        param[@"province"]   = self.stateModel.name;
        param[@"provinceId"] = @(self.stateModel.id);
        param[@"tempStr5th"] = self.stateModel.code;
        param[@"city"]       = self.cityModel.name;
        param[@"cityId"]     = @(self.cityModel.id);
        self.status = 3;
        [self uploadUserInfoWithInfo:param index:self.status];
    }];
    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    NSCParameterAssert(window);
    [window addSubview:locationShowView];
    
//    NeighborsSimpleCuteLocationShowView *locationShowView = [NeighborsSimpleCuteLocationShowView alertViewShow];
//    [locationShowView setNeighborsSimpleCuteLocationShowViewSelectBlock:^(NeighborsSimpleCuteResetCountryModel * _Nonnull countryModel, NeighborsSimpleCuteResetCountryModel * _Nonnull statemodel, NeighborsSimpleCuteResetCountryModel * _Nonnull cityModel) {
//        self.countryModel = countryModel;
//        self.stateModel = statemodel;
//        self.cityModel  = cityModel;
//        if (IS_EMPTY(self.cityModel.name)) {
//            if (IS_EMPTY(self.stateModel.name)) {
//                [self.loacationButton setTitle:[NSString stringWithFormat:@"%@",countryModel.name] forState:(UIControlStateNormal)];
//            }else{
//                [self.loacationButton setTitle:[NSString stringWithFormat:@"%@, %@",statemodel.name,countryModel.name] forState:(UIControlStateNormal)];
//            }
//        }else{
//            [self.loacationButton setTitle:[NSString stringWithFormat:@"%@, %@,  %@",cityModel.name,statemodel.name,countryModel.name] forState:(UIControlStateNormal)];
//        }
//        NSMutableDictionary *param = [NSMutableDictionary dictionary];
//        param[@"country"]    = self.countryModel.name;
//        param[@"countryId"]  = @(self.countryModel.id);
//        param[@"tempStr6th"] = self.countryModel.code;
//        param[@"province"]   = self.stateModel.name;
//        param[@"provinceId"] = @(self.stateModel.id);
//        param[@"tempStr5th"] = self.stateModel.code;
//        param[@"city"]       = self.cityModel.name;
//        param[@"cityId"]     = @(self.cityModel.id);
//        self.status = 3;
//        [self uploadUserInfoWithInfo:param index:self.status];
//    }];
//    [locationShowView show];
}

-(void)createHeightView
{
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if (IsStrEmpty(model.userInfo.spareStr1st) || [model.userInfo.spareStr1st hasPrefix:@"please"] || [model.userInfo.spareStr1st hasPrefix:@"Please"])
    {
        self.myHeightView = [[UIView alloc]init];
        [self addSubview:self.myHeightView];
        [self.myHeightView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(self);
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(350),kWSizeRatio(580)));
        }];
        self.myHeightView.backgroundColor = RGB(57, 57, 57);
        self.myHeightView.layer.cornerRadius = 15;
        self.myHeightView.layer.masksToBounds = YES;
        
        UIImageView *topImageView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
        [self.myHeightView addSubview:topImageView];
        [topImageView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.top.right.equalTo(self.myHeightView);
            make.height.mas_equalTo(kWSizeRatio(48));
        }];
        
        UILabel *topLabel = [[UILabel alloc]init];
        [self.myHeightView addSubview:topLabel];
        [topLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(topImageView);
        }];
        topLabel.text = @"Complete your profile";
        topLabel.textColor = RGB(255, 255, 255);
        topLabel.textAlignment = 1;
        topLabel.font = MyFont(Font_Regular, 18);
    
        UILabel *messageLabel = [[UILabel alloc]init];
        [self.myHeightView addSubview:messageLabel];
        [messageLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.myHeightView.mas_left).offset(kWSizeRatio(40));
            make.right.equalTo(self.myHeightView.mas_right).offset(kWSizeRatio(-40));
            make.top.equalTo(topImageView.mas_bottom).offset(kWSizeRatio(52));
        }];
        messageLabel.text = @"Choose your height";
        messageLabel.numberOfLines = 0;
        messageLabel.textAlignment = 1;
        messageLabel.font = MyFont(Font_Bold, 17);
        messageLabel.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        
        self.heightTableView = [[UITableView alloc]initWithFrame:CGRectZero style:(UITableViewStylePlain)];
        [self.myHeightView addSubview:self.heightTableView];
        [self.heightTableView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.right.equalTo(self.myHeightView);
            make.top.equalTo(messageLabel.mas_bottom).offset(kWSizeRatio(31));
            make.bottom.equalTo(self.myHeightView);
        }];
        self.heightTableView.dataSource = self;
        self.heightTableView.delegate = self;
        self.heightTableView.backgroundColor = [UIColor clearColor];
        self.heightTableView.rowHeight = kWSizeRatio(580)-kWSizeRatio(152);
        self.heightTableView.estimatedRowHeight = kWSizeRatio(580)-kWSizeRatio(152);
        self.heightTableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        
        
        return;
    }
    [self createEducationalView];
}

-(void)createEducationalView
{
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if (IsStrEmpty(model.userInfo.spareStr9th))
    {
        self.educationalView = [[UIView alloc]init];
        [self addSubview:self.educationalView];
        [self.educationalView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(self);
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(350), kWSizeRatio(500)));
        }];
        self.educationalView.backgroundColor = RGB(57, 57, 57);
        self.educationalView.layer.cornerRadius = 15;
        self.educationalView.layer.masksToBounds = YES;
        
        UIImageView *topImageView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
        [self.educationalView addSubview:topImageView];
        [topImageView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.top.right.equalTo(self.educationalView);
            make.height.mas_equalTo(kWSizeRatio(48));
        }];
        
        UILabel *topLabel = [[UILabel alloc]init];
        [self.educationalView addSubview:topLabel];
        [topLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(topImageView);
        }];
        topLabel.text = @"Complete your profile";
        topLabel.textColor = RGB(255, 255, 255);
        topLabel.textAlignment = 1;
        topLabel.font = MyFont(Font_Regular, 18);
    
        UILabel *messageLabel = [[UILabel alloc]init];
        [self.educationalView addSubview:messageLabel];
        [messageLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.educationalView.mas_left).offset(kWSizeRatio(40));
            make.right.equalTo(self.educationalView.mas_right).offset(kWSizeRatio(-40));
            make.top.equalTo(topImageView.mas_bottom).offset(kWSizeRatio(52));
        }];
        messageLabel.text = @"Choose your education";
        messageLabel.numberOfLines = 0;
        messageLabel.textAlignment = 1;
        messageLabel.font = MyFont(Font_Bold, 17);
        messageLabel.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
    
        self.educationalTableView = [[UITableView alloc]initWithFrame:CGRectZero style:(UITableViewStylePlain)];
        [self.educationalView addSubview:self.educationalTableView];
        [self.educationalTableView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.right.equalTo(self.educationalView);
            make.top.equalTo(messageLabel.mas_bottom).offset(kWSizeRatio(31));
            make.bottom.equalTo(self.educationalView);
        }];
        self.educationalTableView.dataSource = self;
        self.educationalTableView.delegate = self;
        self.educationalTableView.backgroundColor = [UIColor clearColor];
        self.educationalTableView.rowHeight = UITableViewAutomaticDimension;
        self.educationalTableView.estimatedRowHeight = 33;
        self.educationalTableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        
        return;
    }
    [self createProfessionView];
}

-(void)createProfessionView
{
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if (IsStrEmpty(model.userInfo.spareStr8th))
    {
        self.professionView = [[UIView alloc]init];
        [self addSubview:self.professionView];
        [self.professionView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(self);
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(350), kWSizeRatio(580)));
        }];
        self.professionView.backgroundColor = RGB(57, 57, 57);
        self.professionView.layer.cornerRadius = 15;
        self.professionView.layer.masksToBounds = YES;
        
        UIImageView *topImageView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
        [self.professionView addSubview:topImageView];
        [topImageView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.top.right.equalTo(self.professionView);
            make.height.mas_equalTo(kWSizeRatio(48));
        }];
        
        UILabel *topLabel = [[UILabel alloc]init];
        [self.professionView addSubview:topLabel];
        [topLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(topImageView);
        }];
        topLabel.text = @"Complete your profile";
        topLabel.textColor = RGB(255, 255, 255);
        topLabel.textAlignment = 1;
        topLabel.font = MyFont(Font_Regular, 18);
    
        UILabel *messageLabel = [[UILabel alloc]init];
        [self.professionView addSubview:messageLabel];
        [messageLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.professionView.mas_left).offset(kWSizeRatio(40));
            make.right.equalTo(self.professionView.mas_right).offset(kWSizeRatio(-40));
            make.top.equalTo(topImageView.mas_bottom).offset(kWSizeRatio(52));
        }];
        messageLabel.text = @"Choose your occupation";
        messageLabel.numberOfLines = 0;
        messageLabel.textAlignment = 1;
        messageLabel.font = MyFont(Font_Bold, 17);
        messageLabel.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
    
        self.professionTableView = [[UITableView alloc]initWithFrame:CGRectZero style:(UITableViewStylePlain)];
        [self.professionView addSubview:self.professionTableView];
        [self.professionTableView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.right.equalTo(self.professionView);
            make.top.equalTo(messageLabel.mas_bottom).offset(kWSizeRatio(31));
            make.bottom.equalTo(self.professionView);
        }];
        self.professionTableView.dataSource = self;
        self.professionTableView.delegate = self;
        self.professionTableView.backgroundColor = [UIColor clearColor];
        self.professionTableView.rowHeight = UITableViewAutomaticDimension;
        self.professionTableView.estimatedRowHeight = 33;
        self.professionTableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        
        return;
    }
    [self createBodyTypeView];
}

-(void)createBodyTypeView
{
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if (IsStrEmpty(model.userInfo.spareStr2nd))
    {
        self.bodyTypeView = [[UIView alloc]init];
        [self addSubview:self.bodyTypeView];
        [self.bodyTypeView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(self);
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(350), kWSizeRatio(580)));
        }];
        self.bodyTypeView.backgroundColor = RGB(57, 57, 57);
        self.bodyTypeView.layer.cornerRadius = 15;
        self.bodyTypeView.layer.masksToBounds = YES;
        
        UIImageView *topImageView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
        [self.bodyTypeView addSubview:topImageView];
        [topImageView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.top.right.equalTo(self.bodyTypeView);
            make.height.mas_equalTo(kWSizeRatio(48));
        }];
        
        UILabel *topLabel = [[UILabel alloc]init];
        [self.bodyTypeView addSubview:topLabel];
        [topLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(topImageView);
        }];
        topLabel.text = @"Complete your profile";
        topLabel.textColor = RGB(255, 255, 255);
        topLabel.textAlignment = 1;
        topLabel.font = MyFont(Font_Regular, 18);
    
        UILabel *messageLabel = [[UILabel alloc]init];
        [self.bodyTypeView addSubview:messageLabel];
        [messageLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.bodyTypeView.mas_left).offset(kWSizeRatio(40));
            make.right.equalTo(self.bodyTypeView.mas_right).offset(kWSizeRatio(-40));
            make.top.equalTo(topImageView.mas_bottom).offset(kWSizeRatio(52));
        }];
        messageLabel.text = @"Choose your body type";
        messageLabel.numberOfLines = 0;
        messageLabel.textAlignment = 1;
        messageLabel.font = MyFont(Font_Bold, 17);
        messageLabel.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
    
        self.bodyTypeTableView = [[UITableView alloc]initWithFrame:CGRectZero style:(UITableViewStylePlain)];
        [self.bodyTypeView addSubview:self.bodyTypeTableView];
        [self.bodyTypeTableView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.right.equalTo(self.bodyTypeView);
            make.top.equalTo(messageLabel.mas_bottom).offset(kWSizeRatio(31));
            make.bottom.equalTo(self.bodyTypeView);
        }];
        self.bodyTypeTableView.dataSource = self;
        self.bodyTypeTableView.delegate = self;
        self.bodyTypeTableView.backgroundColor = [UIColor clearColor];
        self.bodyTypeTableView.rowHeight = UITableViewAutomaticDimension;
        self.bodyTypeTableView.estimatedRowHeight = 33;
        self.bodyTypeTableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        
        return;
    }
    [self createIncomeView];
}

-(void)createIncomeView
{
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if (IsStrEmpty(model.userInfo.spareStr11th))
    {
        self.incomeView = [[UIView alloc]init];
        [self addSubview:self.incomeView];
        [self.incomeView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(self);
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(350), kWSizeRatio(580)));
        }];
        self.incomeView.backgroundColor = RGB(57, 57, 57);
        self.incomeView.layer.cornerRadius = 15;
        self.incomeView.layer.masksToBounds = YES;
        
        UIImageView *topImageView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
        [self.incomeView addSubview:topImageView];
        [topImageView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.top.right.equalTo(self.incomeView);
            make.height.mas_equalTo(kWSizeRatio(48));
        }];
        
        UILabel *topLabel = [[UILabel alloc]init];
        [self.incomeView addSubview:topLabel];
        [topLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(topImageView);
        }];
        topLabel.text = @"Complete your profile";
        topLabel.textColor = RGB(255, 255, 255);
        topLabel.textAlignment = 1;
        topLabel.font = MyFont(Font_Regular, 18);
    
        UILabel *messageLabel = [[UILabel alloc]init];
        [self.incomeView addSubview:messageLabel];
        [messageLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.incomeView.mas_left).offset(kWSizeRatio(40));
            make.right.equalTo(self.incomeView.mas_right).offset(kWSizeRatio(-40));
            make.top.equalTo(topImageView.mas_bottom).offset(kWSizeRatio(52));
        }];
        messageLabel.text = @"Choose your income";
        messageLabel.numberOfLines = 0;
        messageLabel.textAlignment = 1;
        messageLabel.font = MyFont(Font_Bold, 17);
        messageLabel.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
    
        self.incomeTableView = [[UITableView alloc]initWithFrame:CGRectZero style:(UITableViewStylePlain)];
        [self.incomeView addSubview:self.incomeTableView];
        [self.incomeTableView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.right.equalTo(self.incomeView);
            make.top.equalTo(messageLabel.mas_bottom).offset(kWSizeRatio(31));
            make.bottom.equalTo(self.incomeView);
        }];
        self.incomeTableView.dataSource = self;
        self.incomeTableView.delegate = self;
        self.incomeTableView.backgroundColor = [UIColor clearColor];
        self.incomeTableView.rowHeight = kWSizeRatio(580)-kWSizeRatio(152);
        self.incomeTableView.estimatedRowHeight = kWSizeRatio(580)-kWSizeRatio(152);
        self.incomeTableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        
        return;
    }
    [self createAboutMeView];
}
-(void)createAboutMeView
{
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if ((IsStrEmpty(model.userInfo.tempStr1st) && IsStrEmpty(model.userInfo.tempStr2nd)) || (IsStrEmpty(model.userInfo.tempStr1st) && model.userInfo.spareNum1st == 3))
    {
        self.aboutMeView = [[UIView alloc]init];
        [self addSubview:self.aboutMeView];
        [self.aboutMeView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(self);
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(350), kWSizeRatio(580)));
        }];
        self.aboutMeView.backgroundColor = RGB(57, 57, 57);
        self.aboutMeView.layer.cornerRadius = 15;
        self.aboutMeView.layer.masksToBounds = YES;
        
        UIImageView *topImageView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
        [self.aboutMeView addSubview:topImageView];
        [topImageView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.top.right.equalTo(self.aboutMeView);
            make.height.mas_equalTo(kWSizeRatio(48));
        }];
        
        UILabel *topLabel = [[UILabel alloc]init];
        [self.aboutMeView addSubview:topLabel];
        [topLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(topImageView);
        }];
        topLabel.text = @"Complete your profile";
        topLabel.textColor = RGB(255, 255, 255);
        topLabel.textAlignment = 1;
        topLabel.font = MyFont(Font_Regular, 18);
    
        UILabel *messageLabel = [[UILabel alloc]init];
        [self.aboutMeView addSubview:messageLabel];
        [messageLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.aboutMeView.mas_left).offset(kWSizeRatio(40));
            make.right.equalTo(self.aboutMeView.mas_right).offset(kWSizeRatio(-40));
            make.top.equalTo(topImageView.mas_bottom).offset(kWSizeRatio(37));
        }];
        messageLabel.text = @"About me";
        messageLabel.numberOfLines = 0;
        messageLabel.textAlignment = 1;
        messageLabel.font = MyFont(Font_Bold, 18);
        messageLabel.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        
        UIButton *tishiLabel = [UIButton buttonWithType:(UIButtonTypeCustom)];
        [self.aboutMeView addSubview:tishiLabel];
        [tishiLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerY.equalTo(messageLabel.mas_centerY);
            make.right.equalTo(self.aboutMeView.mas_right).offset(kWSizeRatio(-46));
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(59), kWSizeRatio(18)));
        }];
        [tishiLabel gradientButtonWithSize:CGSizeMake(kWSizeRatio(59), kWSizeRatio(18)) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 6)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        tishiLabel.layer.cornerRadius = kWSizeRatio(9);
        tishiLabel.layer.masksToBounds = YES;
        [tishiLabel setTitle:@"Submit" forState:(UIControlStateNormal)];
        tishiLabel.titleLabel.font = MyFont(Font_Regular, 12);
        [tishiLabel setTitleColor:RGB(255, 255, 255) forState:(UIControlStateNormal)];
        [tishiLabel addTarget:self action:@selector(clickAboutMeButton:) forControlEvents:(UIControlEventTouchUpInside)];
        
        UIView *bgView = [[UIView alloc]init];
        [self.aboutMeView addSubview:bgView];
        [bgView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.right.equalTo(self.aboutMeView);
            make.top.equalTo(messageLabel.mas_bottom).offset(kWSizeRatio(38));
            make.height.mas_equalTo(kWSizeRatio(253));
        }];
        bgView.backgroundColor = RGB(31, 31, 31);
        
        self.abourMeTextView = [[UITextView alloc]init];
        [bgView addSubview:self.abourMeTextView];
        [self.abourMeTextView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(bgView.mas_left).offset(kWSizeRatio(3));
            make.right.equalTo(bgView.mas_right).offset(kWSizeRatio(-3));
            make.top.equalTo(messageLabel.mas_bottom).offset(kWSizeRatio(38));
            make.height.mas_equalTo(kWSizeRatio(253));
        }];
        self.abourMeTextView.backgroundColor = RGB(31, 31, 31);
        self.abourMeTextView.textColor = RGB(147, 147, 147);
        self.abourMeTextView.textAlignment = 0;
        self.abourMeTextView.font = MyFont(Font_Regular, 15);
        self.abourMeTextView.zw_placeHolder = @"Write down information about yourself.";
        self.abourMeTextView.delegate = self;
        
        self.aboutMeNumLabel = [[UILabel alloc]init];
        [self.aboutMeView addSubview:self.aboutMeNumLabel];
        [self.aboutMeNumLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.right.equalTo(self.abourMeTextView.mas_right).offset(kWSizeRatio(-9));
            make.bottom.equalTo(self.abourMeTextView.mas_bottom).offset(kWSizeRatio(-7));
        }];
        self.aboutMeNumLabel.text = @"500/0";
        self.aboutMeNumLabel.textColor = RGB(235, 143, 63);
        self.aboutMeNumLabel.textAlignment = 2;
        self.aboutMeNumLabel.font = MyFont(Font_Regular, 15);
        
        UIButton *aboutMeButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
        [self.aboutMeView addSubview:aboutMeButton];
        [aboutMeButton mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.equalTo(self.aboutMeView.mas_centerX);
            make.top.equalTo(self.abourMeTextView.mas_bottom).offset(kWSizeRatio(25));
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(226), kWSizeRatio(56)));
        }];
//        aboutMeButton.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:@"udate-top-bg"]];
        [aboutMeButton gradientButtonWithSize:CGSizeMake(kWSizeRatio(226), kWSizeRatio(56)) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 6)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        aboutMeButton.layer.cornerRadius = kWSizeRatio(28);
        aboutMeButton.layer.masksToBounds = YES;
        [aboutMeButton setTitle:@"Submit" forState:(UIControlStateNormal)];
        aboutMeButton.titleLabel.font = MyFont(Font_Bold, 18);
        [aboutMeButton setTitleColor:RGB(255, 255, 255) forState:(UIControlStateNormal)];
        [aboutMeButton addTarget:self action:@selector(clickAboutMeButton:) forControlEvents:(UIControlEventTouchUpInside)];
        
        return;
    }
    [self createAboutMatchView];
}

-(void)clickAboutMeButton:(UIButton *)btn
{
    if (self.abourMeTextView.text.length < 20)
    {
        [SVProgressHUD  showInfoWithStatus:@"At least 20 characters"];
        return;
    }
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"tempStr2nd"]     = self.abourMeTextView.text;
    param[@"spareNum1st"] = @(2);
    self.status = 9;
    [self uploadUserInfoWithInfo:param index:self.status];
    
}

-(void)createAboutMatchView
{
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if ((IsStrEmpty(model.userInfo.tempStr8th) && IsStrEmpty(model.userInfo.tempStr9th)) || (IsStrEmpty(model.userInfo.tempStr9th) && model.userInfo.spareNum3rd == 3))
    {
        self.aboutMatchView = [[UIView alloc]init];
        [self addSubview:self.aboutMatchView];
        [self.aboutMatchView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(self);
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(350), kWSizeRatio(500)));
        }];
        self.aboutMatchView.backgroundColor = RGB(57, 57, 57);
        self.aboutMatchView.layer.cornerRadius = 15;
        self.aboutMatchView.layer.masksToBounds = YES;
        
        UIImageView *topImageView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
        [self.aboutMatchView addSubview:topImageView];
        [topImageView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.top.right.equalTo(self.aboutMatchView);
            make.height.mas_equalTo(kWSizeRatio(48));
        }];
        
        UILabel *topLabel = [[UILabel alloc]init];
        [self.aboutMatchView addSubview:topLabel];
        [topLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.centerY.equalTo(topImageView);
        }];
        topLabel.text = @"Complete your profile";
        topLabel.textColor = RGB(255, 255, 255);
        topLabel.textAlignment = 1;
        topLabel.font = MyFont(Font_Regular, 18);
    
        UILabel *messageLabel = [[UILabel alloc]init];
        [self.aboutMatchView addSubview:messageLabel];
        [messageLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(self.aboutMatchView.mas_left).offset(kWSizeRatio(40));
            make.right.equalTo(self.aboutMatchView.mas_right).offset(kWSizeRatio(-40));
            make.top.equalTo(topImageView.mas_bottom).offset(kWSizeRatio(37));
        }];
        messageLabel.text = @"About match";
        messageLabel.numberOfLines = 0;
        messageLabel.textAlignment = 1;
        messageLabel.font = MyFont(Font_Bold, 18);
        messageLabel.textColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]];
        
        UIButton *tishiLabel = [UIButton buttonWithType:(UIButtonTypeCustom)];
        [self.aboutMatchView addSubview:tishiLabel];
        [tishiLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerY.equalTo(messageLabel.mas_centerY);
            make.right.equalTo(self.aboutMatchView.mas_right).offset(kWSizeRatio(-46));
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(59), kWSizeRatio(18)));
        }];
        [tishiLabel gradientButtonWithSize:CGSizeMake(kWSizeRatio(59), kWSizeRatio(18)) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 6)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        tishiLabel.layer.cornerRadius = kWSizeRatio(9);
        tishiLabel.layer.masksToBounds = YES;
        [tishiLabel setTitle:@"Submit" forState:(UIControlStateNormal)];
        tishiLabel.titleLabel.font = MyFont(Font_Regular, 12);
        [tishiLabel setTitleColor:RGB(255, 255, 255) forState:(UIControlStateNormal)];
        [tishiLabel addTarget:self action:@selector(clickAboutMatchButton:) forControlEvents:(UIControlEventTouchUpInside)];
        
        UIView *bgView = [[UIView alloc]init];
        [self.aboutMatchView addSubview:bgView];
        [bgView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.right.equalTo(self.aboutMatchView);
            make.top.equalTo(messageLabel.mas_bottom).offset(kWSizeRatio(38));
            make.height.mas_equalTo(kWSizeRatio(253));
        }];
        bgView.backgroundColor = RGB(31, 31, 31);
        
        self.abourMatchTextView = [[UITextView alloc]init];
        [bgView addSubview:self.abourMatchTextView];
        [self.abourMatchTextView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.equalTo(bgView.mas_left).offset(kWSizeRatio(3));
            make.right.equalTo(bgView.mas_right).offset(kWSizeRatio(-3));
            make.top.equalTo(messageLabel.mas_bottom).offset(kWSizeRatio(38));
            make.height.mas_equalTo(kWSizeRatio(253));
        }];
        self.abourMatchTextView.backgroundColor = RGB(31, 31, 31);
        self.abourMatchTextView.textColor = RGB(147, 147, 147);
        self.abourMatchTextView.textAlignment = 0;
        self.abourMatchTextView.font = MyFont(Font_Regular, 15);
        self.abourMatchTextView.zw_placeHolder = @"Write down your idea for a match";
        self.abourMatchTextView.delegate = self;
        
        self.aboutMatchNumLabel = [[UILabel alloc]init];
        [self.aboutMatchView addSubview:self.aboutMatchNumLabel];
        [self.aboutMatchNumLabel mas_makeConstraints:^(MASConstraintMaker *make) {
            make.right.equalTo(self.abourMatchTextView.mas_right).offset(kWSizeRatio(-9));
            make.bottom.equalTo(self.abourMatchTextView.mas_bottom).offset(kWSizeRatio(-7));
        }];
        self.aboutMatchNumLabel.text = @"500/0";
        self.aboutMatchNumLabel.textColor = RGB(235, 143, 63);
        self.aboutMatchNumLabel.textAlignment = 2;
        self.aboutMatchNumLabel.font = MyFont(Font_Regular, 15);
        
        UIButton *aboutMatchButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
        [self.aboutMatchView addSubview:aboutMatchButton];
        [aboutMatchButton mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.equalTo(self.aboutMatchView.mas_centerX);
            make.top.equalTo(self.abourMatchTextView.mas_bottom).offset(kWSizeRatio(25));
            make.size.mas_equalTo(CGSizeMake(kWSizeRatio(226), kWSizeRatio(56)));
        }];
//        aboutMatchButton.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:@"udate-top-bg"]];
        [aboutMatchButton gradientButtonWithSize:CGSizeMake(kWSizeRatio(226), kWSizeRatio(56)) colorArray:@[(id)RGB(250, 204, 72),(id)RGB(235, 142, 6)] percentageArray:@[@(0.0),@(1)] gradientType:GradientFromLeftTopToRightBottom];
        aboutMatchButton.layer.cornerRadius = kWSizeRatio(28);
        aboutMatchButton.layer.masksToBounds = YES;
        [aboutMatchButton setTitle:@"Submit" forState:(UIControlStateNormal)];
        aboutMatchButton.titleLabel.font = MyFont(Font_Bold, 18);
        [aboutMatchButton setTitleColor:RGB(255, 255, 255) forState:(UIControlStateNormal)];
        [aboutMatchButton addTarget:self action:@selector(clickAboutMatchButton:) forControlEvents:(UIControlEventTouchUpInside)];
        return;
    }
    if (_delegate && [_delegate respondsToSelector:@selector(myMessageIsAllReadyWithIndex:)]) {
        [_delegate myMessageIsAllReadyWithIndex:self.index];
    }
}

#pragma mark textView代理
- (void)textViewDidChange:(UITextView *)textView
{
    if (textView.text.length > 500)
    {
        textView.text = [textView.text substringToIndex:500];
    }
    if (textView == self.abourMeTextView)
    {
        self.aboutMeNumLabel.text = [NSString stringWithFormat:@"500/%lu",textView.text.length];
    }
    else
    {
        self.aboutMatchNumLabel.text = [NSString stringWithFormat:@"500/%lu",textView.text.length];
    }
}

- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text
{
    NSString *str = [NSString stringWithFormat:@"%@%@", textView.text, text];
    if (str.length > 500)
    {
        NSRange rangeIndex = [str rangeOfComposedCharacterSequenceAtIndex:500];
        
        if (rangeIndex.length == 1)//字数超限
        {
            textView.text = [str substringToIndex:500];
        }else{
            NSRange rangeRange = [str rangeOfComposedCharacterSequencesForRange:NSMakeRange(0, 500)];
            textView.text = [str substringWithRange:rangeRange];
        }
        return NO;
    }
    return YES;
}

-(void)clickAboutMatchButton:(UIButton *)btn
{
    if (self.abourMatchTextView.text.length < 20)
    {
        [SVProgressHUD  showInfoWithStatus:@"At least 20 characters"];
        return;
    }
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"tempStr8th"]     = self.abourMatchTextView.text;
    param[@"spareNum3rd"] = @(2);
    self.status = 10;
    [self uploadUserInfoWithInfo:param index:self.status];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return 1;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSCMyMessageTagTableView *cell = [tableView dequeueReusableCellWithIdentifier:@"NSCMyMessageTagTableView"];
    if (!cell) {
        cell = [[NSCMyMessageTagTableView alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"NSCMyMessageTagTableView"];
    }
    cell.backgroundColor = [UIColor clearColor];
    cell.contentView.backgroundColor = [UIColor clearColor];
    cell.selectionStyle = UITableViewCellSelectionStyleNone;
    cell.accessoryType = UITableViewCellAccessoryNone;
    if (tableView == self.heightTableView)
    {
// zf todo
        NSArray *heightArr = @[@"4'5\"(135 cm)",@"4'6\"(137 cm)",@"4'7\"(140 cm)",@"4'8\"(142 cm)",@"4'9\"(145 cm)",@"4'10\"(147 cm)",@"4'11\"(150 cm)",@"5'0\"(152 cm)",@"5'1\"(155 cm)",@"5'2\"(157 cm)",@"5'3\"(160 cm)",@"5'4\"(163 cm)",@"5'5\"(165 cm)",@"5'6\"(168 cm)",@"5'7\"(170 cm)",@"5'8\"(173 cm)",@"5'9\"(175 cm)",@"5'10\"(178 cm)",@"5'11\"(180 cm)",@"6'1\"(183 cm)",@"6'2\"(185 cm)",@"6'3\"(188 cm)",@"6'4\"(190 cm)",@"6'5\"(193 cm)",@"6'6\"(196 cm)",@"6'7\"(198 cm)",@"6'8\"(201 cm)",@"6'9\"(203 cm)",@"6'10\"(206 cm)",@"6'11\"(211 cm)"];
        [cell reloadUIWithData2:[self createTagDataWithArr:heightArr]];
        cell.index = 0;
        cell.delegate = self;
    }
    else if (tableView == self.educationalTableView)
    {
        NSArray *educationalArr = @[@"High school",@"Some college",@"Current college student",@"Associate's / 2-Year Degree",@"Bachelor's / 4-Year Degree",@"Current grad school student",@"Graduate / Master's Degree",@"PhD. / Post Doctoral",@"Other"];
        [cell reloadUIWithData:[self createTagDataWithArr:educationalArr]];
        cell.index = 1;
        cell.delegate = self;
    }
    else if (tableView == self.professionTableView)
    {
        NSArray *professionArr = @[@"Student",@"Teacher",@"Model",@"Artistic",@"Musical",@"Writer",@"Fashion ",@"Actor",@"Secretarial",@"Administrative",@"Design",@"Management",@"Civil Service",@"Self Employed",@"Entrepreneur",@"Sales",@"Marketing",@"Retired",@"inance",@"Investor",@"Accounting",@"Technical",@"Science",@"Engineering",@"Other"];
        [cell reloadUIWithData:[self createTagDataWithArr:professionArr]];
        cell.index = 2;
        cell.delegate = self;
    }
    else if (tableView == self.bodyTypeTableView)
    {
        NSArray *bodyTypeArr = @[@"A few extra pounds",@"Athletic",@"Stocky",@"Full-figured",@"Average",@"Slim",@"Petite",@"Curvy",@"Fit"];
        [cell reloadUIWithData:[self createTagDataWithArr:bodyTypeArr]];
        cell.index = 3;
        cell.delegate = self;
    }
    else if (tableView == self.incomeTableView)
    {
        NSArray *inComeArr = @[@"Less than $250,000",@"$250,001 to $500,000",@"$500,001 to $750,000",@"$750,001 to $1000,000",@"$1000,001 to $2000,000",@"More than $2000,000"];
        cell.index = 4;
        [cell reloadUIWithData2:[self createTagDataWithArr:inComeArr]];
        cell.delegate = self;
    }
    return cell;
}

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
}

- (void)tapTagItemWithTitle:(NSString *)titleStr index:(NSInteger)index
{
    if (index == 4) {
        NSMutableDictionary *param = [NSMutableDictionary dictionary];
        param[@"spareStr11th"]     = titleStr;
        self.status = 8;
        [self uploadUserInfoWithInfo:param index:self.status];
    }else{
        NSMutableDictionary *param = [NSMutableDictionary dictionary];
        param[@"spareStr1st"]     = titleStr;
        self.status = 4;
        [self uploadUserInfoWithInfo:param index:self.status];
    }
}
-(void)tapTagItem:(LeeTagItem *)tagItem index:(NSInteger)index
{
    if (index == 0)//身高
    {
        NSMutableDictionary *param = [NSMutableDictionary dictionary];
        param[@"spareStr1st"]     = tagItem.viewModel.normalTitle;
        self.status = 4;
        [self uploadUserInfoWithInfo:param index:self.status];
    }
    else if (index == 1)//学历
    {
        NSMutableDictionary *param = [NSMutableDictionary dictionary];
        param[@"spareStr9th"]     = tagItem.viewModel.normalTitle;
        self.status = 5;
        [self uploadUserInfoWithInfo:param index:self.status];
        
    }
    else if(index == 2)//职业
    {
        NSMutableDictionary *param = [NSMutableDictionary dictionary];
        param[@"spareStr8th"]     = tagItem.viewModel.normalTitle;
        self.status = 6;
        [self uploadUserInfoWithInfo:param index:self.status];
    }
    else if(index == 3)//体型
    {
        NSMutableDictionary *param = [NSMutableDictionary dictionary];
        param[@"spareStr2nd"]     = tagItem.viewModel.normalTitle;
        self.status = 7;
        [self uploadUserInfoWithInfo:param index:self.status];
    }
    else if (index == 4)//收入
    {
        NSMutableDictionary *param = [NSMutableDictionary dictionary];
        param[@"spareStr11th"]     = tagItem.viewModel.normalTitle;
        self.status = 8;
        [self uploadUserInfoWithInfo:param index:self.status];
    }
}

-(void)uploadUserInfoWithInfo:(NSDictionary *)userInfo index:(NSInteger)index
{
    NSString *baseUrl    = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"api/account/user/update"];
    NSLog(@"baseurl:%@",baseUrl);
    NSLog(@"dic:%@",userInfo);
    //[SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST2:baseUrl parameters:userInfo success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            if (index == 2)
            {
                NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
                model.userInfo.gender = [userInfo[@"gender"] integerValue];
                [NeighborsSimpleCuteUserModel save:model];
                [self.sexView removeFromSuperview];
                [self createAddressView];
            }
            else if (index == 3)
            {
                NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
                model.userInfo.country = self.countryModel.name;
                model.userInfo.countryId = self.countryModel.id;
//                model.userInfo.tempStr6th = self.countryModel.code;
                model.userInfo.province = self.stateModel.name;
//                model.userInfo.provinceId = self.stateModel.id;
//                model.userInfo.tempStr5th = self.stateModel.code;
                model.userInfo.city = self.cityModel.name;
//                model.userInfo.cityId =self.cityModel.id;
                [NeighborsSimpleCuteUserModel save:model];
                [self.addressView removeFromSuperview];
                [self createHeightView];
            }
            else if (index == 4)
            {
                NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
                model.userInfo.spareStr1st = userInfo[@"spareStr1st"];
                [NeighborsSimpleCuteUserModel save:model];
                [self.myHeightView removeFromSuperview];
                [self createEducationalView];
            }
            else if (index == 5)
            {
                NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
                model.userInfo.spareStr9th = userInfo[@"spareStr9th"];
                [NeighborsSimpleCuteUserModel save:model];
                [self.educationalView removeFromSuperview];
                [self createProfessionView];
            }
            else if (index == 6)
            {
                NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
                model.userInfo.spareStr8th = userInfo[@"spareStr8th"];
                [NeighborsSimpleCuteUserModel save:model];
                [self.professionView removeFromSuperview];
                [self createBodyTypeView];
            }
            else if (index == 7)
            {
                NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
                model.userInfo.spareStr2nd = userInfo[@"spareStr2nd"];
                [NeighborsSimpleCuteUserModel save:model];
                [self.bodyTypeView removeFromSuperview];
                [self createIncomeView];
            }
            else if (index == 8)
            {
                NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
                model.userInfo.spareStr11th = userInfo[@"spareStr11th"];
                [NeighborsSimpleCuteUserModel save:model];
                [self.incomeView removeFromSuperview];
                [self createAboutMeView];
            }
            else if (index == 9)
            {
                NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
                model.userInfo.tempStr2nd    = self.abourMeTextView.text;
                model.userInfo.spareNum1st = 2;
                [NeighborsSimpleCuteUserModel save:model];
                [self.aboutMeView removeFromSuperview];
                [self createAboutMatchView];
            }
            else if (index == 10)
            {
                NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
                model.userInfo.tempStr8th    = self.abourMatchTextView.text;
                model.userInfo.tempStr9th    = self.abourMatchTextView.text;
                model.userInfo.spareNum3rd = 2;
                [NeighborsSimpleCuteUserModel save:model];
                if (self->_delegate && [self->_delegate respondsToSelector:@selector(myMessageIsAllReadyWithIndex:)]) {
                    [self->_delegate myMessageIsAllReadyWithIndex:self.index];
                }
            }
        }
        else
        {
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
            
    } failure:^(NSError * _Nonnull error) {
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}

#pragma mark 创建历史标签
-(NSArray *)createTagDataWithArr:(NSArray *)array
{
    NSMutableArray * array1 = [NSMutableArray array];
    [array enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        LeeTagItemViewModel * tagModel = [[LeeTagItemViewModel alloc]init];

        tagModel.normalTitle = obj;
        tagModel.normalColor = RGB(184, 184, 184);
        tagModel.normalBGColor = RGB(0, 0, 0);
        tagModel.normalFontSize = 15.0f;
        tagModel.normalCornerRadius = 5.0f;
        tagModel.normalBorderColor = [UIColor clearColor];
        
        tagModel.selectedTitle = obj;
        tagModel.selectedColor = RGB(255, 255, 255);
        tagModel.selectedBGColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
        tagModel.selectedBorderColor = [UIColor clearColor];
        tagModel.selectedFontSize = 15.0f;
        tagModel.selectedCornerRadius = 5.0f;

        tagModel.disableTitle = obj;
        tagModel.disableColor = RGB(184, 184, 184);
        tagModel.disableBGColor = RGB(0, 0, 0);
        tagModel.disableBorderColor = [UIColor clearColor];
        tagModel.disableFontSize = 15.0f;
        tagModel.disableCornerRadius = 5.0f;

        tagModel.selectedDisableTitle = obj;
        tagModel.selectedDisableColor = RGB(184, 184, 184);
        tagModel.selectedDisableBGColor = RGB(0, 0, 0);
        tagModel.selectedDisableBorderColor = [UIColor clearColor];
        tagModel.selectedDisableFontSize = 15.0f;
        tagModel.selectedDisableCornerRadius = 5.0f;
        
        tagModel.contentPadding = UIEdgeInsetsMake(9, 6, 6, 9);
        
        [array1 addObject:tagModel];
    }];
    NSArray *arr = [NSArray arrayWithArray:array1];
    return arr;

}

- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event
{
    [self.abourMeTextView resignFirstResponder];
    [self.abourMatchTextView resignFirstResponder];
}


@end
//网络地址格式化
#define kUrlWithString(urlString) [NSURL URLWithString:[urlString stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]]]
static NSString *const cellID = @"OfflineCourseSelectTableViewCell";
static NSString *const cellID1 = @"NSCPersonMessageAboutMatchTableViewCell";
static NSString *const cellID2 = @"NSCPersonMessageContactTableViewCell";
static NSString *const cellID3 = @"NSCPersonMessageInfoTableViewCell";
static NSString *const cellID4 = @"NSCPersonMessageContactNoDataTableViewCell";

//个人消息功能
@interface NSCPersonMessageViewController ()<UITableViewDelegate,UITableViewDataSource,NSCPersonMessageHeaderViewDelegate,NSCPersonMessageContactNoDataTableViewCellDelegate>
@property (strong, nonatomic) UITableView * mainTableView;

@property (strong, nonatomic) NSCPersonMessageHeaderView *headerView;

@property (strong, nonatomic) NSCPersonMessageMainModel *mainModel;


@property (strong, nonatomic) UIButton *rightButton;

@property (strong, nonatomic) UIButton *rightBlockButton;

@property (strong, nonatomic) UIView *rightView;

@property (strong, nonatomic) UIView *visorView;

@property (strong, nonatomic) UIButton *likeButton;

@property (assign, nonatomic) BOOL isBlocked;

@end


@implementation NSCPersonMessageViewController

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    self.navigationController.navigationBarHidden = YES;
}
- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    self.navigationController.navigationBarHidden = NO;
}
- (void)viewDidLoad {
    [super viewDidLoad];
    self.isBlocked = NO;
    if (@available(ios 11.0,*)) {
        UIScrollView.appearance.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;
        UITableView.appearance.estimatedRowHeight = 0;
        UITableView.appearance.estimatedSectionFooterHeight = 0;
        UITableView.appearance.estimatedSectionHeaderHeight = 0;
    }
    [self createUI];
    [self requestData];
    // Do any additional setup after loading the view.
}


-(void)createUI
{
    self.view.backgroundColor = RGB(38, 38, 38);
    self.mainTableView = [[UITableView alloc]initWithFrame:CGRectZero style:(UITableViewStylePlain)];
    self.mainTableView.showsHorizontalScrollIndicator = NO;
    self.mainTableView.showsVerticalScrollIndicator = NO;
    [self.view addSubview:self.mainTableView];
    [self.mainTableView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.equalTo(self.view);
        make.top.equalTo(self.view);
        make.bottom.equalTo(self.mas_bottomLayoutGuide).offset(kWSizeRatio(-63));
    }];
    self.mainTableView.dataSource = self;
    self.mainTableView.delegate = self;
    self.mainTableView.backgroundColor = [UIColor clearColor];
    self.mainTableView.rowHeight = UITableViewAutomaticDimension;
    self.mainTableView.estimatedRowHeight = 33;
    self.mainTableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    self.edgesForExtendedLayout = UIRectEdgeNone;
    self.navigationController.navigationBar.translucent = NO;
    self.automaticallyAdjustsScrollViewInsets = NO;
    
    UIButton *leftButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
    [self.view addSubview:leftButton];
    [leftButton mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.equalTo(self.view.mas_left).offset(14);
        make.top.equalTo(self.view.mas_top).offset(StatusBar_Height);
        make.size.mas_equalTo(CGSizeMake(44, 44));
    }];
    [leftButton setImage:[UIImage imageNamed:TUIKitResource(@"person_message_back")] forState:(UIControlStateNormal)];
    [leftButton addTarget:self action:@selector(clickLeftButton:) forControlEvents:(UIControlEventTouchUpInside)];
    
    self.rightButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
    [self.view addSubview:self.rightButton];
    [self.rightButton mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.equalTo(self.view.mas_right).offset(-14);
        make.top.equalTo(self.view.mas_top).offset(StatusBar_Height);
        make.size.mas_equalTo(CGSizeMake(44, 44));
    }];
    [self.rightButton setImage:[UIImage imageNamed:TUIKitResource(@"person_message_more")] forState:(UIControlStateNormal)];
    [self.rightButton addTarget:self action:@selector(clickRightButton:) forControlEvents:(UIControlEventTouchUpInside)];
    
}

-(void)clickLeftButton:(UIButton *)btn
{
    [self.navigationController popViewControllerAnimated:NO];
}

-(void)clickRightButton:(UIButton *)btn
{
    self.rightView = [[UIView alloc]init];
    [self.view addSubview:self.rightView];
    [self.rightView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.edges.equalTo(self.view);
    }];
    self.rightView.backgroundColor = RGBA(0, 0, 0, 0.8);
    
    UIView *rightCancelView = [[UIView alloc]init];
    [self.rightView addSubview:rightCancelView];
    [rightCancelView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.equalTo(self.rightView.mas_left).offset(kWSizeRatio(14));
        make.right.equalTo(self.rightView.mas_right).offset(kWSizeRatio(-14));
        make.bottom.equalTo(self.mas_bottomLayoutGuide).offset(kWSizeRatio(-8));
        make.height.mas_equalTo(kWSizeRatio(52));
    }];
    rightCancelView.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
    rightCancelView.layer.cornerRadius = kWSizeRatio(11);
    rightCancelView.layer.masksToBounds = YES;
    
    UIButton *rightCancelButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
    [self.rightView addSubview:rightCancelButton];
    [rightCancelButton mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.equalTo(self.rightView.mas_left).offset(kWSizeRatio(15));
        make.right.equalTo(self.rightView.mas_right).offset(kWSizeRatio(-15));
        make.bottom.equalTo(self.mas_bottomLayoutGuide).offset(kWSizeRatio(-9));
        make.height.mas_equalTo(kWSizeRatio(50));
    }];
    rightCancelButton.backgroundColor = RGB(40, 40, 40);
    rightCancelButton.layer.cornerRadius = kWSizeRatio(10);
    rightCancelButton.layer.masksToBounds = YES;
    [rightCancelButton setTitle:@"Cancel" forState:(UIControlStateNormal)];
    [rightCancelButton setTitleColor:[UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]] forState:(UIControlStateNormal)];
    rightCancelButton.titleLabel.font = MyFont(Font_Regular, 15);
    [rightCancelButton addTarget:self action:@selector(clickRightCancelButton:) forControlEvents:(UIControlEventTouchUpInside)];
    
    UIView *rightTopView = [[UIView alloc]init];
    [self.rightView addSubview:rightTopView];
    [rightTopView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.equalTo(self.rightView.mas_left).offset(kWSizeRatio(14));
        make.right.equalTo(self.rightView.mas_right).offset(kWSizeRatio(-14));
        make.bottom.equalTo(rightCancelView.mas_top).offset(kWSizeRatio(-24));
        make.height.mas_equalTo(kWSizeRatio(103));
    }];
    rightTopView.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
    rightTopView.layer.cornerRadius = kWSizeRatio(9);
    rightTopView.layer.masksToBounds = YES;
    
    UIView *rightTopBgView = [[UIView alloc]init];
    [rightTopView addSubview:rightTopBgView];
    [rightTopBgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(rightTopView.mas_top).offset(1);
        make.left.equalTo(rightTopView.mas_left).offset(1);
        make.bottom.equalTo(rightTopView.mas_bottom).offset(-1);
        make.right.equalTo(rightTopView.mas_right).offset(-1);
    }];
    rightTopBgView.backgroundColor = RGB(40, 40, 40);
    rightTopBgView.layer.cornerRadius = kWSizeRatio(10);
    self.rightBlockButton.layer.masksToBounds = YES;
    
    self.rightBlockButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
    [rightTopBgView addSubview:self.rightBlockButton];
    [self.rightBlockButton mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.top.equalTo(rightTopBgView);
        make.height.mas_equalTo(kWSizeRatio(50));
    }];
    self.rightBlockButton.backgroundColor = RGB(40, 40, 40);
    self.rightBlockButton.layer.cornerRadius = kWSizeRatio(10);
    self.rightBlockButton.layer.masksToBounds = YES;
    [self.rightBlockButton setTitleColor:[UIColor whiteColor] forState:(UIControlStateNormal)];
    self.rightBlockButton.titleLabel.font = MyFont(Font_Regular, 15);
    [self.rightBlockButton setTitle:@"Block" forState:(UIControlStateNormal)];
    [self.rightBlockButton addTarget:self action:@selector(clickRightBlockButton:) forControlEvents:(UIControlEventTouchUpInside)];
    
    UIButton *rightReportButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
    [rightTopBgView addSubview:rightReportButton];
    [rightReportButton mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.bottom.equalTo(rightTopBgView);
        make.height.mas_equalTo(kWSizeRatio(50));
    }];
    rightReportButton.backgroundColor = RGB(40, 40, 40);
    rightReportButton.layer.cornerRadius = kWSizeRatio(10);
    rightReportButton.layer.masksToBounds = YES;
    [rightReportButton setTitle:@"Report" forState:(UIControlStateNormal)];
    [rightReportButton setTitleColor:[UIColor whiteColor] forState:(UIControlStateNormal)];
    rightReportButton.titleLabel.font = MyFont(Font_Regular, 15);
    [rightReportButton addTarget:self action:@selector(clickRightReportButton:) forControlEvents:(UIControlEventTouchUpInside)];
    
    UILabel *hengLabel = [[UILabel alloc]init];
    [rightTopBgView addSubview:hengLabel];
    [hengLabel mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.right.equalTo(rightTopBgView);
        make.top.equalTo(self.rightBlockButton.mas_bottom);
        make.bottom.equalTo(rightReportButton.mas_top);
    }];
    hengLabel.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
}

-(void)clickRightCancelButton:(UIButton *)btn
{
    [self.rightView removeFromSuperview];
}

-(void)clickRightReportButton:(UIButton *)btn
{
    //NeighborsSimpleCuteReportController *feedBackVC = [[NeighborsSimpleCuteReportController alloc]init];
    //[self.navigationController pushViewController:feedBackVC animated:YES];
    NeighborsSimpleCuteSettingFeedBackController *feedbackvc = [[NeighborsSimpleCuteSettingFeedBackController alloc]init];
    feedbackvc.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:feedbackvc animated:YES];
}

-(void)clickRightBlockButton:(UIButton *)btn
{
    [SVProgressHUD show];
    int64_t delayInSeconds = 2.0;      // 延迟的时间
    /*
     *@parameter 1,时间参照，从此刻开始计时
     *@parameter 2,延时多久，此处为秒级，还有纳秒等。10ull * NSEC_PER_MSEC
     */
    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * NSEC_PER_SEC);
    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
        [SVProgressHUD dismiss];
//        [SVProgressHUD showInfoWithStatus:@"Blocked"];
        [self.rightBlockButton setTitle:@"Blocked" forState:(UIControlStateNormal)];
//        [self.rightView removeFromSuperview];
    });
}


-(void)clickMessageButton:(UIButton *)btn
{
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    if (model.userInfo.memberLevel == 0)
    {
        [self showVisorViewWithStr:@"Upgrade to Premium member to send messages unlimited."];
    }
    else
    {
//        [SVProgressHUD showInfoWithStatus:@"请等待聊天功能接入"];
        ChatViewController *chat = [[ChatViewController alloc] init];
        chat.userId = [NSString stringWithFormat:@"%ld",(long)self.personUserId];
        TUIConversationCellData *conversationData = [[TUIConversationCellData alloc] init];
        conversationData.userID = self.tempStr20th;
        conversationData.title = self.nickName;
        chat.conversationData = conversationData;
        [self.navigationController pushViewController:chat animated:YES];
    }
}

-(void)clickLikeButton:(UIButton *)btn
{
    btn.selected = !btn.selected;
    NSInteger like = 0;
    if (btn.selected)
    {
        like = 1;
    }
    [self uploadLikeStatus:like];
}

-(void)uploadLikeStatus:(NSInteger)status
{
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    param[@"state"] = [NSString stringWithFormat:@"0"];
    param[@"handleId"] =  [NSNumber numberWithInteger:self.mainModel.userInfo.userId];
    NSString *baseUrl    = [NSString stringWithFormat:@"%@%@",NSC_Base_Url,@"/api/relation/upvote"];
    NSDictionary *dic = [NSDictionary dictionaryWithObject:param forKey:@"requestEntity"];
    NSLog(@"baseurl:%@",baseUrl);
    NSLog(@"param:%@",param);;
    NSLog(@"dic:%@",dic);
    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            
        }
        else
        {
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
            
    } failure:^(NSError * _Nonnull error) {
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}


-(void)requestData
{
    //开始去做登录操作
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
    param[@"userId"] = [NSNumber numberWithInteger:model.userInfo.userId];
    NSString *baseUrl    = [NSString stringWithFormat:@"%@%@/%ld",NSC_Base_Url,@"/api/relation/visitor",(long)self.personUserId];
    NSLog(@"baseurl:%@",baseUrl);
    NSLog(@"param:%@",param);
    [SVProgressHUD show];
    [[NeighborsSimpleCuteNetworkTool sharedNetworkTool]POST2:baseUrl parameters:param success:^(NeighborsSimpleCuteResposeModel * _Nonnull response) {
        [SVProgressHUD dismiss];
        if (response.code == 0) {
            self.mainModel = [NSCPersonMessageMainModel mj_objectWithKeyValues:response.data];
            UIView *bottomView = [[UIView alloc]init];
                [self.view addSubview:bottomView];
                [bottomView mas_makeConstraints:^(MASConstraintMaker *make) {
                    make.left.right.bottom.equalTo(self.view);
                    make.top.equalTo(self.mas_bottomLayoutGuide).offset(kWSizeRatio(-63));
                }];
                
                UIButton *messageButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
                [bottomView addSubview:messageButton];
                [messageButton mas_makeConstraints:^(MASConstraintMaker *make) {
                    make.left.top.equalTo(bottomView);
                    make.right.equalTo(bottomView.mas_centerX).offset(-1);
                    make.bottom.equalTo(self.mas_bottomLayoutGuide);
                }];
                [messageButton setTitle:@"Message" forState:(UIControlStateNormal)];
                [messageButton setTitleColor:[UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]] forState:(UIControlStateNormal)];
                messageButton.titleLabel.font = MyFont(Font_Regular, 18);
                [messageButton setImage:[UIImage imageNamed:TUIKitResource(@"person_message_promess")] forState:(UIControlStateNormal)];
                [messageButton addTarget:self action:@selector(clickMessageButton:) forControlEvents:(UIControlEventTouchUpInside)];
                [messageButton layoutWithStatus:(MCLayoutStatusNormal) andMargin:5];
                
                self.likeButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
                [bottomView addSubview:self.likeButton];
                [self.likeButton mas_makeConstraints:^(MASConstraintMaker *make) {
                    make.right.top.equalTo(bottomView);
                    make.left.equalTo(bottomView.mas_centerX).offset(1);
                    make.bottom.equalTo(self.mas_bottomLayoutGuide);
                }];
                [self.likeButton setTitle:@"Like" forState:(UIControlStateNormal)];
                [self.likeButton setTitle:@"Liked" forState:(UIControlStateSelected)];
                [self.likeButton setTitleColor:[UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"上下渐变all")]] forState:(UIControlStateNormal)];
                self.likeButton.titleLabel.font = MyFont(Font_Regular, 18);
                [self.likeButton setImage:[UIImage imageNamed:TUIKitResource(@"person_message_nolike")] forState:(UIControlStateNormal)];
                [self.likeButton setImage:[UIImage imageNamed:TUIKitResource(@"person_message_liked")] forState:(UIControlStateSelected)];
                [self.likeButton addTarget:self action:@selector(clickLikeButton:) forControlEvents:(UIControlEventTouchUpInside)];
                [self.likeButton layoutWithStatus:(MCLayoutStatusNormal) andMargin:5];
                
                UILabel *shuLabel = [[UILabel alloc]init];
                [bottomView addSubview:shuLabel];
                [shuLabel mas_makeConstraints:^(MASConstraintMaker *make) {
                    make.top.equalTo(bottomView.mas_top).offset(kWSizeRatio(14.5));
                    make.centerX.equalTo(bottomView);
                    make.size.mas_equalTo(CGSizeMake(2, kWSizeRatio(63 - 29)));
                }];
                shuLabel.backgroundColor = RGB(106, 106, 106);
            [self requestDataSuccess];
        }
        else
        {
            [SVProgressHUD showInfoWithStatus:response.msg];
            return;
        }
            
    } failure:^(NSError * _Nonnull error) {
        [SVProgressHUD showInfoWithStatus:error.localizedDescription];
        return;
    }];
}

-(void)requestDataSuccess
{
    if (self.mainModel.upvoteState == 1)
    {
        self.likeButton.selected = YES;
    }
    else
    {
        self.likeButton.selected = NO;
    }
    NSMutableArray *bannerArr = [NSMutableArray array];
    NSString *pre = [NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th;
    [bannerArr addObject:[NSString stringWithFormat:@"%@/%@",pre,self.mainModel.userInfo.imgUrl]];
    for (int i = 0; i < self.mainModel.photos.count; i ++) {
        NSCPersonMessagePhotoModel *model = self.mainModel.photos[i];
        [bannerArr addObject:[NSString stringWithFormat:@"%@/%@",pre,model.imgUrl]];
    }
    self.headerView = [[NSCPersonMessageHeaderView alloc]init];
    self.headerView.frame = CGRectMake(0, 0, Screen_Width,kWSizeRatio(526));
    self.headerView.delegate = self;
    self.mainTableView.tableHeaderView = self.headerView;
    [self.headerView setDataArr:bannerArr];
    [self .mainTableView reloadData];
}

#pragma mark 表格头部视图代理
//点击轮播
- (void)selectScrollViewIndex:(NSInteger )index
{
    NSMutableArray *datas = [NSMutableArray array];
    NSString *pre = [NeighborsSimpleCuteUserModel getUserInfo].appClient.spare17th;
    
    YBIBImageData *data = [YBIBImageData new];
    NSString *imageStr = [NSString stringWithFormat:@"%@/%@",pre,self.mainModel.userInfo.imgUrl];
    data.imageURL = kUrlWithString(imageStr);
    [datas addObject:data];
    
    for (int i = 0; i < self.mainModel.photos.count; i ++)
    {
        NSCPersonMessagePhotoModel *model = self.mainModel.photos[i];
        YBIBImageData *data = [YBIBImageData new];
        NSString *imageStr = [NSString stringWithFormat:@"%@/%@",pre,model.imgUrl];
        data.imageURL = kUrlWithString(imageStr);
        [datas addObject:data];
    }
    YBImageBrowser *browser = [YBImageBrowser new];
    browser.dataSourceArray = datas;
    browser.currentPage = index;
    // 只有一个保存操作的时候，可以直接右上角显示保存按钮
//    browser.defaultToolViewHandler.topView.operationType = YBIBTopViewOperationTypeSave;
    browser.defaultToolViewHandler.topView.operationButton.hidden = YES;
    [browser show];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if (!self.mainModel) {
        return 0;
    }
    NSInteger num = 1;
    if (!IsStrEmpty(self.mainModel.userInfo.tempStr1st)) {
        num += 1;
    }
    if (!IsStrEmpty(self.mainModel.userInfo.tempStr9th)) {
        num += 1;
    }
    NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
//    if([model.appClient.stateSet isEqualToString:@"1"])//判断登录返回的stateSet为1时显示connect（此处不作判断故注释）
//    {
        if (model.userInfo.memberLevel == 0)//判断当前登录用户的会员等级为时显示click to view
        {
            num += 1;
        }
        else if(model.userInfo.memberLevel > 0)//当前登录用户等级大于1
        {
            if (!IsStrEmpty(self.mainModel.userInfo.introduce))//当前查看的用户的introduce不为空显示contact文本
            {
                num += 1;
            }
        }
//    }
    return num;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSCPersonMessageAboutMeTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellID];
    if (!cell) {
        cell = [[NSCPersonMessageAboutMeTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellID];
    }
    cell.backgroundColor = [UIColor clearColor];
    cell.contentView.backgroundColor = [UIColor clearColor];
    cell.selectionStyle = UITableViewCellSelectionStyleNone;
    cell.accessoryType = UITableViewCellAccessoryNone;
    
    NSCPersonMessageAboutMatchTableViewCell *cell1 = [tableView dequeueReusableCellWithIdentifier:cellID1];
    if (!cell1) {
        cell1 = [[NSCPersonMessageAboutMatchTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellID1];
    }
    cell1.backgroundColor = [UIColor clearColor];
    cell1.contentView.backgroundColor = [UIColor clearColor];
    cell1.selectionStyle = UITableViewCellSelectionStyleNone;
    cell1.accessoryType = UITableViewCellAccessoryNone;
    
    NSCPersonMessageContactTableViewCell *cell2 = [tableView dequeueReusableCellWithIdentifier:cellID2];
    if (!cell2) {
        cell2 = [[NSCPersonMessageContactTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellID2];
    }
    cell2.backgroundColor = [UIColor clearColor];
    cell2.contentView.backgroundColor = [UIColor clearColor];
    cell2.selectionStyle = UITableViewCellSelectionStyleNone;
    cell2.accessoryType = UITableViewCellAccessoryNone;
    
    NSCPersonMessageInfoTableViewCell *cell3 = [tableView dequeueReusableCellWithIdentifier:cellID3];
    if (!cell3) {
        cell3 = [[NSCPersonMessageInfoTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellID3];
    }
    cell3.backgroundColor = [UIColor clearColor];
    cell3.contentView.backgroundColor = [UIColor clearColor];
    cell3.selectionStyle = UITableViewCellSelectionStyleNone;
    cell3.accessoryType = UITableViewCellAccessoryNone;
    
    NSCPersonMessageContactNoDataTableViewCell *cell4 = [tableView dequeueReusableCellWithIdentifier:cellID4];
    if (!cell4) {
        cell4 = [[NSCPersonMessageContactNoDataTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellID4];
    }
    cell4.backgroundColor = [UIColor clearColor];
    cell4.contentView.backgroundColor = [UIColor clearColor];
    cell4.selectionStyle = UITableViewCellSelectionStyleNone;
    cell4.accessoryType = UITableViewCellAccessoryNone;
    
    if (indexPath.row == 0)
    {
        NSMutableArray *source = [NSMutableArray array];
        if (IsStrEmpty(self.mainModel.userInfo.spareStr1st) || [self.mainModel.userInfo.spareStr1st hasPrefix:@"please"] || [self.mainModel.userInfo.spareStr1st hasPrefix:@"Please"])
        {
            
        }
        else
        {
            [source addObject:[NSString stringWithFormat:@"Height: %@",self.mainModel.userInfo.spareStr1st]];
        }
        
        if (!IsStrEmpty(self.mainModel.userInfo.spareStr2nd)) {
            [source addObject:[NSString stringWithFormat:@"Body type: %@",self.mainModel.userInfo.spareStr2nd]];
        }
        
        if (!IsStrEmpty(self.mainModel.userInfo.spareStr3rd)) {
            [source addObject:[NSString stringWithFormat:@"Eye color: %@",self.mainModel.userInfo.spareStr3rd]];
        }
        
        if (!IsStrEmpty(self.mainModel.userInfo.spareStr4th)) {
            [source addObject:[NSString stringWithFormat:@"Hair color: %@",self.mainModel.userInfo.spareStr4th]];
        }
        
        if (!IsStrEmpty(self.mainModel.userInfo.spareStr5th)) {
            [source addObject:[NSString stringWithFormat:@"Sign: %@",self.mainModel.userInfo.spareStr5th]];
        }
        
        if (!IsStrEmpty(self.mainModel.userInfo.spareStr6th)) {
            [source addObject:[NSString stringWithFormat:@"Personality: %@",self.mainModel.userInfo.spareStr6th]];
        }
        
        if (!IsStrEmpty(self.mainModel.userInfo.spareStr7th)) {
            [source addObject:[NSString stringWithFormat:@"Language: %@",self.mainModel.userInfo.spareStr7th]];
        }
        
        if (!IsStrEmpty(self.mainModel.userInfo.spareStr8th)) {
            [source addObject:[NSString stringWithFormat:@"Occupation: %@",self.mainModel.userInfo.spareStr8th]];
        }
        
        if (!IsStrEmpty(self.mainModel.userInfo.spareStr9th)) {
            [source addObject:[NSString stringWithFormat:@"Education: %@",self.mainModel.userInfo.spareStr9th]];
        }
        
        if (!IsStrEmpty(self.mainModel.userInfo.spareStr10th)) {
            [source addObject:[NSString stringWithFormat:@"Music prefer: %@",self.mainModel.userInfo.spareStr10th]];
        }
        
        if (!IsStrEmpty(self.mainModel.userInfo.spareStr11th)) {
            [source addObject:[NSString stringWithFormat:@"Income: %@",self.mainModel.userInfo.spareStr11th]];
        }
        
        if (!IsStrEmpty(self.mainModel.userInfo.spareStr12th)) {
            [source addObject:[NSString stringWithFormat:@"House: %@",self.mainModel.userInfo.spareStr12th]];
        }
        
        if (!IsStrEmpty(self.mainModel.userInfo.spareStr13th)) {
            [source addObject:[NSString stringWithFormat:@"Car: %@",self.mainModel.userInfo.spareStr13th]];
        }
        
        if (IsStrEmpty(self.mainModel.userInfo.spareStr14th) || [self.mainModel.userInfo.spareStr14th hasPrefix:@"you"] || [self.mainModel.userInfo.spareStr14th hasPrefix:@"You"]) {
            
        }
        else
        {
            [source addObject:[NSString stringWithFormat:@"Drinking: %@",self.mainModel.userInfo.spareStr14th]];
        }
        
        if (!IsStrEmpty(self.mainModel.userInfo.spareStr15th)) {
            [source addObject:[NSString stringWithFormat:@"Smoking: %@",self.mainModel.userInfo.spareStr15th]];
        }
        
        [cell3 reloadUIWithModel:self.mainModel.userInfo data:[self createTagDataWithArr:source]];
        
        return cell3;
    }
    else if (indexPath.row == 1)
    {
        if (!IsStrEmpty(self.mainModel.userInfo.tempStr1st))//about me
        {
            [cell reloadUIWithStr:self.mainModel.userInfo.tempStr1st];
            return cell;
        }
        else
        {
            if (!IsStrEmpty(self.mainModel.userInfo.tempStr9th))//about match
            {
                [cell1 reloadUIWithStr:self.mainModel.userInfo.tempStr9th];
                return cell1;
            }
            else
            {
                NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
//                if([model.appClient.stateSet isEqualToString:@"1"])
//                {
                    if (model.userInfo.memberLevel == 0)
                    {
                        cell4.delegate = self;
                        return cell4;
                    }
                    else if(model.userInfo.memberLevel > 0)
                    {
                        if (!IsStrEmpty(self.mainModel.userInfo.introduce))
                        {
                            [cell2 reloadUIWithStr:self.mainModel.userInfo.introduce];
                            return cell2;
                        }
                    }
//                }
            }
        }
    }
    else if (indexPath.row == 2)
    {
        if (!IsStrEmpty(self.mainModel.userInfo.tempStr9th))//about match
        {
            [cell1 reloadUIWithStr:self.mainModel.userInfo.tempStr9th];
            return cell1;
        }
        else
        {
            NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
//            if([model.appClient.stateSet isEqualToString:@"1"])
//            {
                if (model.userInfo.memberLevel == 0)
                {
                    cell4.delegate = self;
                    return cell4;
                }
                else if(model.userInfo.memberLevel > 0)
                {
                    if (!IsStrEmpty(self.mainModel.userInfo.introduce))
                    {
                        [cell2 reloadUIWithStr:self.mainModel.userInfo.introduce];
                        return cell2;
                    }
                }
                    
//            }
        }
    }
    else
    {
        NeighborsSimpleCuteUserModel *model = [NeighborsSimpleCuteUserModel getUserInfo];
//        if([model.appClient.stateSet isEqualToString:@"1"])
//        {
            if (model.userInfo.memberLevel == 0)
            {
                cell4.delegate = self;
                return cell4;
            }
            else if(model.userInfo.memberLevel > 0)
            {
                if (!IsStrEmpty(self.mainModel.userInfo.introduce))
                {
                    [cell2 reloadUIWithStr:self.mainModel.userInfo.introduce];
                    return cell2;
                }
            }
//        }
    }
    return cell;
}

-(void)clickVisorButton
{
    [self showVisorViewWithStr:@"Upgrade to Premium member to use this function."];
}

-(void)showVisorViewWithStr:(NSString *)message
{
    self.visorView = [[UIView alloc]init];
    [self.view addSubview:self.visorView];
    [self.visorView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.edges.equalTo(self.view);
    }];
    self.visorView.backgroundColor = RGB(0, 0, 0);
    
    UIView *bgView = [[UIView alloc]init];
    [self.visorView addSubview:bgView];
    [bgView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.equalTo(self.visorView);
        make.size.mas_equalTo(CGSizeMake(kWSizeRatio(337), kWSizeRatio(500)));
    }];
    bgView.backgroundColor = RGB(57, 57, 57);
    bgView.layer.cornerRadius = 15;
    bgView.layer.masksToBounds = YES;
    
    UIImageView *topImageView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
    [bgView addSubview:topImageView];
    [topImageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.top.right.equalTo(bgView);
        make.height.mas_equalTo(kWSizeRatio(48));
    }];
    
    UILabel *topLabel = [[UILabel alloc]init];
    [bgView addSubview:topLabel];
    [topLabel mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.centerY.equalTo(topImageView);
    }];
    topLabel.text = @"Tips";
    topLabel.textColor = RGB(255, 255, 255);
    topLabel.textAlignment = 1;
    topLabel.font = MyFont(Font_Bold, 18);
    
    UIImageView *vipImageView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:TUIKitResource(@"person_message_vip_big")]];
    [bgView addSubview:vipImageView];
    [vipImageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.equalTo(bgView);
        make.top.equalTo(topImageView.mas_bottom).offset(kWSizeRatio(44));
        make.size.mas_equalTo(CGSizeMake(kWSizeRatio(169), kWSizeRatio(158)));
    }];
    
    UILabel *messageLabel = [[UILabel alloc]init];
    [bgView addSubview:messageLabel];
    [messageLabel mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.equalTo(bgView.mas_left).offset(kWSizeRatio(40));
        make.right.equalTo(bgView.mas_right).offset(kWSizeRatio(-40));
        make.top.equalTo(vipImageView.mas_bottom).offset(kWSizeRatio(4));
    }];
    messageLabel.text = message;
    messageLabel.textColor = RGB(255, 255, 255);
    messageLabel.textAlignment = 1;
    messageLabel.font = MyFont(Font_Regular, 16);
    messageLabel.numberOfLines = 0;
    
    UIButton *quxiaoButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
    [bgView addSubview:quxiaoButton];
    [quxiaoButton mas_makeConstraints:^(MASConstraintMaker *make) {
        make.bottom.equalTo(bgView.mas_bottom).offset(kWSizeRatio(-44));
        make.left.equalTo(bgView.mas_left).offset(kWSizeRatio(22));
        make.size.mas_equalTo(CGSizeMake(kWSizeRatio(127), kWSizeRatio(50)));
    }];
    quxiaoButton.layer.cornerRadius = kWSizeRatio(3);
    quxiaoButton.layer.masksToBounds = YES;
    [quxiaoButton setTitle:@"Cancel" forState:(UIControlStateNormal)];
    quxiaoButton.backgroundColor =  [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
    quxiaoButton.titleLabel.font = MyFont(Font_Regular, 16);
    [quxiaoButton addTarget:self action:@selector(clickQuxiaoButton:) forControlEvents:(UIControlEventTouchUpInside)];
    
    UIButton *upgradeButton = [UIButton buttonWithType:(UIButtonTypeCustom)];
    [bgView addSubview:upgradeButton];
    [upgradeButton mas_makeConstraints:^(MASConstraintMaker *make) {
        make.bottom.equalTo(bgView.mas_bottom).offset(kWSizeRatio(-44));
        make.right.equalTo(bgView.mas_right).offset(kWSizeRatio(-22));
        make.size.mas_equalTo(CGSizeMake(kWSizeRatio(127), kWSizeRatio(50)));
    }];
    upgradeButton.layer.cornerRadius = kWSizeRatio(3);
    upgradeButton.layer.masksToBounds = YES;
    [upgradeButton setTitle:@"Upgrade" forState:(UIControlStateNormal)];
    upgradeButton.backgroundColor =  [UIColor colorWithPatternImage:[UIImage imageNamed:TUIKitResource(@"udate-top-bg")]];
    upgradeButton.titleLabel.font = MyFont(Font_Regular, 16);
    [upgradeButton addTarget:self action:@selector(clickUpgradeButton:) forControlEvents:(UIControlEventTouchUpInside)];
}

-(void)clickQuxiaoButton:(UIButton *)btn
{
    [self.visorView removeFromSuperview];
}

-(void)clickUpgradeButton:(UIButton *)btn
{
    ZFMemberUpgrdeOtherController *zfothermembervc = [[ZFMemberUpgrdeOtherController alloc]init];
    zfothermembervc.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:zfothermembervc animated:YES];
}
#pragma mark 创建历史标签
-(NSArray *)createTagDataWithArr:(NSArray *)array
{
    NSMutableArray * array1 = [NSMutableArray array];
    [array enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        LeeTagItemViewModel * tagModel = [[LeeTagItemViewModel alloc]init];

        tagModel.normalTitle = obj;
        tagModel.normalColor = RGB(184, 184, 184);
        tagModel.normalBGColor = RGB(0, 0, 0);
        tagModel.normalFontSize = 15.0f;
        tagModel.normalCornerRadius = 5.0f;
        tagModel.normalBorderColor = [UIColor clearColor];
        
        tagModel.selectedTitle = obj;
        tagModel.selectedColor = RGB(184, 184, 184);
        tagModel.selectedBGColor = RGB(0, 0, 0);
        tagModel.selectedBorderColor = [UIColor clearColor];
        tagModel.selectedFontSize = 15.0f;
        tagModel.selectedCornerRadius = 5.0f;

        tagModel.disableTitle = obj;
        tagModel.disableColor = RGB(184, 184, 184);
        tagModel.disableBGColor = RGB(0, 0, 0);
        tagModel.disableBorderColor = [UIColor clearColor];
        tagModel.disableFontSize = 15.0f;
        tagModel.disableCornerRadius = 5.0f;

        tagModel.selectedDisableTitle = obj;
        tagModel.selectedDisableColor = RGB(184, 184, 184);
        tagModel.selectedDisableBGColor = RGB(0, 0, 0);
        tagModel.selectedDisableBorderColor = [UIColor clearColor];
        tagModel.selectedDisableFontSize = 15.0f;
        tagModel.selectedDisableCornerRadius = 5.0f;
        
        [array1 addObject:tagModel];
    }];
    NSArray *arr = [NSArray arrayWithArray:array1];
    return arr;
}

@end
